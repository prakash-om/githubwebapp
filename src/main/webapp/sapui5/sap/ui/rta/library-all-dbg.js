// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.rta.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.rta.ModelConverter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/*global Promise */// declare unusual global vars for JSLint/SAPUI5 validation
jQuery.sap.declare('sap.ui.rta.ModelConverter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.FieldSelectorModelConverter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ModelConverter",['jquery.sap.global', 'sap/ui/comp/odata/FieldSelectorModelConverter', 'sap/ui/dt/ElementUtil'], function(jQuery, FieldSelectorModelConverter, ElementUtil) {
	"use strict";

	/**
	 * Class for ModelConverter.
	 * 
	 * @class
	 * ModelConverter functionality to get a converted model from a given OData Model, which includes checks for already bound and visible properties on the UI as well as renamed labels for sap:label
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @private
	 * @static
	 * @since 1.33
	 * @alias sap.ui.rta.ModelConverter
	 * @experimental Since 1.33. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ModelConverter = {};

	ModelConverter.getConvertedModelWithBoundAndRenamedLabels = function(oControl, aEntityTypes, oControlAnalyzer) {
		var that = this;
		var oModel = oControl.getModel();
		return this._getModelConverter(oModel).then(function(oFieldSelectorModelConverter) {
			return that._getFieldModel(oControl, oFieldSelectorModelConverter, aEntityTypes, oControlAnalyzer);
		});
	};

	ModelConverter._getModelConverter = function(oModel) {
		var oMetaModel = oModel.getMetaModel();
		return oMetaModel.loaded().then(function() {
			return new FieldSelectorModelConverter(oModel);
		}, function(oReason) {
			jQuery.sap.log.error("MetadataModel could not be loaded", oReason);
		});
	};

	ModelConverter._getIgnoredFields = function(oControl) {
		
		if (oControl && oControl.getIgnoredFields) {
			var sCsvIgnoredFields = oControl.getIgnoredFields();
			if (sCsvIgnoredFields) {
				var aIgnoredFields = sCsvIgnoredFields.split(",");
				return aIgnoredFields;
			}
		}
		return [];
	};

	/**
	 * Generates the field model based on renamed labels, already bound and visible fields as well as complex types
	 * @param  {Array} aEntityTypes List of entity types
	 * @param  {sap.ui.core.Control} oControl Currently selected control
	 * @return {Array} List of Fields for the given entity type
	 * @private
	 */
	ModelConverter._getFieldModel = function(oControl, oFieldSelectorModelConverter, aEntityTypes, oControlAnalyzer) {
		var aIgnoredFields = this._getIgnoredFields(oControl);
		var oConvertedModel = oFieldSelectorModelConverter.getConvertedModel(aEntityTypes, aIgnoredFields);

		if (!oControlAnalyzer) {
			throw new Error("ModelConverter: no usable change controller instance found!");
		}

		var oVisibleAndBoundFields = oControlAnalyzer.findVisibleAndBoundFieldsAndLabelNames(oControl);

		var mVisibleAndBoundFields = oVisibleAndBoundFields.visibleAndBoundFields;
		var mFieldsAndLabelNames = oVisibleAndBoundFields.fieldsAndLabelNames;
		var mFieldsAndBoundPropertyName = oVisibleAndBoundFields.fieldsAndBoundPropertyName;
		var mBoundFieldsId = oVisibleAndBoundFields.boundFieldsId;
		var sEntityType;

		for (var z = 0; z < aEntityTypes.length; z++) {
			sEntityType = aEntityTypes[z];
			for (var i = 0; i < oConvertedModel[sEntityType].length; i++) {
				var oActModelEntity = oConvertedModel[sEntityType][i];
				var complexTypePropertyName = oFieldSelectorModelConverter.getMetaDataAnalyzer()
						._getNameOfPropertyUsingComplexType(sEntityType, oActModelEntity.entityName);
				if (mVisibleAndBoundFields[oActModelEntity.name]) {
					oActModelEntity.checked = true;
					
				}
				oActModelEntity.controlId = mBoundFieldsId[oActModelEntity.name];
				//Check for complexTypes
				if (complexTypePropertyName) {
					oActModelEntity.isComplexType = true;
					oActModelEntity.complexTypeName = complexTypePropertyName;

					if (mVisibleAndBoundFields[complexTypePropertyName + "/" + oActModelEntity.name]) {
						oActModelEntity.checked = true;
						oActModelEntity.controlId = mVisibleAndBoundFields[complexTypePropertyName + "/" + oActModelEntity.name];
					}
				}
				//Check for renamed labels
				var sFieldLabel;
				var sPath;

				if (oActModelEntity.isComplexType) {
					sPath = oActModelEntity.complexTypeName + "/" + oActModelEntity.name;
					sFieldLabel = mFieldsAndLabelNames[sPath];
					oActModelEntity.boundProperty = mFieldsAndBoundPropertyName[sPath];
				} else {
					sFieldLabel = mFieldsAndLabelNames[oActModelEntity.name];
					oActModelEntity.boundProperty = mFieldsAndBoundPropertyName[oActModelEntity.name];
				}
				if (sFieldLabel && sFieldLabel !== oActModelEntity["sap:label"]) {
					oActModelEntity.fieldLabel = sFieldLabel;
				}

			}
		}
		return oConvertedModel[sEntityType];
	};

	return ModelConverter;

}, /* bExport= */true);
}; // end of sap/ui/rta/ModelConverter.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.BaseCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.BaseCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/BaseCommand",['sap/ui/base/ManagedObject'], function(ManagedObject) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var BaseCommand = ManagedObject.extend("sap.ui.rta.command.BaseCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				element : {
					type : "sap.ui.core.Element"
				},
				elementId : {
					type : "string"
				},
				name : {
					type : "string"
				}
			},
			associations : {},
			events : {}
		}
	});

	BaseCommand.ERROR_UNKNOWN_ID = "no element for id: ";

	/**
	 * @protected will be called by the command factory when all data is provided to the change
	 */
	BaseCommand.prototype.prepareActionData = function() {
	};

	/**
	 * @protected Template Method to implement execute logic, with ensure precondition Element is available
	 */
	BaseCommand.prototype._executeWithElement = function(oElement) {
	};

	BaseCommand.prototype.execute = function() {
		this._withElement(this._executeWithElement.bind(this));
	};

	/**
	 * @protected Template Method to implement undo logic, with ensure precondition Element is available
	 */
	BaseCommand.prototype._undoWithElement = function(oElement) {
	};

	BaseCommand.prototype.undo = function() {
		this._withElement(this._undoWithElement.bind(this));
	};

	BaseCommand.prototype._withElement = function(fn) {
		var oElement = this._getElement();
		if (oElement) {
			fn(oElement);
		} else {
			jQuery.sap.log.error(this.getMetadata().getName(), BaseCommand.ERROR_UNKNOWN_ID + this.getElementId());
		}
	};

	BaseCommand.prototype.serialize = function() {
	};

	BaseCommand.prototype.isEnabled = function() {
		return true;
	};

	BaseCommand.deserialize = function(oChangeData) {
	};

	BaseCommand.prototype._getElement = function() {
		// Check if Element could be complete virtual property (always created by id)
		var oElement = this.getElement();
		if (!oElement) {
			oElement = sap.ui.getCore().byId(this.getElementId());
			this.setElement(oElement);
		}
		return oElement;
	};

	return BaseCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/BaseCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CompositeCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CompositeCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/CompositeCommand",['sap/ui/rta/command/BaseCommand'], function(BaseCommand) {
	"use strict";

	/**
	 * Composite command that can work on multiple simp
	 * 
	 * @class
	 * @extends sap.ui.rta.command.BaseCommand
	 * 
	 * @author SAP SE
	 * @version 1.44.4
	 * 
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CompositeCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CompositeCommand = BaseCommand.extend("sap.ui.rta.command.CompositeCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			aggregations : {
				commands : {
					type : "sap.ui.rta.command.BaseCommand",
					multiple : true
				}
			},
			events : {}
		}
	});

	CompositeCommand.prototype.execute = function() {
		this._forEachCommand(function(oCommand){
			oCommand.execute();
		});
	};
	
	CompositeCommand.prototype.undo = function() {
		this._forEachCommandInReverseOrder(function(oCommand){
			oCommand.undo();
		});
	};
	
	CompositeCommand.prototype._forEachCommand = function(fnDo) {
		var aCommands = this.getCommands();
		aCommands.forEach(fnDo, this);
	};
	
	CompositeCommand.prototype._forEachCommandInReverseOrder = function(fnDo) {
		var aCommands = this.getCommands();
		for (var i = aCommands.length - 1; i >= 0; i--) {
			fnDo.call(this, aCommands[i]);
			
		}
	};
	return CompositeCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CompositeCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.FlexCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.FlexCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/FlexCommand",['sap/ui/rta/command/BaseCommand', "sap/ui/fl/FlexControllerFactory",
		"sap/ui/fl/changeHandler/JsControlTreeModifier", "sap/ui/fl/Utils"], function(BaseCommand, FlexControllerFactory,
		JsControlTreeModifier, Utils) {
	"use strict";

	/**
	 * Basic implementation for the flexibility commands, that use a flex change handler.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.FlexCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var FlexCommand = BaseCommand.extend("sap.ui.rta.command.FlexCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeHandler : {
					type : "any"
				},
				changeType : {
					type : "string"
				}
			},
			associations : {},
			events : {}
		}
	});

	FlexCommand.FORWARD = true;
	FlexCommand.BACKWARD = false;

	FlexCommand.prototype.getPreparedActionData = function(bForward) {
		// if nothing is specified deliver the forward case
		bForward = (bForward === FlexCommand.FORWARD || bForward === FlexCommand.BACKWARD) ? bForward : true;
		if (bForward) {
			return this._forwardPreparedActionData;
		} else {
			return this._backwardPreparedActionData;
		}
	};

	FlexCommand.prototype.prepareActionData = function() {
		this._forwardPreparedActionData = this._getForwardActionData(this._getElement());
		this._backwardPreparedActionData = this._getBackwardActionData(this._getElement());
	};

	FlexCommand.prototype._executeWithElement = function(oElement) {
		var vChange = this._getForwardActionData(oElement);
		this._applyChange(vChange);
	};

	/**
	* @protected Template Method to build the forward change
	*/
	FlexCommand.prototype._getForwardActionData = function(oElement) {
		//TODO make it just return the change when all command are converted
		return {
			change : this._completeChangeContent({
				changeType : this.getChangeType(),
				selector : {
					id : this._getElement().getId()
				}
			}),
			selectorElement : this._getElement()
		};
	};

	/**
	* @protected Template Method to build the backward change
	*/
	FlexCommand.prototype._getBackwardActionData = function(oElement) {
		//TODO make it just return the change
	};

	FlexCommand.prototype._undoWithElement = function(oElement) {
		var oPreparedChange = this.getPreparedActionData(FlexCommand.BACKWARD);
		if (oPreparedChange) {
			this._applyChange(oPreparedChange);
		} else {
			jQuery.log.warning("Undo functionality not supported for element with id " + oElement.getId());
		}

	};

	FlexCommand.prototype._completeChangeContent = function(mSpecificChangeInfo) {
		var oControl = this.getElement().appComponent || this.getElement();
		var oFlexController = FlexControllerFactory.createForControl(oControl);
		return oFlexController.createChange(mSpecificChangeInfo, this.getElement());
	};

	FlexCommand.prototype._applyChange = function(vChange) {
		//TODO: remove the following compatibility code when concept is implemented
		var oChange = vChange.change || vChange;

		var oAppComponent = Utils.getAppComponentForControl(this.getElement());
		var oSelectorElement = JsControlTreeModifier.bySelector(oChange.getSelector(), oAppComponent);

		//TODO allow backward changes to have different change handler
		this.getChangeHandler().applyChange(oChange, oSelectorElement, {
			modifier: JsControlTreeModifier,
			appComponent : oAppComponent
		});
	};
	return FlexCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/FlexCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Hide') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Hide'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.HideControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Hide",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/HideControl"], function(FlexCommand,
		HideChangeHandler) {
	"use strict";

	/**
	 * Hide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Hide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Hide = FlexCommand.extend("sap.ui.rta.command.Hide", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "hideControl"
				}
			},
			associations : {},
			events : {}
		}
	});

	Hide.prototype.init = function() {
		this.setChangeHandler(HideChangeHandler);
	};

	Hide.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (UnhideControl), or better extend the PropertyChangeCommand
		// an set the property 'visible' to false?
		oElement.setVisible(true);
	};

	Hide.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			}
		};
	};

	return Hide;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Hide.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.HideForm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.HideForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.HideControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/HideForm",['sap/ui/rta/command/FlexCommand', 'sap/ui/rta/command/Hide', "sap/ui/fl/changeHandler/HideControl"], function(FlexCommand,
		HideCommand, HideChangeHandler) {
	"use strict";

	/**
	 * Hide SimpleForm Element or SimpleForm Container
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.40
	 * @alias sap.ui.rta.command.Hide
	 * @experimental Since 1.40. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var HideForm = HideCommand.extend("sap.ui.rta.command.HideForm", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				originalElement : {
					type : "object"
				},
				changeType : {
					type : "string",
					defaultValue : "hideControl"
				},
				groupId : {
					type : "string"
				},
				groupIndex : {
					type : "int"
				},
				nextGroupIndex : {
					type : "int",
					defaultValue : -1
				},
				fields : {
					type : "array"
				}
			},
			associations : {},
			events : {}
		}
	});

	HideForm.FORWARD = true;
	HideForm.BACKWARD = false;

	/**
	 * @override
	 */
	HideForm.prototype.init = function() {
	};

	/**
	 * @override
	 */
	HideForm.prototype._getSpecificChangeInfo = function(bForward) {

		var oElement = this.getElement();
		var oOriginalElement = this.getOriginalElement();
		var mSpecificInfo = {};

		mSpecificInfo.selector = {};
		mSpecificInfo.selector.id = oElement.getId();
		mSpecificInfo.changeType = this.getChangeType();
		mSpecificInfo.removedElement = {
			id : oOriginalElement.getId()
		};

		if (oOriginalElement instanceof sap.ui.core.Title) {
			this._setGroupInfo(oOriginalElement);
		}

		return mSpecificInfo;
	};

	/**
	 * @private
	 */
	HideForm.prototype._setGroupInfo = function(oTitleElement) {
		var that = this;
		var aContent = this.getElement().getContent();
		var aFields = [];
		aContent.some(function (oField, index) {
			if (oField === oTitleElement) {
				that.setGroupId(oTitleElement.getId());
				that.setGroupIndex(index);
			}
			if (that.getGroupIndex() < index) {
				if (oField instanceof sap.ui.core.Title) {
					that.setNextGroupIndex(index);
					return true;
				} else {
					if (oField.getVisible() === true) {
						aFields.push(oField);
					}
				}
			}
		});
		this.setFields(aFields);
	};

	/**
	 * @override
	 */
	HideForm.prototype._getFlexChange = function(bForward, oElement) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : oElement
		};
	};

	/**
	 * @override
	 */
	HideForm.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(HideForm.FORWARD, oElement);
	};

	/**
	 * @override
	 */
	HideForm.prototype._getBackwardActionData = function(oElement) {
		return this._getFlexChange(HideForm.BACKWARD, oElement);
	};

	/**
	 * @override
	 */
	HideForm.prototype._undoWithElement = function(oElement) {
		var oCtrl = this.getOriginalElement();
		var aContent = oElement.getContent();

		var iStart = -1;
		if (this.getChangeType() === "hideSimpleFormField") {
			aContent.some(function (oField, index) {
				if (oField === oCtrl) {
					iStart = index;
					oField.setVisible(true);
				}
				if (iStart >= 0 && index > iStart) {
					if ((oField instanceof sap.m.Label) || (oField instanceof sap.ui.core.Title)) {
						return true;
					} else {
						oField.setVisible(true);
					}
				}
			});
		} else if (this.getChangeType() === "removeSimpleFormGroup") {
			var oTitle = sap.ui.getCore().byId(this.getGroupId());
			this.getElement().insertContent(oTitle, this.getGroupIndex());
			if ((this.getGroupIndex() === 0) && (this.getNextGroupIndex() > 0)) {
				var oNextTitle = oElement.removeContent(1);
				oElement.insertContent(oNextTitle, this.getNextGroupIndex());
			}
			this.getFields().forEach(function(oField) {
				oField.setVisible(true);
			});

			this.setOriginalElement(oTitle);
		}

	};

	/**
	 * @override
	 */
	HideForm.prototype.serialize = function() {
		return this._getSpecificChangeInfo(HideForm.FORWARD);
	};

	return HideForm;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/HideForm.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Move') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Move'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Move",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand'], function(jQuery, FlexCommand) {
	"use strict";

	/**
	 * Move Element from one place to another
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Move
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Move = FlexCommand.extend("sap.ui.rta.command.Move", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				movedElements : {
					type : "array"
				},
				target : {
					type : "object"
				},
				source : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});

	Move.prototype._getSpecificChangeInfo = function(bForward) {

		var mSource = bForward ? this.getSource() : this.getTarget();
		var mTarget = bForward ? this.getTarget() : this.getSource();
		var oSourceParent = mSource.parent || sap.ui.getCore().byId(mSource.id);

		// replace elements by their id, unify format and help with serialization
		if (mSource.parent) {
			mSource.id = mSource.parent.getId();
			delete mSource.parent;
		}
		if (mTarget.parent) {
			mTarget.id = mTarget.parent.getId();
			delete mTarget.parent;
		}
		var mSpecificInfo = {
			changeType : this.getChangeType(),
			selector : {
				id : oSourceParent.getId()
			},
			source : mSource,
			target : mTarget,
			movedElements : []
		};

		this.getMovedElements().forEach(function(mMovedElement) {
			mSpecificInfo.movedElements.push({
				id : mMovedElement.id || mMovedElement.element.getId(),
				sourceIndex : bForward ? mMovedElement.sourceIndex : mMovedElement.targetIndex,
				targetIndex : bForward ? mMovedElement.targetIndex : mMovedElement.sourceIndex
			});
		});

		var ChangeHandler = this.getChangeHandler();

		return ChangeHandler.buildStableChangeInfo(mSpecificInfo);
	};

	Move.prototype._getFlexChange = function(bForward) {
		var oPreparedChange = this.getPreparedActionData(bForward);
		if (!oPreparedChange) {
			var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);
			oPreparedChange = this._completeChangeContent(mSpecificChangeInfo);
		}
		return oPreparedChange;
	};

	/**
	 * @override
	 */
	Move.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(FlexCommand.FORWARD);
	};

	/**
	 * @override
	 */
	Move.prototype._getBackwardActionData = function(oElement) {
		return this._getFlexChange(FlexCommand.BACKWARD);
	};

	/**
	 * @override
	 */
	Move.prototype.serialize = function() {
		return this._getSpecificChangeInfo(FlexCommand.FORWARD);
	};

	return Move;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Move.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Remove') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Remove'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Remove",['sap/ui/rta/command/FlexCommand'], function(FlexCommand) {
	"use strict";

	/**
	 * Remove a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.42
	 * @alias sap.ui.rta.command.Remove
	 * @experimental Since 1.42. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Remove = FlexCommand.extend("sap.ui.rta.command.Remove", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				removedElement : {
					type : "object"
				},
				removeMetadata : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});

	Remove.prototype._getSpecificChangeInfo = function() {
		var mSpecificInfo = {
			changeType : this.getChangeType(),
			removedElement : {
				id : this.getRemovedElement().getId()
			}
		};

		var ChangeHandler = this.getChangeHandler();

		return ChangeHandler.buildStableChangeInfo(mSpecificInfo);
	};

	Remove.prototype._getFlexChange = function() {
		var oPreparedChange = this.getPreparedActionData(FlexCommand.FORWARD);
		if (!oPreparedChange) {
			var mSpecificChangeInfo = this._getSpecificChangeInfo();
			oPreparedChange = this._completeChangeContent(mSpecificChangeInfo);
		}
		return oPreparedChange;
	};

	/**
	 * @override
	 */
	Remove.prototype.undo = function() {
		var oState = this.getPreparedActionData(FlexCommand.BACKWARD);
		var fnRestoreState = this.getRemoveMetadata().restoreState;
		if (fnRestoreState) {
			fnRestoreState.call(this.getElement(), this.getRemovedElement(), oState);
		} else {
			jQuery.sap.log.error("No restoreState implementation found for remove action ", this.getElement().getMetadata().getName() + ".designtime");
		}
	};

	/**
	 * @override
	 */
	Remove.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange();
	};

	/**
	 * @override
	 */
	Remove.prototype._getBackwardActionData = function(oElement) {
		var fnGetState = this.getRemoveMetadata().getState;
		if (fnGetState) {
			return fnGetState.call(this.getElement(), this.getRemovedElement());
		} else {
			jQuery.sap.log.error("No getState implementation found for remove action ", this.getElement().getMetadata().getName() + ".designtime");
		}
	};

	/**
	 * @override
	 */
	Remove.prototype.serialize = function() {
		return this._getSpecificChangeInfo(FlexCommand.FORWARD);
	};

	return Remove;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Remove.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Rename') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Rename'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.flexibility.changes.RenameGroup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.flexibility.changes.RenameField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Change'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Rename",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand', 'sap/ui/comp/smartform/flexibility/changes/RenameGroup',
		'sap/ui/comp/smartform/flexibility/changes/RenameField', 'sap/ui/fl/Change'], function(jQuery, FlexCommand,
		RenameGroupChangeHandler, RenameFieldChangeHandler, Change) {
	"use strict";

	/**
	 * Rename Element from one place to another
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Rename
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Rename = FlexCommand.extend("sap.ui.rta.command.Rename", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				renamedElement : {
					type : "object"
				},
				newValue : {
					type : "string",
					defaultValue : "new text"
				},
				oldValue : {
					type : "string",
					defaultValue : undefined
				},
				renameMetadata : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});

	Rename.prototype._getSpecificChangeInfo = function(bForward) {

		var mSpecificInfo = {
				changeType : this.getChangeType(),
				selector : {
					id : this.getElement().getId()
				},
				renamedElement : {
					id : this.getRenamedElement().getId()
				},
				value : bForward ? this.getNewValue() : this.getOldValue()
		};

		return mSpecificInfo;
	};

	Rename.prototype._getFlexChange = function(bForward) {
		var oPreparedActionData = this.getPreparedActionData(bForward);
		if (!oPreparedActionData) {
			var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);
			oPreparedActionData = this._completeChangeContent(mSpecificChangeInfo);
		}
		return oPreparedActionData;
	};

	/**
	 * @override
	 */
	Rename.prototype.undo = function() {
		var oState = this.getPreparedActionData(FlexCommand.BACKWARD);
		var fnRestoreState = this.getRenameMetadata().restoreState;
		if (fnRestoreState) {
			fnRestoreState.call(null, this.getRenamedElement(), oState);
		} else {
			jQuery.sap.log.error("No restoreState implementation found for rename action ", this.getRenamedElement().getMetadata().getName() + ".designtime");
		}
	};

	/**
	 * @override
	 */
	Rename.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(FlexCommand.FORWARD, oElement);
	};

	/**
	 * @override
	 */
	Rename.prototype._getBackwardActionData = function(oElement) {
		var fnGetState = this.getRenameMetadata().getState;
		if (fnGetState) {
			return fnGetState.call(null, this.getRenamedElement());
		} else {
			jQuery.sap.log.error("No getState implementation found for rename action ", this.getRenamedElement().getMetadata().getName() + ".designtime");
		}
	};

	/**
	 * @override
	 */
	Rename.prototype.serialize = function() {
		return this._getSpecificChangeInfo(FlexCommand.FORWARD, this._getElement());
	};

	return Rename;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Rename.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Reveal') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Reveal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Reveal",['sap/ui/rta/command/FlexCommand'], function(FlexCommand) {
	"use strict";

	/**
	 * Reveal controls by setting visible to true or unstash them
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.command.Reveal
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Reveal = FlexCommand.extend("sap.ui.rta.command.Reveal", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				revealedElementId : {
					type : "string"
				},
				hiddenParent : "object"
			}
		}
	});

	Reveal.prototype._getSpecificChangeInfo = function() {
		var mSpecificChangeInfo = {
			changeType : this.getChangeType()
		};
		if (this.getRevealedElementId()) {
			mSpecificChangeInfo.revealedElementId = this.getRevealedElementId();
		}
		return mSpecificChangeInfo;

	};

	/**
	 * @override
	 */
	Reveal.prototype._getFlexChange = function(oElement) {
		var oPreparedChange = this.getPreparedActionData();
		if (!oPreparedChange) {
			var mSpecificChangeInfo = this._getSpecificChangeInfo();
			var oRevealedElement = sap.ui.getCore().byId(this.getRevealedElementId());
			var oChange = this._completeChangeContent(mSpecificChangeInfo);
			oPreparedChange = {
				change : oChange,
				selectorElement : oRevealedElement
			};
		}
		return oPreparedChange;
	};

	/**
	 * @override
	 */
	Reveal.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(oElement);
	};

	return Reveal;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Reveal.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Settings') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Settings'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Settings",['sap/ui/rta/command/FlexCommand'], function(FlexCommand) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Settings = FlexCommand.extend("sap.ui.rta.command.Settings", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				content : {
					type : "any"
				}
			},
			associations : {},
			events : {}
		}
	});


	Settings.FORWARD = true;
	Settings.BACKWARD = false;

	Settings.prototype._getSpecificChangeInfo = function(bForward) {

		var mSpecificInfo = {
				changeType : this.getChangeType(),
				content : this.getContent()
		};

		return mSpecificInfo;
	};

	Settings.prototype._getFlexChange = function(bForward) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	Settings.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(Settings.FORWARD);
	};

	/**
	 * @override
	 */
	Settings.prototype._getBackwardActionData = function(oElement) {
		return this._getFlexChange(Settings.BACKWARD);
	};

	/**
	 * @override
	 */
	Settings.prototype.serialize = function() {
		return this._getSpecificChangeInfo(Settings.FORWARD);
	};

	/**
	 * @override
	 */
	Settings.prototype.execute = function() {
		if (this.getElement().getMetadata) {
			FlexCommand.prototype.execute.apply(this, arguments);
		}
	};

	/**
	 * @override
	 */
	Settings.prototype.undo = function() {
		if (this.getElement().getMetadata) {
			FlexCommand.prototype.undo.apply(this, arguments);
		}
	};

	return Settings;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Settings.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Stack') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Stack'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Stack",['sap/ui/base/ManagedObject'], function(ManagedObject) {
	"use strict";

	/**
	 * Basic implementation for the command stack pattern.
	 * 
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Stack
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Stack = ManagedObject.extend("sap.ui.rta.command.Stack", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			aggregations : {
				commands : {
					type : "sap.ui.rta.command.BaseCommand",
					multiple : true
				}
			},
			events : {
				modified : {}
			}
		}
	});

	Stack.prototype._toBeExecuted = -1;

	Stack.prototype._getCommandToBeExecuted = function() {
		return this.getCommands()[this._toBeExecuted];
	};

	/**
	 * Allows to push a command on the stack that has already been executed and shouldn't be executed next
	 */
	Stack.prototype.pushExecutedCommand = function(oCommand) {
		this.push(oCommand, true);
	};

	Stack.prototype.push = function(oCommand, bExecuted) {
		// undone commands have to be removed as a new command is added
		if (this._bUndoneCommands) {
			this._bUndoneCommands = false; // distinguish undone commands from not yet executed commands
			while (this._toBeExecuted > -1) {
				this.pop();
			}
		}
		this.insertCommand(oCommand, 0);
		if (!bExecuted) {
			this._toBeExecuted++;
		}
		this.fireModified();
	};

	Stack.prototype.top = function() {
		return this.getCommands()[0];
	};

	Stack.prototype.pop = function() {
		if (this._toBeExecuted > -1) {
			this._toBeExecuted--;
		}
		return this.removeCommand(0);
	};

	Stack.prototype.removeCommand = function(vObject, bSuppressInvalidate) {
		var oRemovedCommand = this.removeAggregation("commands", vObject, bSuppressInvalidate);
		this.fireModified();
		return oRemovedCommand;
	};

	Stack.prototype.removeAllCommands = function(bSuppressInvalidate) {
		var aCommands = this.removeAllAggregation("commands", bSuppressInvalidate);
		this._toBeExecuted = -1;
		this.fireModified();
		return aCommands;
	};

	Stack.prototype.isEmpty = function() {
		return this.getCommands().length === 0;
	};

	Stack.prototype.execute = function() {
		var oCommand = this._getCommandToBeExecuted();
		if (oCommand) {
			try {
				oCommand.execute();
			} catch (oError) {
				this.pop(); // remove failing command
				throw (oError);
			}
			this._toBeExecuted--;
			this.fireModified();
		}
	};

	Stack.prototype._unExecute = function() {
		if (this.canUndo()) {
			this._bUndoneCommands = true;
			this._toBeExecuted++;
			var oCommand = this._getCommandToBeExecuted();
			if (oCommand) {
				oCommand.undo();

				this.fireModified();
			}
		}
	};

	Stack.prototype.canUndo = function() {
		return (this._toBeExecuted + 1) < this.getCommands().length;
	};

	Stack.prototype.undo = function() {
		this._unExecute();
	};

	Stack.prototype.canRedo = function() {
		return !!this._getCommandToBeExecuted();
	};

	Stack.prototype.redo = function() {
		this.execute();
	};

	Stack.prototype.pushAndExecute = function(oCommand) {
		this.push(oCommand);
		this.execute();
	};

	Stack.prototype.serialize = function() {
		var aResult = [];
		var aCommands = this.getSerializableCommands();
		aCommands.forEach(function(oCommand) {
			var vSerialize = oCommand.serialize();
			if (Array.isArray(vSerialize)) {
				aResult.concat(vSerialize);
			} else {
				aResult.push(vSerialize);
			}
		});
		return aResult;
	};

	Stack.prototype.getSerializableCommands = function() {
		var aSerializableCommands = [];
		var aCommands = this.getCommands();
		for (var i = aCommands.length - 1; i > this._toBeExecuted; i--) {
			var aSubCommands = this._getSubCommands(aCommands[i]);
			aSerializableCommands = aSerializableCommands.concat(aSubCommands);
		}
		return aSerializableCommands;
	};

	Stack.prototype._getSubCommands = function(oCommand) {
		var that = this;
		var aCommands = [];
		if (oCommand.getCommands) {
			oCommand.getCommands().forEach(function(oSubCommand) {
				var aSubCommands = that._getSubCommands(oSubCommand);
				aCommands = aCommands.concat(aSubCommands);
			});
		} else {
			aCommands.push(oCommand);
		}
		return aCommands;
	};

	return Stack;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Stack.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Stash') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Stash'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.StashControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Stash",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/StashControl"], function(FlexCommand,
		StashChangeHandler) {
	"use strict";

	/**
	 * Stash a control/element
	 * 
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.rta.command.Stash
	 * @experimental Since 1.38. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Stash = FlexCommand.extend("sap.ui.rta.command.Stash", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "stashControl"
				}
			},
			associations : {},
			events : {}
		}
	});

	Stash.prototype.init = function() {
		this.setChangeHandler(StashChangeHandler);
	};

	Stash.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (UnstashControl), or better extend the PropertyChangeCommand
		// an set the property 'stashed' to false?
		oElement = sap.ui.getCore().byId(oElement.getId());
		this.setElement(oElement);
		oElement.setStashed(false);
		oElement.setVisible(true);
	};

	Stash.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			}
		};
	};

	return Stash;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Stash.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Unhide') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Unhide'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.UnhideControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Unhide",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/UnhideControl"], function(FlexCommand,
		UnhideChangeHandler) {
	"use strict";

	/**
	 * Unhide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Unhide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Unhide = FlexCommand.extend("sap.ui.rta.command.Unhide", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "unhideControl"
				}
			},
			associations : {},
			events : {}
		}
	});

	Unhide.prototype.init = function() {
		this.setChangeHandler(UnhideChangeHandler);
	};

	Unhide.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (hideControl), or better extend the PropertyChangeCommand
		// an set the property 'visible' to false?
		oElement.setVisible(false);
	};

	Unhide.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			}
		};
	};

	return Unhide;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Unhide.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.UnhideForm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.UnhideForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.UnhideControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/UnhideForm",['sap/ui/rta/command/FlexCommand', 'sap/ui/rta/command/Unhide', "sap/ui/fl/changeHandler/UnhideControl"], function(FlexCommand,
		UnhideCommand, UnhideChangeHandler) {
	"use strict";

	/**
	 * Unhide SimpleForm Element or SimpleForm Container
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Unhide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var UnhideForm = UnhideCommand.extend("sap.ui.rta.command.UnhideForm", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				originalElement : {
					type : "object"
				},
				changeType : {
					type : "string",
					defaultValue : "unhideControl"
				}
			},
			associations : {},
			events : {}
		}
	});

	UnhideForm.FORWARD = true;
	UnhideForm.BACKWARD = false;

	/**
	 * @override
	 */
	UnhideForm.prototype.init = function() {
	};

	/**
	 * @override
	 */
	UnhideForm.prototype._getSpecificChangeInfo = function(bForward) {

		var oElement = this.getElement();
		var mSpecificInfo = {};

		mSpecificInfo.selector = {};
		mSpecificInfo.selector.id = oElement.getId();
		mSpecificInfo.changeType = this.getChangeType();
		mSpecificInfo.sUnhideId = this.getOriginalElement().getId();

		return mSpecificInfo;
	};

	/**
	 * @override
	 */
	UnhideForm.prototype._getFlexChange = function(bForward, oElement) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : oElement
		};
	};

	/**
	 * @override
	 */
	UnhideForm.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(UnhideForm.FORWARD, oElement);
	};

	/**
	 * @override
	 */
	UnhideForm.prototype._getBackwardActionData = function(oElement) {
		return this._getFlexChange(UnhideForm.BACKWARD, oElement);
	};

	/**
	 * @override
	 */
	UnhideForm.prototype._undoWithElement = function(oElement) {
		var oCtrl = this.getOriginalElement();
		var aContent = oElement.getContent();

		if (this.getChangeType() === "unhideSimpleFormField") {
			var iStart = -1;
			aContent.some(function (oField, index) {
				if (oField === oCtrl) {
					iStart = index;
					oField.setVisible(false);
				}
				if (iStart >= 0 && index > iStart) {
					if ((oField instanceof sap.m.Label) || (oField instanceof sap.ui.core.Title)) {
						return true;
					} else {
						oField.setVisible(false);
					}
				}
			});
		}

	};

	/**
	 * @override
	 */
	UnhideForm.prototype.serialize = function() {
		return this._getSpecificChangeInfo(UnhideForm.FORWARD);
	};

	return UnhideForm;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/UnhideForm.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Unstash') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Unstash'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.UnstashControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Unstash",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/UnstashControl"], function(FlexCommand,
		UnstashChangeHandler) {
	"use strict";

	/**
	 * Unstash a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.rta.command.Unstash
	 * @experimental Since 1.38. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Unstash = FlexCommand.extend("sap.ui.rta.command.Unstash", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "unstashControl"
				},
				parentAggregationName : {
					type : "string",
					defaultValue : ""
				},
				index : {
					type : "int",
					defaultValue : 0
				}
			},
			associations : {},
			events : {}
		}
	});

	Unstash.prototype.init = function() {
		this.setChangeHandler(UnstashChangeHandler);
	};

	/**
	 * @override
	 */
	 Unstash.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(FlexCommand.FORWARD);
	};

	/**
	 * @override
	 */
	Unstash.prototype._getBackwardActionData = function(oElement) {
		return this._getFlexChange(FlexCommand.BACKWARD);
	};

	Unstash.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (StashControl), or better extend the PropertyChangeCommand
		// an set the property 'stashed' to true?
		oElement = sap.ui.getCore().byId(oElement.getId());
		this.setElement(oElement);
		oElement.setStashed(true);
		oElement.setVisible(false);
	};

	Unstash.prototype._getFlexChange = function(bForward) {
		return this._completeChangeContent({
			content : {
				parentAggregationName : this.getParentAggregationName(),
				index : this.getIndex()
			},
			changeType : this.getChangeType(),
			selectorElement : this._getElement(),
			selector : {
				id : this._getElement().getId()
			}
		});
	};

	Unstash.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			},
			content : {
				parentAggregationName : this.getParentAggregationName(),
				index : this.getIndex()
			}
		};
	};

	return Unstash;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Unstash.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.Base') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.Base'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/Base",['sap/ui/base/ManagedObject', 'sap/ui/dt/ElementUtil', 'sap/ui/fl/Utils'], function(ManagedObject, ElementUtil, FlexUtils) {
	"use strict";

	var aEDITABLE_TYPES = ["sap.ui.comp.smartform.SmartForm", "sap.ui.comp.smartform.Group",
			"sap.ui.comp.smartform.GroupElement", "sap.uxap.ObjectPageSection", "sap.uxap.ObjectPageLayout"];

	if (FlexUtils.isVendorLayer()) {
		aEDITABLE_TYPES = aEDITABLE_TYPES.concat(["sap.ui.comp.smartfilterbar.SmartFilterBar",
				"sap.ui.comp.smarttable.SmartTable", "sap.uxap.ObjectPageHeader",
				"sap.uxap.ObjectPageHeaderActionButton", "sap.ui.table.Column"]);
	}

	/**
	 * Abstract class for controlAnalyzer Do not instantiate this class directly! Instead use the ControlAnalyzerFactory.
	 *
	 * @class Context - controller for flexibility changes
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.32
	 * @alias sap.ui.rta.controlAnalyzer.Base
	 * @experimental Since 1.32. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */

	var Base = ManagedObject.extend("sap.ui.rta.controlAnalyzer.Base", {
		constructor : function() {
			sap.ui.base.ManagedObject.prototype.constructor.apply(this, arguments);
			this._mAvailableElements = {};
			this._mHiddenElements = {};
		},
		metadata : {
			library : "sap.ui.rta",
			properties : {
				control : "sap.ui.core.Control",
				selectedControl : "sap.ui.core.Control",
				prepared : {
					type : "boolean",
					defaultValue : false
				}
			}
		}
	});

	Base.prototype._raiseIllegalState = function() {
		jQuery.sap.log.error("Illegal state, analyzer is not prepared");
	};

	Base.prototype.prepare = function() {
		this.setPrepared(true);
	};

	Base.prototype.getAvailableElements = function() {
		if (!this.getPrepared()) {
			this._raiseIllegalState();
		}
		return this._mAvailableElements;
	};

	Base.prototype.getHiddenElements = function() {
		if (!this.getPrepared()) {
			this._raiseIllegalState();
		}
		return this._mHiddenElements;
	};

	/**
	 * Adjust/translate change specific data from the generic format to a specific format of a special change handler
	 *
	 * @param {string}
	 *          sType the command type
	 * @param {object}
	 *          mSpecificChangeData
	 * @return {object} the adjusted/translated change specific data
	 */
	Base.prototype.mapSpecificChangeData = function(sType, mSpecificChangeData) {
		return mSpecificChangeData;
	};
	/**
	 * Calculate repository fields based on model and displayed data
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Currently selected control
	 * @private
	 */
	Base.prototype.getControlsFieldCollection = function(oControl) {
	};

	/*
	 * Creates an array of change data to be passed to FlexController @param {Object} oControl The currently checked or
	 * unchecked object containing the binding information @return {Array} aChangeData @private
	 */
	Base.prototype.createChangeData = function(oControl, oCurrentSelectedBlock, bHideControl) {
		return null;
	};

	/**
	 * TODO: to be deleted when ModelConverter will be removed
	 * Finds already bound and visible fields and saves the current label value
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Currently selected control
	 * @return {Object} visibleAndBoundFields: Lists of visible and bound fields, fieldsAndLabelNames: visible and
	 *         LabelValue fields
	 * @private
	 */
	Base.prototype.findVisibleAndBoundFieldsAndLabelNames = function(oControl) {
	};

	/**
	 * Checks if a custom field is available
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Currently selected control
	 * @return {Promise} true if custom fields are available, else false
	 * @private
	 */
	Base.prototype.isCustomFieldAvailable = function(oControl) {
		return Promise.resolve().then(function() {
			return false;
		});
	};

	/**
	 * Checks if a given aggregation in parent element is a valid target zone for moved element
	 *
	 * @param {sap.ui.core.Element}
	 *          oParentElement to validate as a valid parent
	 * @param {string}
	 *          sAggregationName in parent element to validate
	 * @param {sap.ui.core.Element}
	 *          oMovedElement element which is move
	 * @return {boolean} true if valid target zone
	 */
	Base.prototype.checkTargetZone = function(oParentElement, sAggregationName, oMovedElement) {
		return true;
	};

	Base.prototype.getFlexChangeType = function(sType, oElement, mSettings) {
		return null;
	};

	Base.prototype.getCommandClass = function(sCommand) {
		var sCommandClass;
		switch (sCommand) {
			case "rename" :
				sCommandClass = 'sap.ui.rta.command.Rename';
				break;
			case "hide" :
				sCommandClass = 'sap.ui.rta.command.Hide';
				break;
			case "unhide" :
				sCommandClass = 'sap.ui.rta.command.Unhide';
				break;
			case "add" :
				sCommandClass = 'sap.ui.rta.command.AddSmart';
				break;
			default :
				break;
		}
		return sCommandClass;
	};

	Base.prototype.getConfiguredElement = function(mElement, oContextElement) {
		// default is the parent control inside which the change happens
		var oContext = mElement.context ? mElement.context : mElement;
		return oContext;
	};

	/**
	 * @private
	 */
	Base.prototype.isMandatory = function(oElement) {
		return false;
	};

	/**
	 * @private
	 */
	Base.prototype.isHideable = function(oElement) {
		return false;
	};

	/**
	 * @private
	 */
	Base.prototype.isRenamable = function(oElement) {
		return this.isEditable(oElement) && this.getRenamableControl(oElement);
	};

	/**
	 * @private
	 */
	Base.prototype.getRenamableControl = function(oElement) {
		return null;
	};

	return Base;

}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/Base.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.rta.
 */
jQuery.sap.declare('sap.ui.rta.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/library",['jquery.sap.global', 'sap/ui/core/Core', 'sap/ui/core/library'],
	function(jQuery, Core, coreLibrary) {
	"use strict";

	/**
	 * SAPUI5 library with RTA controls.
	 *
	 * @namespace
	 * @name sap.ui.rta
	 * @public
	 */
	
	
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.rta",
		version: "1.44.4",
		dependencies : ["sap.ui.core","sap.m", "sap.ui.fl"],
		types: [
		],
		interfaces: [],
		controls: [
		    "sap.ui.rta.ContextMenu",
		    "sap.ui.rta.ui.ToolsMenu",
		    "sap.ui.rta.AddElementsDialog"
		],
		elements: [
		]
	});
		
	return sap.ui.rta;	

}, /* bExport= */ true);
}; // end of sap/ui/rta/library.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.model.ElementPreprocessor') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.model.ElementPreprocessor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/model/ElementPreprocessor",['jquery.sap.global'], function(jQuery) {
	"use strict";

	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 *
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel}
	 *          oDataModel - odata model
	 * @public
	 * @author Markus Viol
	 */
	var ElementPreprocessor = function(oMetadataAnalyzer) {
		this._oMetadataAnalyzer = oMetadataAnalyzer;
		this._aEntityTypes = [];
		//map with invisibleFields per entity type
		this.invisibleFields = {};
	};

	/**
	 * Enriches the fields with additional information: complex type paths, ignored,
	 * usually called by more specific methods
	 * @param {array}
	 *          aFields - fields array
	 * @param {Array}
	 *          aIgnoredFields - List of fields which should be ignored.
	 * @param {Boolean}
	 *          bIsComplexType Set to true if fields are children of a complex type
	 * @returns {array} - object of fields which are visible *
	 * @private
	 * @name ElementPreprocessor#_updateAndFilterFields
	 * @function
	 */
	ElementPreprocessor.prototype._updateAndFilterFields = function(aFields, aIgnoredFields, bIsComplexType, sKey) {

		var aValidFields = [];
		for (var f = 0; f < aFields.length; f++) {
			var oCurrentField = aFields[f];
			if (oCurrentField.visible === false) {
				this.invisibleFields[sKey] = this.invisibleFields[sKey] || [];
				if (this.invisibleFields[sKey].indexOf(oCurrentField) === -1) {
					oCurrentField.isComplexType = bIsComplexType;
					this.invisibleFields[sKey].push(oCurrentField);
				}
				continue;
			}
			// TODO: check if the label is overridden in an annotation

			// only add fields which are not in ignored list
			var bIsFieldOnIgnoreList = this._isFieldOnIgnoreList(oCurrentField, aIgnoredFields, bIsComplexType);
			var bIsFieldBlacklisted = this._isFieldBlacklisted(oCurrentField);
			if (!bIsFieldOnIgnoreList && !bIsFieldBlacklisted) {
				if (this._isComplexType(oCurrentField) === true) {
					var aValidComplexTypeFields = this._resolveComplexTypeToFlatFieldList(oCurrentField, aIgnoredFields);
					if (aValidComplexTypeFields) {
						aValidFields = aValidFields.concat(aValidComplexTypeFields);
					}
				} else {
					aValidFields.push(oCurrentField);
				}
			}
		}
		return aValidFields;
	};

	/**
	 * Is field using a complex type
	 *
	 * @param {Object}
	 *          oField Field from entityType
	 * @returns {Boolean} Returns true if field is using a complex type
	 */
	ElementPreprocessor.prototype._isComplexType = function(oField) {
		if (oField && oField.type) {
			if (oField.type.toLowerCase().indexOf("edm") !== 0) {
				return true;
			}
		}
		return false;
	};

	/**
	 * COPIED
	 * Check if odata property matches specific checks which identify the field as non-listable
	 *
	 * @param {object}
	 *          oCurrentField Current property of entity set
	 * @returns {Boolean} Returns true if field is blacklisted and false if field can be added to list.
	 */
	ElementPreprocessor.prototype._isFieldBlacklisted = function(oCurrentField) {
		if (oCurrentField) {
			if (oCurrentField.name.toLowerCase().indexOf("uxfc") === 0) {
				return true;
			} else if (oCurrentField.type.toLowerCase() === "edm.time") {
				return true;
			}
		}
		return false;
	};
	/**
	 * Resolves a field from the entity type which is using a complex type into the underlying fields
	 *
	 * @param {Object}
	 *          oComplexTypeField Field from entity type which is using the complex type
	 * @param {Array}
	 *          aIgnoredFields Fields which should be ignored
	 * @returns {Array} Returns an array with all fields of the requested complex type
	 */
	ElementPreprocessor.prototype._resolveComplexTypeToFlatFieldList = function(oComplexTypeField, aIgnoredFields) {
		var aResult = [];
		var oSchemaDefinition = this._oMetadataAnalyzer.getSchemaDefinition();

		if (oComplexTypeField && oComplexTypeField.type && oSchemaDefinition) {
			var sTypeName = this._getComplexTypeName(oComplexTypeField);
			if (sTypeName) {
				var aComplexTypes = oSchemaDefinition.complexType;
				var i = 0;
				for (i = 0; i < aComplexTypes.length; i++) {
					var oCurrentComplexType = aComplexTypes[i];
					oCurrentComplexType["complexTypePropertyName"] = oComplexTypeField.name;
					oCurrentComplexType.entityName = oComplexTypeField.entityName;
					if (oCurrentComplexType.name === sTypeName) {
						aResult = this._getFieldsFromComplexType(oCurrentComplexType, aIgnoredFields);
						break;
					}
				}
			}
		}
		return aResult;
	};

	/**
	 * Enriches the fields of the current complext type with the type paths
	 *
	 * @param {Object}
	 *          oComplexType
	 * @param {Array}
	 *          aIgnoredFields Fields which should be ignored
	 * @returns Returns an array with fields from the complex type
	 */
	ElementPreprocessor.prototype._getFieldsFromComplexType = function(oComplexType, aIgnoredFields) {
		var aFields = this._oMetadataAnalyzer.getFieldsByComplexTypeName(oComplexType.name);
		if (aFields) {
			for (var i = 0; i < aFields.length; i++) {
				aFields[i]["isComplexProperty"] = true;
				// Within a complex type property we want the original entity type name of the reference parent entity type
				aFields[i]["entityName"] = oComplexType.entityName;
				aFields[i]["complexTypePropertyName"] = oComplexType.complexTypePropertyName;
			}
			return this._updateAndFilterFields(aFields, aIgnoredFields, true, oComplexType.name);
		}
		return [];
	};

	/**
	 * Get the name of a complex type without the namespace
	 *
	 * @param {Object}
	 *          oComplexType
	 * @returns Returns the name of the complex type without its namespace
	 */
	ElementPreprocessor.prototype._getComplexTypeName = function(oComplexType) {
		var aTypeDescription = oComplexType.type.split(".");
		if (aTypeDescription.length === 2) {
			return aTypeDescription[1];
		}
		return null;
	};

	/**
	 * Check if a odata property is on the list of ignored fields
	 *
	 * @param {Object}
	 *          oCurrentField Current property on entityset
	 * @param {Array}
	 *          aIgnoredFields List of ignored fields
	 * @param {Boolean}
	 *          bIsComplexType Set to true if fields are children of a complex type
	 * @returns {Boolean} Returns true if field was found on ignore list else false
	 */
	ElementPreprocessor.prototype._isFieldOnIgnoreList = function(oCurrentField, aIgnoredFields, bIsComplexType) {
		if (aIgnoredFields) {
			var numberOfEntitySets = this._aEntityTypes.length;
			var sQualifiedName = oCurrentField.entityName + "." + oCurrentField.name;
			// If number of entity sets is only one or fields are NOT children of a complex type,
			// then full qualified name or shortname is possible
			if (numberOfEntitySets === 1 && !bIsComplexType) {
				if (aIgnoredFields.indexOf(oCurrentField.name) !== -1 || aIgnoredFields.indexOf(sQualifiedName) !== -1) {
					return true;
				}
				// else only full qualified name is valid
			} else if (aIgnoredFields.indexOf(sQualifiedName) !== -1) {
				return true;
			}
		}
		return false;
	};

	/**
	 * @param {string/array}
	 *          vEntityTypes - entity types
	 * @param {string}
	 *          sAnnotation - annotation
	 * @returns {array} - object of label and EntityType name of the entitySet
	 * @private
	 * @name ElementPreprocessor#_getEntitySets
	 * @function
	 */
	ElementPreprocessor.prototype._getEntityTypes = function(vEntityTypes, sAnnotation) {

		var aEntityTypes = [];
		var sLabel;
		var aEntityTypeNames;

		if (!this._oMetadataAnalyzer || !this._oMetadataAnalyzer._oSchemaDefinition) {
			return [];
		}

		var aAllEntityTypList = this._oMetadataAnalyzer._oSchemaDefinition.entityType;
		// TODO:
		// if (sAnnotation) {
		// aEntityTypeNames = this._oMetadataAnalyzer.getEntityTypeNameByAnnotation(sAnnotation);
		// }
		if (!vEntityTypes) {
			aEntityTypeNames = [];
			for (var t = 0; t < aAllEntityTypList.length; t++) {
				aEntityTypeNames.push(aAllEntityTypList[t].name);
			}
		}
		if (!aEntityTypeNames) {
			aEntityTypeNames = this._convertEntityTypesToArray(vEntityTypes);
		}

		for (var e = 0; e < aEntityTypeNames.length; e++) {
			sLabel = this._oMetadataAnalyzer.getEntityLabelByEntityTypeName(aEntityTypeNames[e]);
			aEntityTypes.push({
				key : aEntityTypeNames[e],
				label : sLabel || aEntityTypeNames[e]
			});
		}

		return aEntityTypes;
	};

	/**
	 * @param {string/array}
	 *          vEntityTypes - entity types
	 * @returns {array} - entity types
	 * @private
	 * @name sap.ui.comp.odata.FieldSelector#_convertEntityTypesToArray
	 * @function
	 */
	ElementPreprocessor.prototype._convertEntityTypesToArray = function(vEntityTypes) {

		if (typeof (vEntityTypes) === "string") {
			var sRawString = vEntityTypes.replace(/ /g, '');
			return sRawString.split(',');
		}

		if (jQuery.isArray(vEntityTypes)) {
			return vEntityTypes;
		}

		return undefined;
	};

	/**
	 * Destroys the inner references
	 *
	 * @public
	 * @name sap.ui.comp.odata.FieldSelector#destroy
	 * @function
	 */
	ElementPreprocessor.prototype.destroy = function() {

		if (this._oMetadataAnalyzer && this._oMetadataAnalyzer.destroy) {
			this._oMetadataAnalyzer.destroy();
		}
		this._oMetadataAnalyzer = null;
		this._aEntityTypes = null;
	};

	return ElementPreprocessor;

}, /* bExport= */true);

}; // end of sap/ui/rta/model/ElementPreprocessor.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Settings') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Settings.
jQuery.sap.declare('sap.ui.rta.plugin.Settings'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Settings",[
	'sap/ui/dt/Plugin'
], function(Plugin) {
	"use strict";

	/**
	 * Constructor for a new Settings Plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Settings allows trigger change of settings operations on the overlay
	 * @extends sap.ui.dt.Plugin
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.plugin.Settings
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Settings = Plugin.extend("sap.ui.rta.plugin.Settings", /** @lends sap.ui.rta.plugin.Settings.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {
				commandStack : {
					type : "any"
				}
			},
			associations: {},
			events: {}
		}
	});

	Settings.prototype._getUnsavedChanges = function(sId, aChangeTypes) {
		var sElementId;

		var aUnsavedChanges = this.getCommandStack().getSerializableCommands().filter(function(oCommand) {
			sElementId = oCommand.getElement().id || oCommand.getElement().getId();
			if (sElementId === sId && aChangeTypes.indexOf(oCommand.getChangeType()) >= 0) {
				return true;
			}
		}).map(function(oCommand) {
			return oCommand.getPreparedActionData().change;
		});

		return aUnsavedChanges;
	};

	/**
	 * @private
	 */
	Settings.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @private
	 */
	Settings.prototype._getSettingsAction = function(oOverlay) {
		return this._getEffectiveDesignTimeMetadata(oOverlay).getAction("settings", oOverlay.getElementInstance());
	};

	/**
	 * Checks if settings is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Settings.prototype.isSettingsAvailable = function(oOverlay) {
		return !!this._getSettingsAction(oOverlay);
	};

	/**
	 * Checks if settings is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Settings.prototype.isSettingsEnabled = function(oOverlay) {
		var oAction = this._getSettingsAction(oOverlay);
		if (!oAction) {
			return false;
		}

		if (typeof oAction.isEnabled !== "undefined") {
			if (typeof oAction.isEnabled === "function") {
				return oAction.isEnabled(oOverlay.getElementInstance());
			} else {
				return oAction.isEnabled;
			}
		}
		return true;
	};


	Settings.prototype.handleSettings = function(aSelectedOverlays) {
		var oSettingsCommand;
		var oElement = aSelectedOverlays[0].getElementInstance();
		var that = this;

		return aSelectedOverlays[0].getDesignTimeMetadata().getAction("settings").handler(oElement, this._getUnsavedChanges.bind(this)).then(function(aChanges) {
			aChanges.forEach(function(mChange) {
				oSettingsCommand = that.getCommandFactory().getCommandFor(mChange.selectorControl, "settings", mChange.changeSpecificData);
				that.fireElementModified({
					"command" : oSettingsCommand
				});
			});
		})['catch'](function(oError) {
			if (oError) {
				throw oError;
			}
		});
	};

	return Settings;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Settings.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.ToolsMenu') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.rta.ToolsMenu.
jQuery.sap.declare('sap.ui.rta.ui.ToolsMenu'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/ToolsMenu",[
	'sap/ui/rta/library',
	'sap/ui/core/Control',
	'sap/m/Toolbar',
	'sap/m/ToolbarLayoutData',
	'sap/m/ToolbarSpacer',
	'sap/m/Label',
	'sap/ui/core/Popup',
	'sap/ui/fl/registry/Settings',
	'sap/ui/fl/Utils'
	],
	function(
		library,
		Control,
		Toolbar,
		ToolbarLayoutData,
		ToolbarSpacer,
		Label,
		Popup,
		FlexSettings,
		Utils) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.ToolsMenu control.
	 *
	 * @class
	 * Contains all the necessary Toolbars for the Runtime Authoring
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.ToolsMenu
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ToolsMenu = Control.extend("sap.ui.rta.ui.ToolsMenu", {
		metadata : {

			library : "sap.ui.rta",
			// ---- control specific ----
			aggregations : {
				"toolbars" : {
					type : "sap.m.Toolbar",
					multiple : true,
					singularName : "toolbar"
				}
			},
			events : {
				/**
				 * Events are fired when the Toolbar - Buttons are pressed
				 */
				"undo" : {},
				"redo" : {},
				"close" : {},
				"toolbarClose" : {},
				"restore": {},
				"transport" : {}
			}
		}

	});

	/**
	 * Initialization of the ToolsMenu Control
	 * @private
	 */
	ToolsMenu.prototype.init = function() {

		// Get messagebundle.properties for sap.ui.rta
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");

	};

	/**
	 * Create Toolbar
	 * @private
	 */
	ToolsMenu.prototype.createToolbar = function() {

		var sText = null;
		// calculate z-index dependent on opened popups
		var iZIndex = Popup.getNextZIndex();

		if (!this._oToolBar) {

			var oAdaptModeLabel = null;
			var oAppTitleLabel = null;
			var oButtonExit = null;
			var oSpacerTop = null;
			var oTop = null;

			// Label 'Adaptation Mode'
			sText = " - " + this._oRb.getText("TOOLBAR_TITLE");
			oAdaptModeLabel = new Label({
				text : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			oAdaptModeLabel.bAllowTextSelection = false;

			// Label 'Application Name'
			sText = null;
			oAppTitleLabel = new Label({
				text : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			oAppTitleLabel.bAllowTextSelection = false;

			// Button 'Undo'
			sText = this._oRb.getText("BTN_UNDO");
			this._oButtonUndo = new sap.m.Button({
				type:"Transparent",
				icon: "sap-icon://undo",
				enabled : false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonUndo.data("Action", "UNDO",true);
			this._oButtonUndo.attachEvent('press', this._onUndo, this);

			// Button 'Redo'
			sText = this._oRb.getText("BTN_REDO");
			this._oButtonRedo = new sap.m.Button({
				type:"Transparent",
				icon: "sap-icon://redo",
				iconFirst: false,
				enabled : false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonRedo.data("Action", "REDO",true);
			this._oButtonRedo.attachEvent('press', this._onRedo, this);

			// Button 'Restore'
			sText = this._oRb.getText("BTN_RESTORE");
			this._oButtonRestore = new sap.m.Button({
				type:"Transparent",
				text : sText,
				visible: true,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonRestore.data("Action", "RESTORE",true);
			this._oButtonRestore.attachEvent('press', this._onRestore, this);

			// Button 'Exit'
			sText = this._oRb.getText("BTN_EXIT");
			oButtonExit = new sap.m.Button({
				type:"Transparent",
				text : sText,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			oButtonExit.data("Action", "EXIT",true);
			oButtonExit.attachEvent('press', this.close, this);

			// Button 'Transport'
			sText = this._oRb.getText("BTN_TRANSPORT");
			this._oButtonTransport = new sap.m.Button({
				type:"Transparent",
				text : sText,
				visible : false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonTransport.data("Action", "TRANSPORT", true);
			this._oButtonTransport.attachEvent('press', this._onTransport, this);

			// Space between Toolbar Elements
			oSpacerTop = new ToolbarSpacer();

			//create Toolbar
			this._oToolBar = new Toolbar({
				active : true,
				content : [
				           oAppTitleLabel,
				           oAdaptModeLabel,
				           oSpacerTop,
				           this._oButtonUndo,
				           this._oButtonRedo,
				           this._oButtonRestore,
				           this._oButtonTransport,
				           oButtonExit
				           ]
			});

			this._oToolBar.addStyleClass("sapUiRTAToolBar");
			this.addToolbar(this._oToolBar);

			// Insert a DIV-Element for Top Toolbar in the DOM
			jQuery("body").prepend('<div id="RTA-Toolbar" style="z-index: ' + iZIndex + '"></div>');
			oTop = jQuery("#RTA-Toolbar").addClass("sapUiRTAToolsMenuWrapper");
			oTop = oTop[0];
			this.placeAt(oTop);
		}
	};

	/**
	 * Override the EXIT-Function
	 * @private
	 */
	ToolsMenu.prototype.exit = function() {
		// Remove the DOM-Element for the Toolbar
		jQuery("#RTA-Toolbar").remove();
	};

	/**
	 * Trigger transport
	 * @private
	 */
	ToolsMenu.prototype._onTransport = function() {
		this.fireTransport();
	};

	/**
	 * Check if the transports are available,
	 * transports are available in non-productive systems
	 * and no merge errors has occoured
	 * currently set's the visibility for Transport and Restore button
	 *
	 * @returns {Promise}
	 */
	ToolsMenu.prototype.checkTransportAvailable = function() {
		var that = this;
		return FlexSettings.getInstance(Utils.getComponentClassName(this._oRootControl)).then(function(oSettings) {
			if (!oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured()) {
				var bIsATOEnabled = oSettings.isAtoEnabled();
				that._oButtonTransport.setVisible(true);
				that.adaptTransportText(bIsATOEnabled);
				return bIsATOEnabled;
			}
		}).catch(function(){
			that._oButtonTransport.setVisible(false);
		});
	};

	/**
	 * Makes the Toolbar(s) visible
	 * @public
	 */
	ToolsMenu.prototype.show = function() {
		this._oToolBar.addStyleClass("sapUiRTAToolBarVisible");
		this._oToolBar.removeStyleClass("sapUiRTAToolBarInvisible");
	};

	/**
	 * Makes the TOP Toolbar invisible
	 * @public
	 */
	ToolsMenu.prototype.hide = function() {
		var that = this;

		return new Promise(function(resolve) {
			that._oToolBar.addStyleClass("sapUiRTAToolBarInvisible");
			var oToolBarDOM = document.getElementsByClassName("sapUiRTAToolBar")[0];
			var fnAnimationEnd = function() {
				resolve();
				that.fireClose();
			};
			// all types of CSS3 animationend events for different browsers
			oToolBarDOM.addEventListener("webkitAnimationEnd", fnAnimationEnd);
			oToolBarDOM.addEventListener("animationend", fnAnimationEnd);
			oToolBarDOM.addEventListener("oanimationend", fnAnimationEnd);
		});
	};

	/**
	 * Trigger undo
	 * @private
	 */
	ToolsMenu.prototype._onUndo = function() {

		this.fireUndo();
	};

	/**
	 * Trigger redo
	 * @private
	 */
	ToolsMenu.prototype._onRedo = function() {

		this.fireRedo();
	};

	/**
	 * Discard all the LREP changes and restore the default app state
	 * @private
	 */
	ToolsMenu.prototype._onRestore = function() {

		this.fireRestore();
	};

	/**
	 * Closing the ToolsMenu
	 * @public
	 */
	ToolsMenu.prototype.close = function() {

		this.fireToolbarClose();

	};

	/**
	 * Set the Application Title
	 * @param {string} sTitle Application Title
	 * @public
	 */
	// Method for setting the Application Title
	ToolsMenu.prototype.setTitle = function(sTitle) {
		var oLabel = this._oToolBar.getContent()[0];
		oLabel.setText(sTitle);
	};

	/**
	 * Set the root control
	 * @param {sap.ui.core.Control} oControl - SAPUI5 control
	 * @public
	 */
	ToolsMenu.prototype.setRootControl = function(oControl) {
		this._oRootControl = oControl;
	};

	/**
	 * Adapt the text of the Transport - Button
	 * depending on ATO enabled Setting
	 * @private
	 */
	ToolsMenu.prototype.adaptTransportText = function(bATOEnabled) {
		var sText = null;
		if (bATOEnabled) {
			sText = this._oRb.getText("BTN_PUBLISH");
		} else {
			sText = this._oRb.getText("BTN_TRANSPORT");
		}
		this._oButtonTransport.setText(sText);
		this._oButtonTransport.setTooltip(sText);
	};

	/**
	 * Adapt the enablement of the und/redo buttons in the ToolsMenu
	 */
	ToolsMenu.prototype.adaptUndoRedoEnablement = function(bCanUndo,bCanRedo) {
		this._oButtonUndo.setEnabled(bCanUndo);
		this._oButtonRedo.setEnabled(bCanRedo);
	};

	/**
	 * Adapt the enablement of the Transport/Publish button in the ToolsMenu
	 * @param {Boolean}
	 * 			bChangesExists set to true if changes exists
	 */
	ToolsMenu.prototype.adaptTransportEnablement = function(bChangesExists) {
		this._oButtonTransport.setEnabled(bChangesExists);
	};

	/**
	 * Adapt the enablement of the Reset button in the ToolsMenu
	 * @param {Boolean}
	 * 			bChangesExists set to true if changes exists
	 */
	ToolsMenu.prototype.adaptRestoreEnablement = function(bChangesExists) {
		this._oButtonRestore.setEnabled(bChangesExists);
	};

	return ToolsMenu;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ui/ToolsMenu.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.ToolsMenuRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides default renderer for control sap.ui.rta.ToolsMenu
jQuery.sap.declare('sap.ui.rta.ui.ToolsMenuRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/ToolsMenuRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";

	/**
	 * @author SAP SE
	 * @class ToolsMenu renderer.
	 * @static
	 */
	var ToolsMenuRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ToolsMenuRenderer.render = function(oRm, oControl) {

		if (oControl.getToolbars().length !== 0){
			oControl.getToolbars().forEach(function(oCtrl){
				oRm.renderControl(oCtrl);
			});
		}
	};
	return ToolsMenuRenderer;

}, /* bExport= */ true);
}; // end of sap/ui/rta/ui/ToolsMenuRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.util.FakeLrepLocalStorage') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.util.FakeLrepLocalStorage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/util/FakeLrepLocalStorage",[], function() {
	"use strict";

	/**
	 * Class for SAP RTA Fake Lrep localStorage
	 * 
	 * @class
	 * Utility functionality for SAP RTA Lrep localStorage
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias sap.ui.rta.FakeLrepLocalStorage
	 */

	var RTA_LREP_KEY = "sap.ui.rta.change";
	var FakeLrepLocalStorage = {};

	/**
	 * Creates the RTA Lrep change key
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @returns {String} the prefixed id
	 */
	FakeLrepLocalStorage.createChangeKey = function(sId) {

		if (sId) {
			return RTA_LREP_KEY + "." + sId;
		}
	};

	/**
	 * The iterator for the local RTA Lrep changes (localStorage)
	 * @public
	 * @param {function} fnPredicate - the function to apply for each RTA cahnge
	 */
	FakeLrepLocalStorage.forEachLrepChangeInLocalStorage = function(fnPredicate) {

		for (var sKey in window.localStorage) {

			if (sKey.indexOf(RTA_LREP_KEY) > -1) {
				fnPredicate(sKey);
			}
		}
	};

	/**
	 * Get a specific RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @returns {Object} the specific change
	 */
	FakeLrepLocalStorage.getChange = function(sId) {

		if (sId) {

			var sChange = window.localStorage.getItem(this.createChangeKey(sId));
			return JSON.parse(sChange);
		}
	};

	/**
	 * Get all RTA Lrep changes (localStorage)
	 * @returns {Object[]} all local RTA changes
	 */
	FakeLrepLocalStorage.getChanges = function() {

		var aChanges = [],
			oChange;

		this.forEachLrepChangeInLocalStorage(function(sKey) {

			oChange = JSON.parse(window.localStorage[sKey]);
			aChanges.push(oChange);
		});

		return aChanges;
	};

	/**
	 * Get the number of RTA Lrep changes (localStorage)
	 * @returns {Number} the amout of local RTA Lrep changes
	 */
	FakeLrepLocalStorage.getNumChanges = function() {

		var iChanges = 0;

		this.forEachLrepChangeInLocalStorage(function(sKey) {
			iChanges++;
		});

		return iChanges;
	};
	
	FakeLrepLocalStorage._aModifyCallbacks = [];
	
	/**
	 * Use this in tests to ensure the modify operation happend
	 * @param {Function} fnCallback callback, which is called, when the local storage is 
	 */
	FakeLrepLocalStorage.attachModifyCallback = function(fnCallback) {
		this._aModifyCallbacks.push(fnCallback);
	};
	
	/**
	 * Stop listening on modify operations
	 * @param {Function} fnCallback callback to be removed
	 */
	FakeLrepLocalStorage.detachModifyCallback = function(fnCallback) {
		var i = this._aModifyCallbacks.indexOf(fnCallback);
		if (i !== -1){
			this._aModifyCallbacks.splice(i,1);
		}
	};
	
	FakeLrepLocalStorage._callModifyCallbacks = function() {
		this._aModifyCallbacks.forEach(function(fnCallback){
			fnCallback();
		});
	};
	/**
	 * Delete a specific RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 */
	FakeLrepLocalStorage.deleteChange = function(sId) {

		if (sId) {
			window.localStorage.removeItem(this.createChangeKey(sId));
		}
		
		this._callModifyCallbacks();
	};

	/**
	 * Delete all RTA Lrep changes (localStorage)
	 * @public
	 */
	FakeLrepLocalStorage.deleteChanges = function() {

		this.forEachLrepChangeInLocalStorage(function(sKey) {
			window.localStorage.removeItem(sKey);
		});
		this._callModifyCallbacks();
	};

	/**
	 * Save a RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @param  {Object} oChange - the change object
	 */
	FakeLrepLocalStorage.saveChange = function(sId, oChange) {

		if (sId && oChange) {

			var sChangeKey = this.createChangeKey(sId),
				sChange = JSON.stringify(oChange);

			window.localStorage.setItem(sChangeKey, sChange);
		}
		this._callModifyCallbacks();
	};

	return FakeLrepLocalStorage;

}, /* bExport= */ true);
}; // end of sap/ui/rta/util/FakeLrepLocalStorage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.Utils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
/*global Promise*/
// Provides object sap.ui.rta.Utils.
jQuery.sap.declare('sap.ui.rta.Utils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.FieldSelectorModelConverter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.uxap.ObjectPageSection'); // unlisted dependency retained
jQuery.sap.require('sap.uxap.ObjectPageLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
sap.ui
		.define("sap/ui/rta/Utils",
				['jquery.sap.global', 'sap/ui/fl/Utils', 'sap/ui/dt/OverlayUtil',
						'sap/ui/comp/odata/FieldSelectorModelConverter', 'sap/ui/fl/registry/Settings',
						'sap/ui/comp/smartform/GroupElement', 'sap/ui/comp/smartform/Group', 'sap/ui/comp/smartfield/SmartField',
						'sap/uxap/ObjectPageSection', 'sap/uxap/ObjectPageLayout', 'sap/ui/core/StashedControlSupport', 'sap/m/MessageBox',
						'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/rta/model/ElementPreprocessor'],
				function(jQuery, FlexUtils, OverlayUtil, FieldSelectorModelConverter, Settings,
						GroupElement, Group, SmartField, ObjectPageSection, ObjectPageLayout, StashedControlSupport, MessageBox,
						MetadataAnalyser, ElementPreprocessor) {
					"use strict";

					/**
					 * Class for Utils.
					 *
					 * @class Utility functionality to work with controls, e.g. iterate through aggregations, find parents, ...
					 *
					 * @author SAP SE
					 * @version 1.44.4
					 *
					 * @private
					 * @static
					 * @since 1.30
					 * @alias sap.ui.rta.Utils
					 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
					 *               might be changed in future.
					 */

					var Utils = {};

					Utils.RESOLVED_PROMISE = Promise.resolve(true);

					Utils._sFocusableOverlayClass = ".sapUiDtOverlaySelectable";
					/**
					 * Utility function to check if extensibility is enabled in the current system
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {Promise} resolves a boolean
					 */
					Utils.isExtensibilityEnabledInSystem = function(oControl) {
						var sComponentName = FlexUtils.getComponentClassName(oControl);
						if (!sComponentName || sComponentName == "") {
							return Promise.resolve(false);
						}
						return Settings.getInstance(sComponentName).then(function(oSettings) {
							if (oSettings.isModelS) {
								return oSettings.isModelS();
							}
							return false;
						});
					};

					function _isValidAggregationAction(mAction, oPublicParentAggregationOverlay){
						return mAction && mAction.changeType && mAction.aggregation === oPublicParentAggregationOverlay.getAggregationName();
					}

					function _checkAggregations (oDesignTimeMetadata) {
						if (oDesignTimeMetadata.getAggregations) {
							for (var aggr in oDesignTimeMetadata.getAggregations()) {
								if (oDesignTimeMetadata.getAggregation(aggr).actions) {
									return true;
								}
							}
						}
						return false;
					}

					/**
					 * Utility function to check if the element is editable
					 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
					 * @param  {sap.ui.core.Control} oMovedElement moved control
					 * @return {boolean}          true if element is editable, false if not
					 */
					Utils.isEditable = function(oOverlay, oMovedElement) {

						var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
						var oElement = oOverlay.getElementInstance();
						var sClassName = oElement.getMetadata().getName();
						var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
						var oParentDesignTimeMetadata;
						if (!oPublicParentAggregationOverlay) {
							return false;
						} else {
							oParentDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
						}

						var bEditable = false;
						var bStable = false;
						var oRenameAction;
						var oRemoveAction;
						var oRevealAction;
						var oSettingsAction;

						//evaluate different enablement criteria
						var oPublicParentDesignTimeMetadata = oOverlay.getPublicParentElementOverlay().getDesignTimeMetadata();
						if (oPublicParentDesignTimeMetadata.getData().aggregations) {
							var oCreateContainerAction = oPublicParentDesignTimeMetadata.getAggregationAction("createContainer", oElement)[0];
							var oAddODataProperty = oPublicParentDesignTimeMetadata.getAggregationAction("addODataProperty", oElement)[0];

							if (_isValidAggregationAction(oCreateContainerAction, oPublicParentAggregationOverlay)
								|| _isValidAggregationAction(oAddODataProperty, oPublicParentAggregationOverlay)){
								bEditable = true;
							}
						}
						if (!bEditable && oDesignTimeMetadata.getData().actions) {
							oRenameAction = oDesignTimeMetadata.getAction("rename", oElement);
							if (oRenameAction && oRenameAction.changeType) {
								bEditable = true;
							} else {
								oRemoveAction = oDesignTimeMetadata.getAction("remove", oElement);
								if (oRemoveAction && oRemoveAction.changeType) {
									bEditable = true;
								} else {
									oRevealAction = oDesignTimeMetadata.getAction("reveal", oElement);
									if (oRevealAction && oRevealAction.changeType) {
										bEditable = true;
									} else {
										oSettingsAction = oDesignTimeMetadata.getAction("settings", oElement);
										if (oSettingsAction) {
											bEditable = true;
										}
									}
								}
							}
						}
						if (!bEditable && oParentDesignTimeMetadata.getData().actions) {
							oRenameAction = oParentDesignTimeMetadata.getAction("rename", oElement);
							if (oRenameAction && oRenameAction.changeType) {
								bEditable = true;
							} else if (oParentDesignTimeMetadata.getAction("move", oMovedElement || oElement)) {
								bEditable = true;
							} else {
								oRemoveAction = oParentDesignTimeMetadata.getAction("remove", oElement);
								if (oRemoveAction && oRemoveAction.changeType) {
									bEditable = true;
								} else {
									oRevealAction = oParentDesignTimeMetadata.getAction("reveal", oElement);
									if (oRevealAction && oRevealAction.changeType) {
										bEditable = true;
									}
								}
							}
						}
						if (!bEditable) {
							bEditable = _checkAggregations(oDesignTimeMetadata);
						}
						if (!bEditable) {
							//TODO make all this stuff being calculated in the plugins
							//inline require here to prevent circular dependency
							jQuery.sap.require("sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin");
							bEditable = sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin.hasRevealActionsOnChildren(oOverlay);
						}
						if (!bEditable && FlexUtils.isVendorLayer()) {
							bEditable = ["sap.ui.comp.smartfilterbar.SmartFilterBar",
														 "sap.ui.comp.smarttable.SmartTable",
														 "sap.uxap.ObjectPageHeader",
														 "sap.uxap.ObjectPageHeaderActionButton",
														 "sap.ui.table.Column"].indexOf(sClassName) > -1;
						}

						// check for stable control Id
						if (bEditable) {
							var fnGetStableElements;
							if (oOverlay.isInHiddenTree()) {
								fnGetStableElements = oParentDesignTimeMetadata.getData().getStableElements;
							} else {
								fnGetStableElements = oDesignTimeMetadata.getData().getStableElements;
							}
							if (fnGetStableElements) {
								var aStableElements = fnGetStableElements(oElement);
								var bUnstable = aStableElements ? aStableElements.some(function(vStableElement) {
									var oControl = vStableElement.id || vStableElement;
									if (!FlexUtils.checkControlId(oControl, vStableElement.appComponent)) {
										return true;
									}
								}) : true;
								bStable = !bUnstable;
							} else {
								bStable = FlexUtils.checkControlId(oElement);
							}
						}

						return bEditable && bStable;
					};

					/**
					 * Utility function to check if the public parent element has a stable id
					 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
					 * @return {boolean}          true if parent has stable Id, false if not
					 */
					Utils.hasParentStableId = function(oOverlay) {
						var oBlockOverlay = oOverlay.getPublicParentElementOverlay();
						var oBlock = oBlockOverlay ? oBlockOverlay.getElementInstance() : null;

						return oBlock && FlexUtils.checkControlId(oBlock);
					};

					/**
					 * Utility function to check if the OData service is updated in the meantime
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {Promise} resolves if service is up to date, rejects otherwise
					 */
					Utils.isServiceUpToDate = function(oControl) {
						return this.isExtensibilityEnabledInSystem(oControl).then(function(bEnabled) {
							if (bEnabled) {
								jQuery.sap.require("sap.ui.fl.fieldExt.Access");
								var oModel = oControl.getModel();
								if (oModel) {
									var bServiceOutdated = sap.ui.fl.fieldExt.Access.isServiceOutdated(oModel.sServiceUrl);
									if (bServiceOutdated) {
										sap.ui.fl.fieldExt.Access.setServiceValid(oModel.sServiceUrl);
										//needs FLP to trigger UI restart popup
										sap.ui.getCore().getEventBus().publish("sap.ui.core.UnrecoverableClientStateCorruption","RequestReload",{});
										return Promise.reject();
									}
								}
							}
						});
					};

					/**
					 * Utility function to check via backend calls if the custom field button shall be enabled or not
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {Boolean} true if CustomFieldCreation functionality is to be enabled, false if not
					 */
					/**
					 * Utility function to check via backend calls if the custom field button shall be enabled or not
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {Boolean} true if CustomFieldCreation functionality is to be enabled, false if not
					 */
					Utils.isCustomFieldAvailable = function(oControl) {
						var that = this;
						return this.isExtensibilityEnabledInSystem(oControl).then(function(bShowCreateExtFieldButton) {
							if (!bShowCreateExtFieldButton) {
								return false;
							} else if (!oControl.getModel()) {
								return false;
							} else {
								var sServiceUrl = oControl.getModel().sServiceUrl;
								var sEntityType = that.getBoundEntityType(oControl);
								try {
									jQuery.sap.require("sap.ui.fl.fieldExt.Access");
									var oJQueryDeferred = sap.ui.fl.fieldExt.Access.getBusinessContexts(sServiceUrl,
											sEntityType);
									return Promise.resolve(oJQueryDeferred).then(function(oResult) {
										if (oResult) {
											if (oResult.BusinessContexts) {
												if (oResult.BusinessContexts.length > 0) {
													oResult.EntityType = sEntityType;
													return oResult;
												}
											}
										} else {
											return false;
										}
									}).catch(function(oError){
										if (oError) {
											if (jQuery.isArray(oError.errorMessages)) {
												for (var i = 0; i < oError.errorMessages.length; i++) {
													jQuery.sap.log.error(oError.errorMessages[i].text);
												}
											}
										}
										return false;
									});
								} catch (oError) {
									jQuery.sap.log
											.error("exception occured in sap.ui.fl.fieldExt.Access.getBusinessContexts", oError);
									return false;
								}
							}
						});
					};

					/**
					 * Opens a confirmation dialog indicating mandatory fields if necessary.
					 *
					 * @param oElement
					 *          the analyzed control
					 * @param a
					 *          list of mandatory fields
					 * @return true if user says okay, false if not
					 */
					Utils.openRemoveConfirmationDialog = function(oElement, sText) {
						var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
						var sTitle;
						return new Promise(
								function(resolve, reject) {

									sTitle = oTextResources.getText("CTX_REMOVE_TITLE");

									// create some dummy JSON data and create a Model from it
									var data = {
										messageText : sText,
										titleText : sTitle,
										icon : "sap-icon://question-mark",
										removeText : oTextResources.getText("BTN_FREP_REMOVE"),
										cancelText : oTextResources.getText("BTN_FREP_CANCEL")
									};
									var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(data);

									var oFragmentDialog;
									var fnCleanUp = function() {
										if (oFragmentDialog) {
											oFragmentDialog.close();
											oFragmentDialog.destroy();
											oFragmentDialog = null;
										}
									};

									// create a controller for the action in the Dialog
									var oFragmentController = {
										removeField : function() {
											fnCleanUp();
											resolve(true);
										},
										closeDialog : function() {
											fnCleanUp();
											resolve(false);
										}
									};

									// instantiate the Fragment if not done yet
									if (!oFragmentDialog) {
										oFragmentDialog = sap.ui.xmlfragment("sap.ui.rta.view.RemoveElementDialog", oFragmentController);
										oFragmentDialog.setModel(oModel);
									}
									oFragmentDialog.open();
								});
					};

					Utils.isMandatorySmartField = function(oElement) {
						return (oElement instanceof SmartField) && oElement.getMandatory();
					};

					/**
					 * Checks if overlay is selectable in RTA (selectable also means focusable for RTA)
					 *
					 * @param {sap.ui.dt.ElementOverlay}
					 *          oOverlay to check
					 * @returns {boolean} if is selectable
					 * @private
					 */
					Utils.isOverlaySelectable = function(oOverlay) {
						// check the real DOM visibility should be preformed while oOverlay.isVisible() can be true, but if element
						// has no geometry, overlay will not be visible in UI
						return oOverlay.isSelectable() && oOverlay.$().is(":visible");
					};

					Utils.getPropertyValue = function(oElement, sPropertyName) {
						var oMetadata = oElement.getMetadata().getPropertyLikeSetting(sPropertyName);
						var sPropertyGetter = oMetadata._sGetter;
						return oElement[sPropertyGetter]();
					};

					/**
					 * Returns overlay instance for an overlay's dom element
					 *
					 * @param {Element}
					 *          oDomRef DOM element
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getOverlayInstanceForDom = function(oDomRef) {
						var sId = jQuery(oDomRef).attr("id");
						if (sId) {
							return sap.ui.getCore().byId(sId);
						}
					};

					/**
					 * Returns the focused overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getFocusedOverlay = function() {
						if (document.activeElement) {
							var oElement = sap.ui.getCore().byId(document.activeElement.id);
							if (oElement instanceof sap.ui.dt.ElementOverlay) {
								return oElement;
							}
						}
					};

					/**
					 * Returns the first focusable child overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getFirstFocusableChildOverlay = function(oOverlay) {
						var oFirstFocusableChildOverlay = OverlayUtil.getFirstChildOverlay(oOverlay);

						while (oFirstFocusableChildOverlay && !this.isOverlaySelectable(oFirstFocusableChildOverlay)) {
							oFirstFocusableChildOverlay = OverlayUtil.getNextSiblingOverlay(oFirstFocusableChildOverlay);
						}
						return oFirstFocusableChildOverlay;
					};

					/**
					 * Returns the next focusable sibling overlay
					 *
					 * @return {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getNextFocusableSiblingOverlay = function(oOverlay) {
						var oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oOverlay);

						while (oNextFocusableSiblingOverlay && !this.isOverlaySelectable(oNextFocusableSiblingOverlay)) {
							oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oNextFocusableSiblingOverlay);
						}
						return oNextFocusableSiblingOverlay;
					};

					/**
					 * Returns the previous focusable sibling overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getPreviousFocusableSiblingOverlay = function(oOverlay) {
						var oPreviousFocusableSiblingOverlay = OverlayUtil.getPreviousSiblingOverlay(oOverlay);

						while (oPreviousFocusableSiblingOverlay && !this.isOverlaySelectable(oPreviousFocusableSiblingOverlay)) {
							oPreviousFocusableSiblingOverlay = OverlayUtil
									.getPreviousSiblingOverlay(oPreviousFocusableSiblingOverlay);
						}
						return oPreviousFocusableSiblingOverlay;
					};

					/*
					 * Looks for parent control with specified class name @param {sap.ui.core.Control} oControl Control to be
					 * checked @param {string} sType class name of parent control @returns {sap.ui.core.Control} the parent
					 * control @private
					 */
					Utils.getClosestTypeForControl = function(oControl, sType) {
						if (oControl && oControl.getMetadata().getName() !== sType) {
							return this.getClosestTypeForControl(oControl.getParent(), sType);
						}
						return oControl;
					};

					/*
					 * Checks if control is supported @param {sap.ui.core.Control} oControl Control to be checked @private
					 */
					Utils._checkIsSupportedControl = function(oControl, aSupportedControls) {
						for (var i = 0; i < aSupportedControls.length; i++) {
							if (oControl.getMetadata().getName() === aSupportedControls[i]) {
								return true;
							}
						}
					};

					/**
					 * Checks whether a GroupElement has Fields which are not bound to an OData model.
					 * => only used by combine/split, should be removed
					 * @param {sap.ui.comp.smartform.GroupElement}
					 *          oGroupElement Control to be checked
					 * @returns {boolean} true if one field has oData binding.
					 * @private
					 */
					Utils.hasGroupElementUnBoundFields = function(oGroupElement) {
						var aElements = oGroupElement.getFields();
						if (aElements.length === 0) {
							return true;
						}
						for (var j = 0; j < aElements.length; j++) {
							var oElement = aElements[j];
							if (!oElement.getDomRef()) {
								continue;
							}
							if (!this._isElementBound(oElement)) {
								return true;
							}
						}
						return false;
					};
					/**
					 * Checks whether an Element is bound to an OData Model.
					 *
					 * @param {sap.ui.core.Element}
					 *          oElement element to be checked
					 * @returns {boolean} true if element has oData binding.
					 * @private
					 */
					Utils._isElementBound = function(oElement) {
						var mBindingInfos = oElement.mBindingInfos;
						// No Binding at all
						if (Object.keys(mBindingInfos).length === 0) {
							return false;
						} else {
							for ( var oPropertyName in mBindingInfos) {
								var aParts = mBindingInfos[oPropertyName].parts;
								for (var i = 0; i < aParts.length; i++) {
									if (aParts[i].model) {
										var sModelName = oElement.getModel(aParts[i].model).getMetadata().getName();
										if (sModelName === "sap.ui.model.odata.ODataModel"
												|| sModelName === "sap.ui.model.odata.v2.ODataModel") {
											return true;
										}
									} else {
										var sModelName = oElement.getModel().getMetadata().getName();
										if (sModelName === "sap.ui.model.odata.ODataModel"
												|| sModelName === "sap.ui.model.odata.v2.ODataModel") {
											return true;
										}
									}
								}
							}
						}
					};
					/**
					 * Checks whether an ObjectPageLayout has sections which are not visible.
					 *
					 * @param {ObjectPageLayout_Or_ObjectPageSection} oObjectPageControl
					 * @returns {array} array with ObjectPageSection objects
					 * @private
					 */
					Utils.getObjectPageSections = function(oObjectPageControl) {
						var oObjectPageLayout;
						var aSections = [];
						var aStashedSections = [];
						if (oObjectPageControl.getMetadata().getName() === "sap.uxap.ObjectPageSection") {
							oObjectPageLayout = oObjectPageControl.getParent();
						} else if (oObjectPageControl.getMetadata().getName() === "sap.uxap.ObjectPageLayout") {
							oObjectPageLayout = oObjectPageControl;
						}
						aSections = oObjectPageLayout.getAggregation("sections");

						aStashedSections = StashedControlSupport.getStashedControls(oObjectPageLayout.getId());
						aSections = aSections.concat(aStashedSections);

						return aSections;
					};



					/**
					 * Checks whether an ObjectPageLayout has sections which are not visible.
					 *
					 * @param {ObjectPageLayout}
					 *          or {ObjectPageSection} ObjectPage Control to be checked
					 * @returns {boolean} true if one section is invisible.
					 * @private
					 */
					Utils.hasObjectPageLayoutInvisibleSections = function(oObjectPageControl) {
						var aSections = Utils.getObjectPageSections(oObjectPageControl);

						if (aSections.length === 0) {
							return false;
						}
						for (var i = 0; i < aSections.length; i++) {
							if ((aSections[i].getVisible && aSections[i].getVisible() === false) ||
									(aSections[i].getStashed && aSections[i].getStashed() === true)) {
								return true;
							}
						}
						return false;
					};


					Utils.getIndex = function(oParentElement, oChildElement, sAggregationName, fnGetIndex) {
						var iIndex;
						if (fnGetIndex && typeof fnGetIndex === "function") {
							iIndex = fnGetIndex.call(null, oParentElement, oChildElement);
						} else {
							var oMetadata = oParentElement.getMetadata();
							var oAggregation = oMetadata.getAggregation(sAggregationName);
							var sGetter = oAggregation._sGetter;
							var aContainers = oParentElement[sGetter]();
							if (oChildElement) {
								iIndex = aContainers.indexOf(oChildElement) + 1;
							} else {
								iIndex = aContainers.length;
							}
						}
						return iIndex;
					};

					/**
					 * Determines the target index depending on the selected control
					 *
					 * @param {sap.ui.core.Control}
					 *          oSelectedControl Selected Control
					 * @param {sap.ui.core.Control}
					 *          oSelectedBlock Selected block of Controls
					 * @param {Array}
					 *          aControls Array of controls in the block
					 * @returns {int} iTargetIndex the target index
					 * @private
					 */
					Utils.determineTargetIndex = function(oSelectedControl, oSelectedBlock, aControls, iOffset) {
						var fnClass = oSelectedBlock.getMetadata().getClass();
						var iTargetIndex = (oSelectedControl instanceof fnClass) ? aControls.length - iOffset : aControls.indexOf(oSelectedControl) + 1;

						return iTargetIndex;
					};

					/**
					 * Walks up the DOM to find the next supported block element
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {sap.ui.core.Control} the next supported block control
					 * @private
					 */
					Utils.findSupportedBlock = function(oControl, aSupportedControls) {
						if (this._checkIsSupportedControl(oControl, aSupportedControls)) {
							return oControl;
						} else {
							oControl = oControl.getParent();
							while (oControl) {
								if (this._checkIsSupportedControl(oControl, aSupportedControls)) {
									return oControl;
								}
								oControl = oControl.getParent();
							}
						}
					};

					/**
					 * Creates a unique id for a smartField control based on its parent group, entityType and binding path.
					 *
					 * @param {sap.ui.comp.smartform.Group}
					 *          oGroup Control.
					 * @param {String}
					 *          sEntityType entityType which is bound to the group control.
					 * @param {String}
					 *          sBindingPath binding path of the smartField for which a new Id should be created.
					 * @returns {String} new string Id
					 * @private
					 */
					Utils.createFieldLabelId = function(oControl, sEntityType, sBindingPath) {
						var sControlId = oControl.getId() + "_" + sEntityType + "_" + sBindingPath;
						sControlId = sControlId.replace("/", "_");
						return sControlId;
					};

					/**
					 * Secure extract a label from an element
					 *
					 * @param {Object}
					 *          any Object
					 * @return {String} a label string or undefined
					 */
					Utils.getLabelForElement = function(oElement, fnFunction) {
						// if there is a function, only the function is executed
						if (fnFunction) {
							return fnFunction(oElement);
						} else {
							// first try getText(), then getlabelText(), if not available try getLabel().getText(), then getTitle(), then getId()
							var sFieldLabel = oElement.getText && oElement.getText();
							if (!sFieldLabel) {
								sFieldLabel = oElement.getLabelText && oElement.getLabelText();
							}
							if (!sFieldLabel) {
								sFieldLabel = oElement.getLabel && oElement.getLabel();
								if (sFieldLabel && sFieldLabel.getText){
									sFieldLabel = sFieldLabel.getText();
								}
							}
							if (!sFieldLabel) {
								sFieldLabel = oElement.getTitle && oElement.getTitle();
							}
							if (!sFieldLabel) {
								sFieldLabel = oElement.getId && oElement.getId();
							}
							return (typeof sFieldLabel) === "string" ? sFieldLabel : undefined;
						}
					};

					/**
					 * Secure extract path for a binding info.
					 *
					 * @param {Object}
					 *          any Object
					 * @return {String} a path string or undefined
					 */
					Utils.getPathFromBindingInfo = function(oInfo, mBindingInfo) {
						var sPath = mBindingInfo[oInfo] ? mBindingInfo[oInfo] : undefined;
						if (sPath) {
							if ((sPath.parts instanceof Array) && sPath.parts.length > 0) {
								sPath = sPath.parts[0] ? sPath.parts[0] : undefined;
							}
							sPath = ((typeof sPath.path) === "string") ? sPath.path : sPath;
						}
						if ((typeof sPath) === "string") {
							sPath = sPath;
						} else {
							sPath = undefined;
						}
						return sPath;
					};

					/**
					 * Get the entity type based on the binding of a control
					 *
					 * @param {sap.ui.core.Element}
					 *          oElement any Object
					 * @return {String} entity type without namespace
					 */
					Utils.getBoundEntityType = function(oElement, oModel) {
						var _oModel = oModel ? oModel : oElement.getModel();
						var oBindingContext = oElement.getBindingContext();
						var oEntityTypeMetadata = _oModel.oMetadata._getEntityTypeByPath(oBindingContext.getPath());
						return oEntityTypeMetadata.name;
					};

					/**
					 * Allow window.open to be stubbed in tests
					 */
					Utils.openNewWindow = function(sUrl) {
						window.open(sUrl, "_blank");
					};

					// Example: Utils.withTimeLog(this, function(a, b) { return a + b;}, [3, 4]);
					/**
					 * @private
					 */
					// Utils._withTimeLog = function(reciever, fFunctionToBeMeassured, aArguments) {
					// var s = performance.now();
					// var solution = fFunctionToBeMeassured.apply(reciever, aArguments);
					// var result = performance.now() - s;
					// console.error("findChangedFieldLabels_new took " + result + " ms.");
					// return solution;
					// };
					// Some control providers use the odata metadata and others simply stashed fields (objectPage)
					Utils.fetchODataPropertiesFor = function(oModel) {
						var that = this;
						if (!oModel) {
							return new Promise(function(resolve, reject) {
								reject();
							});
						}

						var oMetaModel = oModel.getMetaModel();

						return oMetaModel.loaded().then(
								function() {
									that._oMetadataAnalyzer = new MetadataAnalyser(oModel);
									var oElementPreprocessing = new ElementPreprocessor(that._oMetadataAnalyzer);
									var aEntityTypeNames = that._oMetadataAnalyzer.getAllEntityTypeNames();
									var mAvailableElements = {};
									aEntityTypeNames.forEach(function(sEntityTypeName) {
										//get all fields for each entity type
										mAvailableElements[sEntityTypeName] = that._oMetadataAnalyzer
												.getFieldsByEntityTypeName(sEntityTypeName);
									});
									Object.keys(mAvailableElements).forEach(function(sEntityType) {
										// enriches the fields of each entity type
										mAvailableElements[sEntityType] = oElementPreprocessing._updateAndFilterFields(mAvailableElements[sEntityType]);
									});
									return mAvailableElements;
								}, function(oReason) {
									jQuery.sap.log.error("MetadataModel could not be loaded", oReason);
								});
					};

					/**
					 * Function to find the binding paths of a given UI5 Element
					 *
					 * @param {sap.ui.core.Element}
					 *          oElement for which the binding info should be found
					 * @returns {Object} valueProperty: the name of the property which is bound
					 * @private
					 */
					Utils.getElementBindingPaths = function(oElement) {
						var aPaths = {};
						if (oElement.mBindingInfos) {
							for ( var oInfo in oElement.mBindingInfos) {
								var sPath = oElement.mBindingInfos[oInfo].parts[0].path
										? oElement.mBindingInfos[oInfo].parts[0].path
										: "";
								sPath = sPath.split("/")[sPath.split("/").length - 1];
								aPaths[sPath] = {
										valueProperty : oInfo
								};
							}
						}
						return aPaths;
					};

					/**
					 * Function to find the binding paths of a given UI5 Element inside a list of odata metadata fields
					 *
					 * @param {object}
					 *          map of binding paths from an ui5 element
					 * @param {object}
					 *          map of a odata metadata field list
					 * @returns {Object} odata metadatafield: the found odata metada field
					 *          element
					 * @private
					 */
					Utils.findFieldBindingPathInFieldsArray = function(mPaths, mHiddenElements) {
						var aPathKeys = Object.keys(mPaths);
						var aDataFieldPaths = Object.keys(mHiddenElements);
						var sFoundPath = "";
						aPathKeys.forEach(function(sPath) {
							if (aDataFieldPaths.indexOf(sPath) >= 0) {
								sFoundPath =  aDataFieldPaths[aDataFieldPaths.indexOf(sPath)];
							}
						});
						return sFoundPath;
					};

					/**
					 * Helper function to create a new smartform group element add command
					 *
					 * @param {sap.ui.comp.smartform.SmartForm}
					 *          oSmartForm in which the field should be added to
					 * @param {sap.ui.comp.smartform.Group}
					 *          oGroup in which the field should be added to
					 * @param {int}
					 *          index position where the new field should be added
					 * @param {int}
					 *         array of JS types of each new field
					 * @param {array}
					 *          array of labels for each new field
					 * @param {array}
					 *          array of field values for each new field
					 * @param {array}
					 *          array of field value properties of each new field
					 * @returns {Object}
					 *          returns the created command
					 * @private
					 */
					Utils.createNewAddFieldsCommand = function(oSmartForm, oGroup, iIndex, aJsTypes, aLabels, aValueProperties, aFieldValues) {
						jQuery.sap.require("sap.ui.rta.command.CommandFactory");
						var oAddFieldsCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oGroup, "add", {
							newControlId : Utils.createNewSmartFormGroupElementId(oSmartForm, aFieldValues),
							index : iIndex,
							jsTypes : aJsTypes,
							labels : aLabels,
							fieldValues : aFieldValues,
							valuePropertys : aValueProperties
						});
						return oAddFieldsCommand;
					};

					/**
					 * Helper function to create an id for smart group elements within a SmartFrom
					 *
					 * @param {sap.ui.core.Control}
					 *          oParentElement of the group elementt
					 * @param {array} aPaths
					 *          aPaths (binding paths) of the smartfields that are within the group element
					 *
					 * @returns {string}
					 *          returns the new Id
					 */
					Utils.createNewSmartFormGroupElementId = function(oParentElement, aPaths) {
						var sPathId = "";
						var aToBeSortedPaths = aPaths.slice();
						var aSortedPaths = aToBeSortedPaths.sort();
						for (var i = 0; i < aSortedPaths.length; i++) {
							var sPath = aSortedPaths[i].replace("/", "_");
							sPathId = sPathId + "__" + sPath;
						}
						return oParentElement.getId() + sPathId;
					};

					return Utils;
				}, /* bExport= */true);

}; // end of sap/ui/rta/Utils.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.BindProperty') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.BindProperty'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.PropertyBindingChange'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/BindProperty",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/PropertyBindingChange", "sap/ui/rta/Utils"], function(FlexCommand,
		PropertyBindingChangeHandler, Utils) {
	"use strict";

	/**
	 * The BindProperty command take an element and the name of a property
	 * (propertyName) together with a complex binding string (newBinding).
	 * When executed, the binding is set on the property. The binding string
	 * has to comply with the same rules that apply to bindings passed to properties
	 * in the constructor of SAPUI5 ManagedObjects.
	 *
	 * Setting the oldValue or oldBinding is optional if you are running in the
	 * designMode (see unit test page).
	 * If set these take precedence over the actual value of the control.
	 * You should not set both properties.
	 *
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.rta.command.BindProperty
	 * @experimental Since 1.38. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var BindProperty = FlexCommand.extend("sap.ui.rta.command.BindProperty", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				propertyName : {
					type : "string"
				},
				newBinding : {
					type : "string",
					bindable : false
				},
				//optional - command can derive it from the element
				oldValue : {
					type : "any"
				},
				//optional - command can derive it from the element
				oldBinding : {
					type : "string"
				},
				changeType : {
					type : "string",
					defaultValue : "propertyBindingChange"
				}
			},
			associations : {},
			events : {}
		}
	});


	BindProperty.prototype.init = function() {
		this.setChangeHandler(PropertyBindingChangeHandler);
	};

	BindProperty.FORWARD = true;
	BindProperty.BACKWARD = false;

	/**
	 * @override to suppress the binding strings to be used as
	 */
	BindProperty.prototype.bindProperty = function(sName, oBindingInfo){
		if (sName === "newBinding"){
			return this.setNewBinding(oBindingInfo.bindingString);
		}
		if (sName === "oldBinding"){
			return this.setOldBinding(oBindingInfo.bindingString);
		}
		return FlexCommand.prototype.bindProperty.apply(this, arguments);
	};

	BindProperty.prototype._ensureOld = function(){
		if ((this.getOldValue() === undefined) && (this.getOldBinding() === undefined)){
			var oElement = this._getElement();
			var oBindingInfo = oElement.getBindingInfo(this.getPropertyName());
			if (oBindingInfo && oBindingInfo.bindingString) {
				this.setOldBinding(oBindingInfo.bindingString);
			} else {
				var vOldValue = Utils.getPropertyValue(oElement, this.getPropertyName());
				this.setOldValue(vOldValue);
			}
		}
	};

	BindProperty.prototype._getOld = function(){
		if ( this.getOldValue() === "undefined" ){
			return this.getOldValue();
		} else {
			return this.getOldBinding();
		}
	};

	BindProperty.prototype._getSpecificChangeInfo = function(bForward) {
		var oElement = this._getElement();
		this._ensureOld();
		// general format
		var mSpecificChangeInfo = {
			changeType : this.getChangeType(),
			selector : {
				id : oElement.getId(),
				type : oElement.getMetadata().getName()
			},
			content : {
				property : this.getPropertyName(),
				newBinding : bForward ? this.getNewBinding() : this._getOld()
			}
		};
		if (bForward && typeof this.getOldValue() !== "undefined"){
			mSpecificChangeInfo.content.oldValue = this.getOldValue();
		} else {
			mSpecificChangeInfo.content.oldBinding = bForward ? this.getOldBinding() : this.getNewBinding();
		}

		return mSpecificChangeInfo;
	};

	BindProperty.prototype._getFlexChange = function(bForward) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	BindProperty.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(BindProperty.FORWARD);
	};

	/**
	 * @override
	 */
	BindProperty.prototype._getBackwardActionData = function(oElement) {
		return this._getFlexChange(BindProperty.BACKWARD);
	};

	/**
	 * @override
	 */
	BindProperty.prototype.serialize = function() {
		return this._getSpecificChangeInfo(BindProperty.FORWARD);
	};


	return BindProperty;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/BindProperty.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.LREPSerializer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.LREPSerializer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/LREPSerializer",['sap/ui/base/ManagedObject', 'sap/ui/rta/command/Stack', 'sap/ui/fl/FlexControllerFactory'], function(ManagedObject, CommandStack, FlexControllerFactory) {
	"use strict";

	/**
	 * Basic implementation for the LREP Serializer.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.42
	 * @alias sap.ui.rta.command.LREPSerializer
	 * @experimental Since 1.42. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var LREPSerializer = ManagedObject.extend("sap.ui.rta.command.LREPSerializer", {
		metadata : {
			library : "sap.ui.rta",
			associations : {
				/** The root control which is needed for the Flex Controller */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			properties : {
				"commandStack" : {
					type : "object" // has to be of type sap.ui.rta.command.Stack
				}
			},
			aggregations : {}
		}
	});

	/**
	 * Serializes and saves all changes to LREP
	 *
	 * @returns {Promise}
	 * @public
	 */
	LREPSerializer.prototype.saveCommands = function() {
		var oCommandStack = this.getCommandStack();

		var oRootControl = sap.ui.getCore().byId(this.getRootControl());
		var oFlexController = FlexControllerFactory.createForControl(oRootControl);
		var aCommands = oCommandStack.getSerializableCommands();

		aCommands.forEach(function(oCommand, i) {
			var oElement = oCommand.getElement();
			var oPreparedChange = oCommand.getPreparedActionData();
			if (oPreparedChange) {
				oFlexController.addPreparedChange(oPreparedChange.change || oPreparedChange, oElement);
			} else {
				// Plain unprepared commmand, can be removed in case all commands are always prepared
				oFlexController.addChange(oCommand.serialize(), oElement);
			}
		});

		var that = this;
		return oFlexController.saveAll().then(
			function() {
				jQuery.sap.log.info("UI adaptation successfully transfered changes to layered repository");
				that.getCommandStack().removeAllCommands();
			});
	};

	return LREPSerializer;

}, /* bExport= */true);
}; // end of sap/ui/rta/command/LREPSerializer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Property') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Property'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.PropertyChange'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Property",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/PropertyChange", "sap/ui/rta/Utils"], function(FlexCommand,
		PropertyChangeHandler, Utils) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Property = FlexCommand.extend("sap.ui.rta.command.Property", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				propertyName : {
					type : "string"
				},
				newValue : {
					type : "any"
				},
				// optional
				oldValue : {
					type : "any"
				},
				semanticMeaning : {
					type : "string"
				},
				changeType : {
					type : "string",
					defaultValue : "propertyChange"
				}
			},
			associations : {},
			events : {}
		}
	});


	Property.prototype.init = function() {
		this.setChangeHandler(PropertyChangeHandler);
	};

	Property.FORWARD = true;
	Property.BACKWARD = false;

	Property.prototype._ensureOldValue = function(oElement){
		if (this.getOldValue() === undefined) {
			var vOldValue = Utils.getPropertyValue(oElement, this.getPropertyName());
			this.setOldValue(vOldValue);
		}
	};

	Property.prototype._getSpecificChangeInfo = function(bForward) {
		var oElement = this._getElement();
		this._ensureOldValue(oElement);
		// general format
		return {
			changeType : this.getChangeType(),
			selector : {
				id : oElement.getId(),
				type : oElement.getMetadata().getName()
			},
			content : {
				property : this.getPropertyName(),
				oldValue : bForward ? this.getOldValue() : this.getNewValue(),
				newValue : bForward ? this.getNewValue() : this.getOldValue(),
				semantic : this.getSemanticMeaning()
			}
		};
	};

	Property.prototype._getFlexChange = function(bForward) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	Property.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange(Property.FORWARD);
	};

	/**
	 * @override
	 */
	Property.prototype._getBackwardActionData = function(oElement) {
		return this._getFlexChange(Property.BACKWARD);
	};

	/**
	 * @override
	 */
	Property.prototype.serialize = function() {
		return this._getSpecificChangeInfo(Property.FORWARD);
	};


	return Property;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Property.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.Form') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.Form'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/Form",['sap/ui/rta/controlAnalyzer/Base', 'sap/ui/rta/Utils', 'sap/ui/dt/ElementUtil', 'sap/ui/fl/Utils'],
		function(Base, Utils, ElementUtil, FlexUtils) {
			"use strict";

			/**
			 * Constructor for a new change controller for the sap.ui.layout.form. Do not instantiate this class directly!
			 * Instead use the ControlAnalyzerFactory.
			 *
			 * @class Context - controller for flexibility changes
			 * @extends sap.ui.base.ManagedObject
			 * @author SAP SE
			 * @version 1.44.4
			 * @constructor
			 * @private
			 * @since 1.34
			 * @alias sap.ui.rta.controlAnalyzer.Form
			 * @augments sap.ui.rta.controlAnalyzer.Base
			 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var Form = Base.extend("sap.ui.rta.controlAnalyzer.Form", {
				metadata : {
					library : "sap.ui.rta",
					properties : {}
				}
			});

			/**
			 * @override
			 */
			Form.prototype.init = function() {
			};

			/**
			 * @override
			 */
			Form.prototype.getFlexChangeType = function(sType, oElement, mSettings) {
				var sFlexChangeType;
				switch (sType) {
					case "rename" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer")) {
							sFlexChangeType = "renameTitle";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement")) {
							sFlexChangeType = "renameLabel";
						}
						break;
					case "hide" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer")) {
							sFlexChangeType = "removeSimpleFormGroup";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement")) {
							sFlexChangeType = "hideSimpleFormField";
						}
						break;
					case "unhide" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement")) {
							sFlexChangeType = "unhideSimpleFormField";
						}
						break;
					case "add" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.SimpleForm")) {
							sFlexChangeType = "addSimpleFormGroup";
						}
						break;
					default :
						break;
				}
				return sFlexChangeType;
			};

			/**
			 * @override
			 */
			Form.prototype.getCommandClass = function(sCommand) {
				var sCommandClass;
				switch (sCommand) {
					case "rename" :
						sCommandClass = 'sap.ui.rta.command.RenameForm';
						break;
					case "hide" :
						sCommandClass = 'sap.ui.rta.command.HideForm';
						break;
					case "unhide" :
						sCommandClass = 'sap.ui.rta.command.UnhideForm';
						break;
					case "add" :
						sCommandClass = 'sap.ui.rta.command.AddSimple';
						break;
					default :
						break;
				}
				return sCommandClass;
			};

			/**
			 * @override
			 */
			Form.prototype.getConfiguredElement = function(oElement) {
				return this._getSimpleFormContainer(oElement);
			};

			/**
			 * @public
			 */
			Form.prototype.getRenamableControl = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement")) {
					return oElement.getLabel();
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer")) {
					return oElement.getTitle();
				}
			};

			Form.prototype.getLabel = function(oElement) {
				return this.getRenamableControl(oElement).getText();
			};

			Form.prototype.getLabelBinding = function(oElement) {
				return oElement.getBindingInfo("text");
			};

			Form.prototype.resumeLabelBinding = function(oElement) {
				var oBinding = oElement.getBinding("text");
				if (oBinding) {
					oBinding.resume();
				}
			};

			/**
			 * @override
			 */
			Form.prototype.createChangeData = function(oControl, oCurrentSelectedBlock, bHideControl, oSelectedControl) {
				var mChangeData = {};
				var oBindingContextObject = oControl.getBindingContext().getObject();
				var sControldId = oBindingContextObject.controlId
						? oBindingContextObject.controlId
						: oBindingContextObject.fieldLabel;

				var oObjectPage = sap.ui.getCore().byId(sControldId);
				var bControlExists = !!oObjectPage;

				var fnCreateChangeEvent = function() {
					if (bControlExists) {
						if (oBindingContextObject.visibilityType === "hide") {
							mChangeData = {
								controlId : sControldId,
								changeType : bHideControl ? "hideControl" : "unhideControl",
								controlType : "SimpleForm"
							};
						}
					}
					return mChangeData;
				};

				return new Promise(function(resolve, reject) {
					resolve(fnCreateChangeEvent());
				});

			};

			/**
			 * @override
			 */
			Form.prototype.getSelectedBlock = function(oControl) {
				return Utils.findSupportedBlock(oControl, ["sap.ui.layout.form.SimpleForm"]);
			};

			/**
			 * @override
			 */
			Form.prototype.getClosestType = function(oControl) {
				return Utils.getClosestTypeForControl(oControl, "sap.ui.layout.form.SimpleForm");
			};

			/**
			 * @overwrite
			 */
			Form.prototype.prepare = function() {
				var aElements = this._getSimpleFormElements(this.getControl());

				if (!this.getPrepared()) {
					for (var i = 0; i < aElements.length; i++) {

						var sTitle = aElements[i].getText ? aElements[i].getText() : aElements[i].getId();
						var bVisible = aElements[i].getVisible ? aElements[i].getVisible() : aElements[i].getParent().getVisible();

						if (bVisible === false) {
							this._mAvailableElements[aElements[i].getId()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aElements[i].getId(),
								visibilityType : "hide"
							};
						} else {
							this._mHiddenElements[aElements[i].getId()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aElements[i].getId(),
								visibilityType : "hide"
							};
						}
					}
					sap.ui.rta.controlAnalyzer.Base.prototype.prepare.apply(this);
				}
				return Promise.resolve();
			};

			/**
			 * @private
			 */
			Form.prototype._getSimpleFormElements = function(oElement) {
				var aElements = [];
				var oSimpleForm = this._getSimpleFormContainer(oElement);
				var aContent = oSimpleForm.getContent();
				aContent.forEach(function(oField) {
					if (oField instanceof sap.m.Label) {
						aElements.push(oField);
					}
				});
				return aElements;
			};

			/**
			 * @private
			 */
			Form.prototype._getSimpleFormContainer = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.SimpleForm")) {
					return oElement;
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.Form")
						|| ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer")
						|| ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement")) {
					return this._getSimpleFormContainer(oElement.getParent());
				}
			};

			/**
			 * @private
			 */
			Form.prototype._hasStableIds = function(oElement) {
				// simple form and all elements in content aggregation have stable ids
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.SimpleForm") && FlexUtils.checkControlId(oElement)) {
					var bHasAnyChildUnstableId = oElement.getContent().some(function(oChild) {
						var bHasUnstableId = !FlexUtils.checkControlId(oChild);
						return bHasUnstableId;
					});
					return !bHasAnyChildUnstableId;
				}
			};

			/**
			 * @private
			 */
			Form.prototype._determineGroupIndex = function(oElement) {
				var iIndex = 0;
				if (oElement.getMetadata().getName() === "sap.ui.layout.form.FormContainer") {
					var aContent = this._getSimpleFormContainer(oElement).getContent();
					var iStart = -1;
					var oTitle = oElement.getTitle();
					if (oTitle !== null) {
						aContent.some(function(oField, index) {
							if (oField === oTitle) {
								iStart = index;
							}
							if (iStart >= 0 && index > iStart) {
								if (oField instanceof sap.ui.core.Title) {
									iIndex = index;
									return true;
								}
							}
						});
						iIndex = (!iIndex) ? aContent.length : iIndex;
					}
				}
				return iIndex;
			};

			/**
			 * @private
			 */
			Form.prototype._determineIndexOfFormElement = function(oFormElement, bOffset) {
				var aContent = oFormElement.getParent().getAggregation("formElements");

				var iIndex;
				aContent.some(function(oContent, index) {
					if (oContent === oFormElement) {
						iIndex = index;
						return true;
					}
				});
				iIndex = (bOffset) ? iIndex + 1 : iIndex;
				return iIndex;
			};

			/**
			 * @private
			 */
			Form.prototype._getStableElementForCommand = function(oElement) {
				var oStableElement;
				if (oElement.getMetadata().getName() === "sap.ui.layout.form.FormContainer") {
					oStableElement = oElement.getTitle();
				} else if (oElement.getMetadata().getName() === "sap.ui.layout.form.FormElement") {
					oStableElement = oElement.getLabel();
				}
				return oStableElement;
			};

			/**
			 * @override
			 */
			Form.prototype.mapSpecificChangeData = function(sType, mSpecificChangeData) {
				var mResult;
				switch (sType) {
					case "Add" :
						mResult = this._mapAddSpecificChangeData(sType, mSpecificChangeData);
						break;
					default :
						mResult = this.prototype.mapSpecificChangeData(sType, mSpecificChangeData);
						break;
				}
				return mResult;
			};

			/**
			 * @private
			 */
			Form.prototype._mapAddSpecificChangeData = function(sType, mSpecificChangeData) {
				if (mSpecificChangeData.changeType === "addSimpleFormGroup") {
					mSpecificChangeData.groupLabel = mSpecificChangeData.labels[0];
					delete mSpecificChangeData.labels;
				}
				return mSpecificChangeData;
			};

			Form.prototype.isHideable = function(oElement) {
				var bInstance = (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement") || ElementUtil
						.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer"));
				return (bInstance && !this.isMandatory(oElement));
			};

			return Form;

		}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/Form.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.ObjectPage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.ObjectPage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/ObjectPage",
		['sap/ui/rta/controlAnalyzer/Base', 'sap/ui/rta/Utils', 'sap/ui/dt/ElementUtil', 'sap/ui/core/StashedControlSupport'],
		function(Base, Utils, ElementUtil, StashedControlSupport) {
			"use strict";

			/**
			 * Constructor for a new ObjectPage. Do not instantiate this class directly! Instead use the
			 * ControlAnalyzerFactory.
			 *
			 * @class Context - controller for flexibility changes
			 * @extends sap.ui.base.ManagedObject
			 *
			 * @author SAP SE
			 * @version 1.44.4
			 *
			 * @constructor
			 * @private
			 * @since 1.34
			 * @alias sap.ui.rta.ObjectPage
			 * @augments sap.ui.rta.controlAnalyzer.Base
			 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var ObjectPage = Base.extend("sap.ui.rta.controlAnalyzer.ObjectPage", {
				metadata : {
					library : "sap.ui.rta"
				}
			});
			
			/**
			 * @override
			 */
			ObjectPage.prototype.setControl = function(oControl) {
				var oObjectPageLayout = Utils.getClosestTypeForControl(oControl, "sap.uxap.ObjectPageLayout");
				this.setProperty("control", oObjectPageLayout, true);
				this.setProperty("selectedControl", oControl, true);
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.getSelectedBlock = function(oControl) {
				return Utils.findSupportedBlock(oControl, ["sap.uxap.ObjectPageLayout"]);
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.getClosestType = function(oControl) {
				return Utils.getClosestTypeForControl(oControl, "sap.uxap.ObjectPageLayout");
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.getControlsFieldCollection = function(oControl) {
				throw new Error('getControlsFieldCollection not yet implemented in ObjectPage');
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.createChangeData = function(oControl, oCurrentSelectedBlock, bHideControl, oSelectedControl) {
				var mChangeData = {};
				var oBindingContextObject = oControl.getBindingContext().getObject();
				var sControldId = oBindingContextObject.controlId
						? oBindingContextObject.controlId
						: oBindingContextObject.fieldLabel;
		
				var oObjectPage = sap.ui.getCore().byId(sControldId);
				var bControlExists = !!oObjectPage;

				var fnCreateChangeEvent = function() {
					if (bControlExists) {
						if (oBindingContextObject.visibilityType === "hide") {
							mChangeData = {
									controlId : sControldId,
									changeType : bHideControl ? "hideControl" : "unhideControl"
							};
						} else if (oBindingContextObject.visibilityType === "stash") {
							var aSections = Utils.getObjectPageSections(oCurrentSelectedBlock);
							var iTargetIndex = Utils.determineTargetIndex(oSelectedControl, oCurrentSelectedBlock, aSections, 1);

							mChangeData = {
									controlId : sControldId,
									changeType : bHideControl ? "stashControl" : "unstashControl",
									parentAggregationName : "sections",
									iTargetIndex : iTargetIndex
							};
						}
					}
					return mChangeData;
				};

				return new Promise(function(resolve, reject) {
					resolve(fnCreateChangeEvent());
				});

			};

			/**
			 * @override
			 */
			ObjectPage.prototype.findVisibleAndBoundFieldsAndLabelNames = function(oControl) {

				var mVisibleAndBoundFields = [];
				var mFieldsAndLabelNames = {};
				var mFieldsAndBoundPropertyName = {};
				var aElements = ElementUtil.findAllPublicElements(oControl);

				var i = 0;
				for (i = 0; i < aElements.length; i++) {
					var oObHeaderElement = aElements[i];
					if (oObHeaderElement instanceof sap.m.ObjectAttribute) {
						mVisibleAndBoundFields.push(oObHeaderElement.getBindingPath("text"));
					}
				}

				return {
					visibleAndBoundFields : mVisibleAndBoundFields,
					fieldsAndLabelNames : mFieldsAndLabelNames,
					fieldsAndBoundPropertyName : mFieldsAndBoundPropertyName
				};
			};

			ObjectPage.prototype.prepare = function() {
				var oControl = this.getControl();
				var aSections = Utils.getObjectPageSections(oControl);

				if (!this.getPrepared()) {
					for (var i = 0; i < aSections.length; i++) {
						
						var sTitle = aSections[i].getTitle ? aSections[i].getTitle() : aSections[i].getId();
						
						if (aSections[i].getStashed && (aSections[i].getStashed() || aSections[i].getVisible() === false)) {
							this._mAvailableElements[aSections[i].getId()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aSections[i].getId(),
								visibilityType: "stash"
							};
						} else if (aSections[i].getVisible && aSections[i].getVisible() === false) {
							this._mAvailableElements[aSections[i].getTitle()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aSections[i].getId(),
								visibilityType: "hide"
							};
						} else {
							this._mHiddenElements[aSections[i].getTitle()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aSections[i].getId(),
								visibilityType: "hide"
							};
						}
					}
					sap.ui.rta.controlAnalyzer.Base.prototype.prepare.apply(this);
				}
				return Promise.resolve();
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.checkTargetZone = function(oParentElement, sAggregationName, oMovedElement) {
				if (ElementUtil.isInstanceOf(oMovedElement, "sap.uxap.ObjectPageSection")) {
					if (ElementUtil.isInstanceOf(oParentElement, "sap.uxap.ObjectPageLayout")) {
						if (oMovedElement.getParent() === oParentElement && sAggregationName === "sections") {
							return true;
						}
					}
				}
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.isHideable = function(oElement) {
				return (ElementUtil.isInstanceOf(oElement, "sap.uxap.ObjectPageSection") && !this.isMandatory(oElement));
			};

			return ObjectPage;

		}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/ObjectPage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.SmartForm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.SmartForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/SmartForm",['sap/ui/rta/controlAnalyzer/Base', 'sap/ui/rta/Utils', 'sap/ui/dt/ElementUtil',
		'sap/ui/rta/ModelConverter', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/rta/model/ElementPreprocessor'],
		function(Base, Utils, ElementUtil, ModelConverter, MetadataAnalyser, ElementPreprocessing) {
			"use strict";

			/**
			 * Constructor for a new change controller for the SmartForm. Do not instantiate this class directly! Instead use
			 * the ControlAnalyzerFactory.
			 *
			 * @class Context - controller for flexibility changes
			 * @extends sap.ui.base.ManagedObject
			 * @author SAP SE
			 * @version 1.44.4
			 * @constructor
			 * @private
			 * @since 1.34
			 * @alias sap.ui.rta.controlAnalyzer.SmartForm
			 * @augments sap.ui.rta.controlAnalyzer.Base
			 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var SmartForm = Base.extend("sap.ui.rta.controlAnalyzer.SmartForm", {
				metadata : {
					library : "sap.ui.rta",
					properties : {
						customFieldAvailable : {
							type : "object",
							defaultValue : false
						}
					}
				}
			});

			SmartForm.rules = {};
			SmartForm.rules["EXCLUDEVISIBLERULE"] = "excludeVisibleElements";
			SmartForm.rules["EXCLUDEIGNOREDFIELDS"] = "excludeIgnoredFields";

			/**
			 * @override
			 */
			SmartForm.prototype.init = function() {
				var that = this;
				this._mVisibleAndBoundFields;
				this._mRegisteredRules = {};
				this._mRegisteredRules[SmartForm.rules.EXCLUDEVISIBLERULE] = function(oElement) {
					if (!that._mVisibleAndBoundFields) {
						that._mVisibleAndBoundFields = that.findBoundFields(false);
					}
					return that._retrieveElementFromMap(that._mVisibleAndBoundFields, oElement);
				};
				this._mRegisteredRules[SmartForm.rules.EXCLUDEIGNOREDFIELDS] = function(oElement) {
					var aIgnoredFields = that._getIgnoredFields();
					//Complex properties are divided by '.'
					if (oElement.isComplexProperty) {
						return aIgnoredFields.indexOf(oElement.complexTypePropertyName + "." + oElement.name) !== -1;
					}
					return aIgnoredFields.indexOf(oElement.name) !== -1;
				};
			};
			/**
			 * @override
			 */
			SmartForm.prototype.setControl = function(oControl) {
				var oSmartForm = Utils.getClosestTypeForControl(oControl, "sap.ui.comp.smartform.SmartForm");
				this.setProperty("control", oSmartForm, true);
				this.setProperty("selectedControl", oControl, true);
			};

			/**
			 * @override
			 */
			SmartForm.prototype.getFlexChangeType = function(sType, oElement) {

				var sFlexChangeType;
				switch (sType) {
					case "add" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
							sFlexChangeType = "addGroup";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
							sFlexChangeType = "addFields";
						}
						break;
					case "rename" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
							sFlexChangeType = "renameField";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
							sFlexChangeType = "renameGroup";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
							sFlexChangeType = "renameField";
						}
						break;
					default :
						break;
				}
				return sFlexChangeType;
			};

			/**
			 * @override
			 */
			SmartForm.prototype.mapSpecificChangeData = function(sType, mSpecificChangeData) {
				var mResult;
				switch (sType) {
					case "Add" :
						mResult = this._mapAddSpecificChangeData(sType, mSpecificChangeData);
						break;
					case "Rename" :
						mResult = this._mapRenameSpecificChangeData(sType, mSpecificChangeData);
						break;
					default :
						mResult = this.prototype.mapSpecificChangeData(sType, mSpecificChangeData);
						break;
				}
				return mResult;
			};

			/**
			 * @override
			 */
			SmartForm.prototype.getRenamableControl = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
					return oElement.getTitle();
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					return oElement.getLabel();
				}
			};

			SmartForm.prototype.getLabel = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					return oElement.getTitle();
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
					return oElement.getLabel();
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					return oElement.getLabelText();
				}
			};

			SmartForm.prototype.getLabelBinding = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					return oElement.getBindingInfo("title");
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")
						|| ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					return oElement.getBindingInfo("label");
				}
			};

			SmartForm.prototype.resumeLabelBinding = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					var oBinding = oElement.getBinding("title");
					if (oBinding) {
						oBinding.resume();
					}
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")
						|| ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					var oBinding = oElement.getBinding("label");
					if (oBinding) {
						oBinding.resume();
					}
				}
			};

			SmartForm.prototype._mapAddSpecificChangeData = function(sType, mSpecificChangeData) {
				if (mSpecificChangeData.changeType === "addFields") {
					mSpecificChangeData.fieldLabels = mSpecificChangeData.labels;
					delete mSpecificChangeData.labels;

				} else if (mSpecificChangeData.changeType === "addGroup") {
					mSpecificChangeData.groupLabel = mSpecificChangeData.labels[0];
					delete mSpecificChangeData.labels;
				}
				return mSpecificChangeData;
			};

			SmartForm.prototype._mapRenameSpecificChangeData = function(sType, mSpecificChangeData) {

				var oElement = mSpecificChangeData.element;

				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					mSpecificChangeData.fieldLabel = mSpecificChangeData.value;
					mSpecificChangeData.labelProperty = "title";
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
					mSpecificChangeData.groupLabel = mSpecificChangeData.value;
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					mSpecificChangeData.fieldLabel = mSpecificChangeData.value;
					mSpecificChangeData.labelProperty = "label";
				}
				delete mSpecificChangeData.value;
				delete mSpecificChangeData.element;

				return mSpecificChangeData;

			};

			/**
			 * @override
			 */
			SmartForm.prototype.getSelectedBlock = function(oControl) {
				return Utils.findSupportedBlock(oControl, ["sap.ui.comp.smartform.Group"]);
			};

			/**
			 * @override
			 */
			SmartForm.prototype.getClosestType = function(oControl) {
				return Utils.getClosestTypeForControl(oControl, "sap.ui.comp.smartform.SmartForm");
			};

			/**
			 * @override
			 */
			SmartForm.prototype.createChangeData = function(oControl, oCurrentSelectedBlock, bHideControl, oSelectedControl) {
				var mChangeData = {};
				var oBindingContextObject = oControl.getBindingContext().getObject();
				var sControlId;
				if (oBindingContextObject.controlId) {
					sControlId = oBindingContextObject.controlId;
				} else {
					if (oBindingContextObject.complexTypePropertyName) {
						sControlId = oCurrentSelectedBlock.getId()
							+ "_" + oBindingContextObject.entityName
							+ "_" + oBindingContextObject.complexTypePropertyName
							+ "_" + oBindingContextObject.name;
					} else {
						sControlId = oCurrentSelectedBlock.getId()
							+ "_" + oBindingContextObject.entityName
							+ "_" + oBindingContextObject.name;
					}
				}
				var oSmartField = sap.ui.getCore().byId(sControlId);
				var bControlExists = !!oSmartField;

				var fnCreateChangeEvent = function() {
					if (bControlExists) {
						mChangeData = {
							controlId : sControlId,
							changeType : bHideControl ? "hideControl" : "unhideControl"
						};
					} else {
						// create new control
						var sBindingPath = oBindingContextObject.complexTypePropertyName ? oBindingContextObject.complexTypePropertyName + "/"
								+ oBindingContextObject.name : oBindingContextObject.name;
						if (oCurrentSelectedBlock) {
							var oGroup;
							if (oCurrentSelectedBlock instanceof sap.ui.comp.smartform.Group) {
								oGroup = oCurrentSelectedBlock;
							} else {
								oGroup = oCurrentSelectedBlock.getGroups()[0];
							}
							var aGroupElements = oGroup.getGroupElements();
							var iTargetIndex = Utils.determineTargetIndex(oSelectedControl, oCurrentSelectedBlock, aGroupElements, -1);

							mChangeData = {
								unhide : bControlExists,
								newControlId : sControlId,
								jsType : "sap.ui.comp.smartfield.SmartField",
								selectorId : oGroup.getId(),
								index : iTargetIndex,
								valueProperty : "value",
								changeType : "addField",
								fieldLabel : oBindingContextObject.fieldLabel,
								fieldValue : sBindingPath
							};
						}
					}
					return mChangeData;
				};

				if (bHideControl && !this.isHideable(oSmartField)) {
					return Utils.openRemoveElementConfirmationDialog(oSmartField).then(function(bConfirmed) {
						if (bConfirmed) {
							return fnCreateChangeEvent();
						} else {
							return null;
						}
					});
				} else {
					return new Promise(function(resolve, reject) {
						resolve(fnCreateChangeEvent());
					});
				}

			};

			/**
			 * @override
			 */
			SmartForm.prototype.findChangedFieldLabels = function() {
				if (!this._mFieldsAndLabelNames) {
					this._mFieldsAndLabelNames = this._findChangedFieldLabels();
				}
				return this._mFieldsAndLabelNames;
			};

			SmartForm.prototype._findChangedFieldLabels = function() {
				var mFieldsAndLabelNames = {};
				var mInvisibleBoundFields = this.findBoundFields(true);
				var mVisibleBoundFields = this.findBoundFields(false);
				var mAllBoundFields = jQuery.extend( {}, mInvisibleBoundFields, mVisibleBoundFields );
				for (var sPathValue in mAllBoundFields) {
					var oField = sap.ui.getCore().byId(mAllBoundFields[sPathValue]);
					var sText = Utils.getLabelForElement(oField);
					mFieldsAndLabelNames[sPathValue] = sText;
				}
				return mFieldsAndLabelNames;
			};

			/**
			 * Get all visible or invisible bound fields of the given smart form instance
			 * inside the all groupElements
			 * @override
			 */
			SmartForm.prototype.findBoundFields = function(bOnlyInvisibleFields) {
				// TODO: can be control specific (not generic)
				var oSmartForm = this.getControl();
				var aGroups = oSmartForm.getGroups();
				var oFieldData = {
						elementIds : {},
						boundFields : {}
				};
				var i, j, k = 0;
				for (i = 0; i < aGroups.length; i++) {
					var aElements = aGroups[i].getGroupElements();
					for (j = 0; j < aElements.length; j++) {
						var oFormElement = aElements[j];
						var aFields = oFormElement.getFields();
						for (k = 0; k < aFields.length; k++) {
							var oField = aFields[k];
							if (oField.mBindingInfos) {
								for ( var oInfo in oField.mBindingInfos) {
									var sPath = Utils.getPathFromBindingInfo(oInfo, oField.mBindingInfos);
									var oParent = oField.getParent();
									if (oParent && sPath) {
										//only groupElements which are invisible
										if (bOnlyInvisibleFields && !oFormElement.getVisible()) {
											this._addBoundFields(oFieldData, sPath, oField);
											continue;
										}
										//only groupElements which are visible
										if (oFormElement.getVisible() && !bOnlyInvisibleFields) { // existing domref
											this._addBoundFields(oFieldData, sPath, oField);
										}
									}
								}
							}
						}
					}
				}

				return oFieldData.boundFields;
			};


			SmartForm.prototype._addBoundFields = function(oFieldData, sPath, oField) {
				var oParent = oField.getParent();
				//check if we already found a binding path
				if (oFieldData.boundFields[sPath]) {
					//if so we use the groupElement with only one field
					if (oParent.getFields().length === 1) {
						oFieldData.boundFields[sPath] = oParent.getId();
					//if the groupElement has already more than one field we try to use the previous groupelement.
					} else if (oFieldData.elementIds[oField.getId()] && oFieldData.elementIds[oField.getId()].getFields() === 1) {
						oFieldData.boundFields[sPath] = oParent.getId();
					}
				} else {
					oFieldData.boundFields[sPath] = oParent.getId();
				}
				 oFieldData.elementIds[oField.getId()] = oParent;
			};


			/**
			 * Checks if a custom field is available
			 *
			 * @param {sap.ui.core.Control}
			 *          oControl Currently selected control
			 * @return {Boolean} true if custom fields are available, else false
			 * @private
			 */
			SmartForm.prototype._prepareCustomFields = function() {
				var that = this;
				return Utils.isCustomFieldAvailable(this.getSelectedControl()).then(function(oResult) {
					if (oResult) {
						that.setCustomFieldAvailable(oResult);
					}
					return oResult;
				});
			};

			/**
			 * Read ignored fields from smart form and parse CSV into array
			 *
			 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm smart form instance
			 * @private
			 * @returns {Array} Returns a list of ignored fields or empty.
			 */
			SmartForm.prototype._getIgnoredFields = function() {
				var oSmartForm = this.getControl();
				if (oSmartForm) {
					var sCsvIgnoredFields = oSmartForm.getIgnoredFields();
					if (sCsvIgnoredFields) {
						var aIgnoredFields = sCsvIgnoredFields.split(",");
						return aIgnoredFields;
					}
				}
				return [];
			};

			/**
			 * Checks if a custom field is available
			 *
			 * @param {sap.ui.core.Control}
			 *          oControl Currently selected control
			 * @return {Boolean} true if custom fields are available, else false
			 * @private
			 */
			SmartForm.prototype.getCustomFieldAvailable = function() {
				if (!this.getPrepared()) {
					this._raiseIllegalState();
				}
				return this.getProperty("customFieldAvailable");
			};

			/**
			 * Getter for field model which contains only the invisible fields
			 *
			 * @param {sap.ui.core.Control}
			 *          oControl Currently selected control
			 * @return field model with invisible fields
			 * @private
			 */
			SmartForm.prototype.getCustomizeControlModel = function(oControl, bFiltered) {
				// TODO: Remove, old model
				var oClosestType = this.getClosestType(oControl);
				var vEntityType = oClosestType.getEntityType();

				if (vEntityType) {
					vEntityType = vEntityType.replace(/\s+/g, '').match(/([^,]+)/g);
				}

				if (!bFiltered) {
					return ModelConverter.getConvertedModelWithBoundAndRenamedLabels(oClosestType, vEntityType, this);
				} else {
					return ModelConverter.getConvertedModelWithBoundAndRenamedLabels(oClosestType, vEntityType, this).then(
							function(aElements) {
								return aElements.filter(function(mElement) {
									return !mElement.checked;
								});
							});
				}
			};

			/**
			 * @overwrite
			 */
			SmartForm.prototype.prepare = function() {
				if (!this.getPrepared()) { // prevent redundant preparation
					// 1. compute collection of fields that can be added to the control
					var fetchFieldsPromise = this._getFieldFetcherPromise();
					// 2. compute whether or not it's possible to ad custom fields to the control
					var fnIsCustomFieldAvailable = this._prepareCustomFields();

					return Promise.all([fetchFieldsPromise, fnIsCustomFieldAvailable]);
				} else {
					return new Promise().resolve();
				}
			};

			/**
			 * @return a Promise to compute collection of adable and not available fields
			 */
			SmartForm.prototype._getFieldFetcherPromise = function() {
				var that = this;
				return Utils.fetchODataPropertiesFor(this.getControl().getModel()).then(function(mProperties) {
					var sEntityTypeName = that.getBoundEntityType();
					Object.keys(mProperties).forEach(function(sEntityType) {
						mProperties[sEntityType].forEach(function(oElement) {
							var oChangedElement = that._applyChanges(oElement);
							var bFiltered = that._applyRules(oChangedElement);
							if (!bFiltered && oChangedElement.entityName === sEntityTypeName) {
								that._mAvailableElements[oChangedElement.name] = oChangedElement;
							} else {
								that._mHiddenElements[oChangedElement.name] = oChangedElement;
							}
						});
					});
					// filter properties, that are bound in the same combined groupElement
					that._mAvailableElements = Object.keys(that._mAvailableElements).reduce(function(mAvailable, sElement){
						var oElement = that._mAvailableElements[sElement];

						if (!oElement.controlId
							|| !Object.keys(mAvailable).some(function(sKey){
									var oPreviousElement = mAvailable[sKey];
									return oPreviousElement.controlId === oElement.controlId;
								})
							) {
							mAvailable[sElement] = oElement;
						}
						return mAvailable;
					}, {});
					sap.ui.rta.controlAnalyzer.Base.prototype.prepare.apply(that);
				});
			};

			/**
			 * @param oElement
			 *          a smart field
			 * @return true if field does not satisfy all rules to be a candidate to be added to the control, false if all
			 *         rules are satisfied
			 */
			SmartForm.prototype._applyRules = function(oElement) {
				var mFnRules = this._getRules();
				var bFiltered = false;
				for ( var sRule in mFnRules) {
					var fnRule = mFnRules[sRule];
					if (fnRule(oElement)) {
						bFiltered = true;
						break;
					}
				}
				return bFiltered;
			};

			/**
			 * Applies all static changes to the field originated in the model meta data
			 *
			 * @private
			 * @param oElement
			 *          a smart field
			 * @return changed oElement
			 */
			SmartForm.prototype._applyChanges = function(oElement) {
				var oChangedElement = oElement;
				var aFnChanges = this._getChanges();
				aFnChanges.forEach(function(fnChange) {
					oChangedElement = fnChange(oChangedElement);
				});
				return oChangedElement;
			};

			/**
			 * Returns the registered rules for filtering the available fields
			 *
			 * @return a map of name, rule pairs (every rule has a name
			 */
			SmartForm.prototype._getRules = function() {
				return this._mRegisteredRules;
			};

			/**
			 * Get the bound entityType of the selecected control. In case of a group element
			 * we use its parent group as this is where fields get added to.
			 */
			SmartForm.prototype.getBoundEntityType = function() {
				var oControl = this.getSelectedControl();

				if (ElementUtil.isInstanceOf(oControl, "sap.ui.comp.smartform.GroupElement")) {
					oControl = oControl.getParent();
				}

				if (oControl.getBindingContext() && oControl.getModel()) {
					return Utils.getBoundEntityType(oControl);
				}
			};

			SmartForm.prototype._retrieveElementFromMap = function(mElements, oElement) {
				var oResultElement;
				if (oElement.isComplexProperty) {
					oResultElement = mElements[oElement.complexTypePropertyName + "/" + oElement.name];
				} else {
					oResultElement = mElements[oElement.name];
				}
				return oResultElement;
			};

			SmartForm.prototype._determineGroupIndex = function(oElement) {
				var iIndex = 0;
				if (oElement.getMetadata().getName() === "sap.ui.comp.smartform.Group") {
					var aGroups = oElement.getParent().getAggregation("formContainers");
					for (var i = 0; i < aGroups.length; i++) {
						if (aGroups[i].getId() === oElement.getId()) {
							iIndex = i + 1;
							break;
						}
					}
				}
				return iIndex;
			};

			/**
			 * Returns all modifying functions to be applied to the raw field definition
			 * 1. renamed field labels & 2. find already bound, but hidden fields
			 * @return an array of modifying functions
			 */
			SmartForm.prototype._getChanges = function() {
				var that = this;
				return [function(oElement) {
					var mChangedFieldLabels = that.findChangedFieldLabels(oElement);
					var oChangedElement = that._retrieveElementFromMap(mChangedFieldLabels, oElement);
					if (oChangedElement) {
						oElement["fieldLabel"] = oChangedElement;
					}
					return oElement;
				}, function(oElement) {
					var sControlId;
					if (!that._mBoundFields) {
						that._mBoundFields = that.findBoundFields(true);
					}
					if (oElement.isComplexProperty) {
						sControlId = that._mBoundFields[oElement.complexTypePropertyName + "/" + oElement.name];
					} else {
						sControlId = that._mBoundFields[oElement.name];
					}
					if (sControlId) {
						oElement["controlId"] = sControlId;
					}
					return oElement;
				}];
			};

			/**
			 * @override
			 */
			SmartForm.prototype.checkTargetZone = function(oParentElement, sAggregationName, oMovedElement) {
				var oSourceSmartForm = ElementUtil.getClosestElementOfType(oMovedElement, "sap.ui.comp.smartform.SmartForm");
				var oTargetSmartForm = ElementUtil.getClosestElementOfType(oParentElement, "sap.ui.comp.smartform.SmartForm");

				if (oSourceSmartForm === oTargetSmartForm) {
					return true;
				}
			};

			/**
			 * @override
			 */
			SmartForm.prototype.isMandatory = function(oElement) {
				var bMandatory = false;

				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					var aFields = oElement.getFields();
					for (var i = 0; i < aFields.length; i++) {
						var oGroupElement = aFields[i];
						if (ElementUtil.isInstanceOf(oGroupElement, "sap.ui.comp.smartfield.SmartField") && oGroupElement.getMandatory()) {
							// Break searching all SmartFields and get back on the
							// first found mandatory rendered SmartField
							bMandatory = true;
							break;
						}
					}
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
					var aGroupElements = oElement.getGroupElements();
					for (var j = 0; j < aGroupElements.length; j++) {
						return this.isMandatory(aGroupElements[j]);
					}
				}
				return bMandatory;
			};

			/**
			 * @override
			 */
			SmartForm.prototype.isHideable = function(oElement) {
				return ((ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement") || ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) && !this.isMandatory(oElement));
			};

			return SmartForm;

		}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/SmartForm.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.CreateContainer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Remove.
jQuery.sap.declare('sap.ui.rta.plugin.CreateContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/CreateContainer",[
	'sap/ui/dt/Plugin',
	'sap/ui/fl/Utils',
	'sap/ui/rta/Utils',
	'sap/ui/dt/OverlayRegistry'

], function(Plugin, FlexUtils, RtaUtils,  OverlayRegistry) {
	"use strict";

	/**
	 * Constructor for a new CreateContainer Plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The CreateContainer allows trigger CreateContainer operations on the overlay
	 * @extends sap.ui.dt.Plugin
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.CreateContainer
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var CreateContainer = Plugin.extend("sap.ui.rta.plugin.CreateContainer", /** @lends sap.ui.rta.plugin.CreateContainer.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * @private
	 */
	CreateContainer.prototype.getEffectiveDesignTimeMetadata = function(oOverlay) {
		return oOverlay.getDesignTimeMetadata();
	};

	CreateContainer.prototype._getParentOverlay = function(bSibling, oOverlay) {
		var oParentOverlay;
		if (bSibling) {
			oParentOverlay = oOverlay.getPublicParentElementOverlay();
		} else {
			oParentOverlay = oOverlay;
		}
		return oParentOverlay;
	};

	CreateContainer.prototype.getCreateAction = function(bSibling, oOverlay) {
		var oParentOverlay = this._getParentOverlay(bSibling, oOverlay);
		var oDesignTimeMetadata = this.getEffectiveDesignTimeMetadata(oParentOverlay);
		var aActions = oDesignTimeMetadata.getAggregationAction("createContainer", oOverlay.getElementInstance());
		return aActions[0];
	};

	CreateContainer.prototype.isCreateAvailable = function(bSibling, oOverlay) {
		return !!this.getCreateAction(bSibling, oOverlay);
	};

	CreateContainer.prototype.isCreateEnabled = function(bSibling, oOverlay) {
		var vAction = this.getCreateAction(bSibling, oOverlay);
		if (!vAction) {
			return false;
		}

		if (vAction.isEnabled && typeof vAction.isEnabled === "function") {
			var fnIsEnabled = vAction.isEnabled;
			return fnIsEnabled.call(null, oOverlay.getElementInstance());
		} else {
			return true;
		}
	};

	CreateContainer.prototype._getCreatedContainerId = function(vAction, sNewControlID) {
		var sId = sNewControlID;
		if (vAction.getCreatedContainerId && typeof vAction.getCreatedContainerId === "function") {
			var fnMapToRelevantControlID = vAction.getCreatedContainerId;
			sId = fnMapToRelevantControlID.call(null, sNewControlID);

		}
		return OverlayRegistry.getOverlay(sId);
	};

	CreateContainer.prototype._determineIndex = function(oParentElement, oSiblingElement, sAggregationName, fnGetIndex) {
		return RtaUtils.getIndex(oParentElement, oSiblingElement, sAggregationName, fnGetIndex);
	};

	CreateContainer.prototype._getText = function(vAction, oDesignTimeMetadata, sText) {
		var sContainerTitle = oDesignTimeMetadata.getLibraryText(vAction.containerTitle);
		var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		return oTextResources.getText(sText, sContainerTitle);
	};

	CreateContainer.prototype.getCreateContainerText = function(bSibling, oOverlay) {
		var vAction = this.getCreateAction(bSibling, oOverlay);
		var oParentOverlay = this._getParentOverlay(bSibling, oOverlay);
		var oDesignTimeMetadata = this.getEffectiveDesignTimeMetadata(oParentOverlay);
		var sText = "CTX_CREATE_CONTAINER";
		return this._getText(vAction, oDesignTimeMetadata, sText);
	};

	CreateContainer.prototype._getContainerTitle = function(vAction, oDesignTimeMetadata) {
		var sText = "TITLE_CREATE_CONTAINER";
		return this._getText(vAction, oDesignTimeMetadata, sText);
	};

	CreateContainer.prototype.handleCreate = function(bSibling, oOverlay) {
		var vAction = this.getCreateAction(bSibling, oOverlay);
		var oParentOverlay = this._getParentOverlay(bSibling, oOverlay);
		var oDesignTimeMetadata = this.getEffectiveDesignTimeMetadata(oParentOverlay);
		var oTargetElement = oParentOverlay.getElementInstance();
		var oView = FlexUtils.getViewForControl(oTargetElement);

		var oSiblingElement;
		if (bSibling) {
			oSiblingElement = oOverlay.getElementInstance();
		}

		var sNewControlID = oView.createId(jQuery.sap.uid());
		var fnGetIndex = oDesignTimeMetadata.getAggregation(vAction.aggregation).getIndex;
		var iIndex = this._determineIndex(oTargetElement, oSiblingElement, vAction.aggregation, fnGetIndex);

		var oCommand = this.getCommandFactory().getCommandFor(oTargetElement, "createContainer", {
			newControlId : sNewControlID,
			label : this._getContainerTitle(vAction, oDesignTimeMetadata),
			index : iIndex
		}, oDesignTimeMetadata);

		this.fireElementModified({
			"command" : oCommand
		});

		var oNewContainerOverlay  = this._getCreatedContainerId(vAction, sNewControlID);
		oNewContainerOverlay.setSelected(true);

		return oNewContainerOverlay;
	};

	return CreateContainer;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/CreateContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.MultiSelection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.dt.plugin.MultiSelection.
jQuery.sap.declare('sap.ui.rta.plugin.MultiSelection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/MultiSelection",['sap/ui/dt/Plugin', 'sap/ui/dt/ElementUtil', 'sap/ui/rta/Utils'],
		function(Plugin, ElementUtil, RTAUtils) {
			"use strict";

			/**
			 * Constructor for a new MultiSelection.
			 * 
			 * @param {string}
			 *          [sId] id for the new object, generated automatically if no id is given
			 * @param {object}
			 *          [mSettings] initial settings for the new object
			 * 
			 * @class The MultiSelection allows to select the Overlays with a mouse click
			 * @extends sap.ui.dt.Plugin
			 * 
			 * @author SAP SE
			 * @version 1.33.0-SNAPSHOT
			 * 
			 * @constructor
			 * @private
			 * @since 1.33
			 * @alias sap.ui.rta.plugin.MultiSelection
			 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var MultiSelection = Plugin.extend("sap.ui.rta.plugin.MultiSelection", /** @lends sap.ui.dt.plugin.MultiSelection.prototype */
			{
				metadata : {
					library : "sap.ui.rta",
					properties : {
						multiSelectionTypes : {
							type : "string[]"
						}
					}
				}
			});

			/**
			 * @override
			 */
			MultiSelection.prototype.init = function() {
				Plugin.prototype.init.apply(this, arguments);
				this._fnKeyDown = this._onKeyDown.bind(this);
				this._fnKeyUp = this._onKeyUp.bind(this);

				window.addEventListener("keydown", this._fnKeyDown);
				window.addEventListener("keyup", this._fnKeyUp);

			};

			/**
			 * @override
			 */
			MultiSelection.prototype.exit = function() {
				Plugin.prototype.exit.apply(this, arguments);

				window.removeEventListener("keydown", this._fnKeyDown);
				window.removeEventListener("keyup", this._fnKeyUp);

			};

			/**
			 * @override
			 */
			MultiSelection.prototype.setDesignTime = function(oDesignTime) {
				this._oDesignTime = oDesignTime;

				if (this._oDesignTime) {
					this._oDesignTime.detachSelectionChange(this._onDesignTimeSelectionChange, this);
				}
				Plugin.prototype.setDesignTime.apply(this, arguments);

				if (oDesignTime) {
					oDesignTime.attachSelectionChange(this._onDesignTimeSelectionChange, this);
				}
			};

			/**
			 * Event handler for key down events. Sets DesignTime SelectionMode to multi if cmd key was used.
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent event object
			 * @private
			 */
			MultiSelection.prototype._onKeyDown = function(oEvent) {
				// left or right cmd / ctrl key
				if (sap.ui.Device.os.name === sap.ui.Device.os.OS.WINDOWS) {
					if (oEvent.keyCode === 17) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Multi);
					}
				} else if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH) {
					if (oEvent.keyCode === 91 || oEvent.keyCode === 93) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Multi);
					}
				}
			};

			/**
			 * Event handler for key up events. Sets DesignTime SelectionMode to single if cmd key was used.
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent event object
			 * @private
			 */
			MultiSelection.prototype._onKeyUp = function(oEvent) {
				if (sap.ui.Device.os.name === sap.ui.Device.os.OS.WINDOWS) {
					if (oEvent.keyCode === 17) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Single);
					}
				} else if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH) {
					if (oEvent.keyCode === 91 || oEvent.keyCode === 93) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Single);
					}
				}
			};

			/**
			 * React on selection change from designTime
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent fired
			 * @override
			 */
			MultiSelection.prototype._onDesignTimeSelectionChange = function(oEvent) {
				if (this._oDesignTime.getSelectionMode() === sap.ui.dt.SelectionMode.Single) {
					return;
				}
				
				var aMultiSelectionTypes = this.getMultiSelectionTypes();
				var bMultiSelectisValid = true;
				var oCurrentSelectedOverlay = oEvent.getParameter("selection")[oEvent.getParameter("selection").length - 1];
				var aSelections = this._oDesignTime.getSelection();
				if (aSelections && aSelections.length === 1) {
					oCurrentSelectedOverlay.setSelected(true);
					return;
				}
				if (!oCurrentSelectedOverlay || this._oDesignTime.getSelectionMode() === sap.ui.dt.SelectionMode.Single) {
					return;
				}
				aMultiSelectionTypes.forEach(function(sType, iIndex, aArray) {
					aSelections.forEach(function(oSelecedElement) {
						if (!ElementUtil.isInstanceOf(oSelecedElement.getElementInstance(), sType)) {
							bMultiSelectisValid = false;
						}
					});
					oCurrentSelectedOverlay.setSelected(bMultiSelectisValid);
				});
			};

			return MultiSelection;
		}, /* bExport= */true);
}; // end of sap/ui/rta/plugin/MultiSelection.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Remove') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Remove.
jQuery.sap.declare('sap.ui.rta.plugin.Remove'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Remove",[
	'sap/ui/dt/Plugin',
	'sap/ui/rta/Utils',
	'sap/ui/rta/command/CompositeCommand'

], function(Plugin, Utils, CompositeCommand) {
	"use strict";

	/**
	 * Constructor for a new Remove Plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Remove allows trigger remove operations on the overlay
	 * @extends sap.ui.dt.Plugin
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.Remove
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Remove = Plugin.extend("sap.ui.rta.plugin.Remove", /** @lends sap.ui.rta.plugin.Remove.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * Register browser event for an overlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Remove.prototype.registerElementOverlay = function(oOverlay) {
		oOverlay.attachBrowserEvent("keydown", this._onKeyDown, this);
	};

	/**
	 * @private
	 */
	Remove.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @private
	 */
	Remove.prototype._getRemoveAction = function(oOverlay) {
		return this._getEffectiveDesignTimeMetadata(oOverlay).getAction("remove", oOverlay.getElementInstance());
	};

	/**
	 * Checks if remove is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Remove.prototype.isRemoveAvailable = function(oOverlay) {
		return !!this._getRemoveAction(oOverlay);
	};

	/**
	 * Checks if remove is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Remove.prototype.isRemoveEnabled = function(oOverlay) {
		var oAction = this._getRemoveAction(oOverlay);
		if (!oAction) {
			return false;
		}

		if (typeof oAction.isEnabled !== "undefined") {
			if (typeof oAction.isEnabled === "function") {
				return oAction.isEnabled(oOverlay.getElementInstance());
			} else {
				return oAction.isEnabled;
			}
		}
		return true;
	};

	/**
	 * @private
	 */
	Remove.prototype._getConfirmationText = function(oOverlay) {
		var oAction = this._getRemoveAction(oOverlay);
		if (oAction && oAction.getConfirmationText) {
			return oAction.getConfirmationText(oOverlay.getElementInstance());
		}
	};

	/**
	 * Detaches the browser events
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Remove.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachBrowserEvent("keydown", this._onKeyDown, this);
	};

	/**
	 * Handle keydown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Remove.prototype._onKeyDown = function(oEvent) {
		if (oEvent.keyCode === jQuery.sap.KeyCodes.DELETE) {
			oEvent.stopPropagation();
			this.removeElement();
		}
	};

	/**
	 * The selected (not the focused) element should be hidden!
	 *
	 * @private
	 */
	Remove.prototype.removeElement = function(aOverlays) {
		var aSelection;
		if (aOverlays){
			aSelection = aOverlays;
		} else {
			var oDesignTime = this.getDesignTime();
			aSelection = oDesignTime.getSelection();
		}

		if (aSelection.length > 0) {
			this._handleRemove( aSelection );
		}
	};

	Remove.prototype._getRemoveCommand = function(oElement, oRemovedElement, oDesignTimeMetadata) {
		return this.getCommandFactory().getCommandFor(oElement, "Remove", {
			removedElement : oRemovedElement
		}, oDesignTimeMetadata);
	};

	Remove.prototype._fireElementModified = function(oCompositeCommand) {
		if (oCompositeCommand.getCommands().length) {
			this.fireElementModified({
				"command" : oCompositeCommand
			});
		}
	};

	Remove.prototype._handleRemove = function(aSelectedOverlays) {
		var that = this;
		var aPromises = [];
		var oCompositeCommand = new CompositeCommand();

		aSelectedOverlays.forEach(function(oOverlay) {
			var oCommand;

			var oRemovedElement = oOverlay.getElementInstance();

			var oElement;
			var oDesignTimeMetadata = that._getEffectiveDesignTimeMetadata(oOverlay);
			if (oOverlay.isInHiddenTree()) {
				oElement = oOverlay.getPublicParentElementOverlay().getElementInstance();
			} else {
				oElement = oRemovedElement;
			}

			// TODO: enabled check is only needed, when called from the context menu
			if (that.isRemoveEnabled(oOverlay)) {
				var sConfirmationText = that._getConfirmationText(oOverlay);
				if (sConfirmationText) {
					aPromises.push(Utils.openRemoveConfirmationDialog(oRemovedElement, sConfirmationText).then(function(bConfirmed) {
						if (bConfirmed) {
							oCommand = that._getRemoveCommand(oElement, oRemovedElement, oDesignTimeMetadata);
							oCompositeCommand.addCommand(oCommand);
						}
					}));
				} else {
					oCommand = that._getRemoveCommand(oElement, oRemovedElement, oDesignTimeMetadata);
					oCompositeCommand.addCommand(oCommand);
				}
			}
		});

		// since Promise.all is always asynchronous, we want to call it only if at least one promise exists
		if (aPromises.length) {
			Promise.all(aPromises).then(function() {
				that._fireElementModified(oCompositeCommand);
			});
		} else {
			that._fireElementModified(oCompositeCommand);
		}
	};

	return Remove;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Remove.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Rename') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Rename.
jQuery.sap.declare('sap.ui.rta.plugin.Rename'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.DOMUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Rename",['jquery.sap.global', 'sap/ui/dt/Plugin', 'sap/ui/dt/ElementUtil', 'sap/ui/dt/OverlayUtil',
		'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/Utils', 'sap/ui/dt/DOMUtil'],
		function(jQuery, Plugin, ElementUtil, OverlayUtil, OverlayRegistry, Utils, DOMUtil) {
	"use strict";

	/**
	 * Constructor for a new Rename.
	 *
	 * @param {string}
	 *          [sId] id for the new object, generated automatically if no id is given
	 * @param {object}
	 *          [mSettings] initial settings for the new object
	 *
	 * @class The Rename allows to create a set of Overlays above the root elements and theire public children and manage
	 *        their events.
	 * @extends sap.ui.dt.Plugin
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.plugin.Rename
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Rename = Plugin.extend("sap.ui.rta.plugin.Rename", /** @lends sap.ui.rta.plugin.Rename.prototype */
	{
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				oldValue : "string"
			},
			associations : {},
			events : {
				/** Fired when renaming is possible */
				"editable" : {},

				/** Fired when renaming is switched off */
				"nonEditable" : {}
			}
		}
	});

	/**
	 * @override
	 */
	Rename.prototype.exit = function() {
		Plugin.prototype.exit.apply(this, arguments);

		if (this._$oEditableControlDomRef) {
			this._stopEdit();
		}

		clearTimeout(this._iStopTimeout);
	};

	/**
	 * @override
	 */
	Rename.prototype.setDesignTime = function(oDesignTime) {
		this._aSelection = [];
		var oOldDesignTime = this.getDesignTime();

		if (oOldDesignTime) {
			oOldDesignTime.detachSelectionChange(this._onDesignTimeSelectionChange, this);
		}
		Plugin.prototype.setDesignTime.apply(this, arguments);

		if (oDesignTime) {
			oDesignTime.attachSelectionChange(this._onDesignTimeSelectionChange, this);
			this._aSelection = oDesignTime.getSelection();
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._getEffectiveDesignTimeMetadata = function(oOverlay) {
		var oDesignTimeMetadata;
		if (oOverlay.isInHiddenTree()) {
			var oPublicParentAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
			if (oPublicParentAggregationOverlay) {
				oDesignTimeMetadata = oPublicParentAggregationOverlay.getDesignTimeMetadata();
			}
		} else {
			oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
		}
		return oDesignTimeMetadata;
	};

	/**
	 * @private
	 */
	Rename.prototype._getRenameAction = function(oOverlay) {
		var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(oOverlay);
		if (oDesignTimeMetadata && oDesignTimeMetadata.getAction) {
			return oDesignTimeMetadata.getAction("rename", oOverlay.getElementInstance());
		} else {
			return;
		}
	};

	/**
	 * Checks if rename is available for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Rename.prototype.isRenameAvailable = function(oOverlay) {
		var vRenameAction = this._getRenameAction(oOverlay);
		if (vRenameAction) {
			return true;
		} else {
			return false;
		}
	};

	/**
	 * Checks if rename is enabled for oOverlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @public
	 */
	Rename.prototype.isRenameEnabled = function(oOverlay) {
		var oAction = this._getRenameAction(oOverlay);
		if (!oAction) {
			return false;
		}

		if (typeof oAction.isEnabled !== "undefined") {
			if (typeof oAction.isEnabled === "function") {
				return oAction.isEnabled(oOverlay.getElementInstance());
			} else {
				return oAction.isEnabled;
			}
		}
		return true;
	};

	/**
	 * @override
	 */
	Rename.prototype.registerElementOverlay = function(oOverlay) {
		oOverlay.attachEvent("editableChange", this._manageClickEvent, this);

		if (this.isRenameAvailable(oOverlay)) {
			oOverlay.setEditable(true);
		}
	};

	/**
	 * @override
	 */
	Rename.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachEvent("editableChange", this._manageClickEvent, this);
		oOverlay.detachBrowserEvent("click", this._onClick, this);
	};

	/**
	 * @private
	 */
	Rename.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (this.isRenameEnabled(oOverlay)) {
			this.startEdit(oOverlay);
			oEvent.preventDefault();
		}
	};

	/**
	 * @override
	 */
	Rename.prototype._onDesignTimeSelectionChange = function(oEvent) {
		var that = this;
		var aSelection = oEvent.getParameter("selection");

		// merge all overlays from old and current selection together
		aSelection.forEach(function(oOverlay) {
			if (that._aSelection.indexOf(oOverlay) === -1) {
				that._aSelection.push(oOverlay);
			}
		});
		that._aSelection.forEach(this._manageClickEvent, this);
	};

	/**
	 * @override
	 */
	Rename.prototype._manageClickEvent = function(vEventOrElement) {
		var oOverlay = vEventOrElement.getSource ? vEventOrElement.getSource() : vEventOrElement;
		if (oOverlay.isSelected() && this.isRenameAvailable(oOverlay)) {
			oOverlay.attachBrowserEvent("click", this._onClick, this);
		} else {
			oOverlay.detachBrowserEvent("click", this._onClick, this);
		}
	};

	/**
	 * [startEdit description]
	 *
	 * @param {[type]}
	 *          oOverlay [description]
	 * @return {[type]} [description]
	 * @public
	 */
	Rename.prototype.startEdit = function(oOverlay) {

		this._oEditedOverlay = oOverlay;

		var oElement = oOverlay.getElementInstance();
		var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(this._oEditedOverlay);
		var vDomRef = oDesignTimeMetadata.getAction("rename", oElement).domRef;

		var oEditableControlDomRef = oDesignTimeMetadata.getAssociatedDomRef(oElement, vDomRef);

		this._$oEditableControlDomRef = jQuery(oEditableControlDomRef);

		var oEditableControlOverlay = sap.ui.dt.OverlayRegistry.getOverlay(oEditableControlDomRef.id) || oOverlay;

		var oWrapper = jQuery("<div class='sapUiRtaEditableField'></div>").appendTo(oEditableControlOverlay.$());
		this._$editableField = jQuery("<div contentEditable='true'></div>").appendTo(oWrapper);

		// if label is empty, set a preliminary dummy text at the control to get an overlay
		if (this._$oEditableControlDomRef.text() === "") {
			this._$oEditableControlDomRef.text("_?_");
			this._$editableField.text("");
		} else {
			this._$editableField.text(this._$oEditableControlDomRef.text());
		}

		DOMUtil.copyComputedStyles(this._$oEditableControlDomRef, this._$editableField);
		this._$editableField.children().remove();

		// TODO : for all browsers
		this._$editableField.css({
			"-moz-user-modify" : "read-write",
			"-webkit-user-modify" : "read-write",
			"-ms-user-modify" : "read-write",
			"user-modify" : "read-write",
			"text-overflow" : "clip",
			"margin-top" : parseInt(this._$editableField.css("margin-top"), 10) - 1 + "px",
			"margin-left" : parseInt(this._$editableField.css("margin-left"), 10) - 1 + "px"
		});

		this._$oEditableControlDomRef.css("visibility", "hidden");

		this._$editableField.one("focus", this._onEditableFieldFocus.bind(this));

		this._$editableField.on("blur", this._onEditableFieldBlur.bind(this));
		this._$editableField.on("keydown", this._onEditableFieldKeydown.bind(this));
		this._$editableField.on("dragstart", this._stopPropagation.bind(this));
		this._$editableField.on("drag", this._stopPropagation.bind(this));
		this._$editableField.on("dragend", this._stopPropagation.bind(this));

		this._$editableField.on("click", this._stopPropagation.bind(this));
		this._$editableField.on("mousedown", this._stopPropagation.bind(this));

		this._$editableField.focus();

		this.setOldValue(this._getCurrentEditableFieldText());
	};

	/**
	 * @private
	 */
	Rename.prototype._stopPropagation = function(oEvent) {
		oEvent.stopPropagation();
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldFocus = function(oEvent) {
		this._oEditedOverlay.setSelected(false);
		var el = oEvent.target;
		var range = document.createRange();
		range.selectNodeContents(el);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(range);
	};

	/**
	 * @private
	 */
	Rename.prototype._stopEdit = function(bRestoreFocus) {
		// exchange the dummy text at the label with the genuine empty text (see start_edit function)
		if (this._$oEditableControlDomRef.text() === "_?_") {
			this._$oEditableControlDomRef.text("");
		}

		this._oEditedOverlay.$().find(".sapUiRtaEditableField").remove();
		this._$oEditableControlDomRef.css("visibility", "visible");

		if (bRestoreFocus) {
			var oOverlay = this._oEditedOverlay;

			// timeout is needed because of invalidation (test on bounded fields)
			this._iStopTimeout = setTimeout(function() {
				oOverlay.setSelected(true);
				oOverlay.focus();
			}, 0);
		}

		delete this._$editableField;
		delete this._$oEditableControlDomRef;
		delete this._oEditedOverlay;
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldBlur = function(oEvent) {
		this._emitLabelChangeEvent();
		this._stopEdit();
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldKeydown = function(oEvent) {
		if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) {
			oEvent.preventDefault();

			this._emitLabelChangeEvent();
			this._stopEdit(true);
		} else if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
			oEvent.preventDefault();
			this._stopEdit(true);
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._emitLabelChangeEvent = function() {
		var sText = this._getCurrentEditableFieldText();
		if (this.getOldValue() !== sText) { //check for real change before creating a command
			this._$oEditableControlDomRef.text(sText);
			try {
				var oRenameCommand;
				var oElement;
				var oRenamedElement = this._oEditedOverlay.getElementInstance();
				var oDesignTimeMetadata = this._getEffectiveDesignTimeMetadata(this._oEditedOverlay);

				if (this._oEditedOverlay.isInHiddenTree()) {
					oElement = this._oEditedOverlay.getPublicParentElementOverlay().getElementInstance();
				} else {
					oElement = oRenamedElement;
				}

				oRenameCommand = this.getCommandFactory().getCommandFor(oElement, "rename", {
					renamedElement : oRenamedElement,
					newValue : sText
				}, oDesignTimeMetadata);
				this.fireElementModified({
					"command" : oRenameCommand
				});
			} catch (oError) {
				jQuery.sap.log.error("Error during rename : ", oError);
			}
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._getCurrentEditableFieldText = function() {
		return this._$editableField.text();
	};

	return Rename;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Rename.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Selection') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Selection.
jQuery.sap.declare('sap.ui.rta.plugin.Selection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Selection",[
	'sap/ui/dt/Plugin',
	'sap/ui/rta/Utils'
],
function(Plugin, Utils) {
	"use strict";

	//Do reevaluation of selectability clicked overlays
	function _isSelectable(oOverlay){
		if (oOverlay && !oOverlay.isSelectable()){
			var bSelectable = Utils.isEditable(oOverlay);
			oOverlay.setSelectable(bSelectable);
			return bSelectable;
		}
		return !!oOverlay;
	}


	/**
	 * Constructor for a new Selection plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Selection plugin allows you to select or focus overlays with mouse or keyboard and navigate to others.
	 * @extends sap.ui.dt.Plugin
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.Selection
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Selection = Plugin.extend("sap.ui.rta.plugin.Selection", /** @lends sap.ui.dt.Plugin.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * Register an overlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Selection.prototype.registerElementOverlay = function(oOverlay) {
		//other plugins depend on this logic, get rid of this in futures
		_isSelectable(oOverlay);

		oOverlay.attachBrowserEvent("click", this._onClick, this);
		oOverlay.attachBrowserEvent("keydown", this._onKeyDown, this);
		oOverlay.attachBrowserEvent("mousedown", this._onMouseDown, this);
	};

	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Selection.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachBrowserEvent("click", this._onClick, this);
		oOverlay.detachBrowserEvent("keydown", this._onKeyDown, this);
		oOverlay.detachBrowserEvent("mousedown", this._onMouseDown, this);
	};

	/**
	 * Handle keydown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onKeyDown = function(oEvent) {
		var oOverlay = Utils.getFocusedOverlay();
		_isSelectable(oOverlay);
		if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) {
			if ((oOverlay) && (!oOverlay.isSelected())) {
				oOverlay.setSelected(true);
				oEvent.stopPropagation();
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oParentOverlay = oOverlay.getParentElementOverlay();
				if (oParentOverlay && _isSelectable(oParentOverlay)) {
					oParentOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oFirstChildOverlay = Utils.getFirstFocusableChildOverlay(oOverlay);
				if (oFirstChildOverlay) {
					oFirstChildOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oPrevSiblingOverlay = Utils.getPreviousFocusableSiblingOverlay(oOverlay);
				if (oPrevSiblingOverlay) {
					oPrevSiblingOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oNextSiblingOverlay = Utils.getNextFocusableSiblingOverlay(oOverlay);
				if (oNextSiblingOverlay) {
					oNextSiblingOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		}
	};

	/**
	 * Handle MouseDown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onMouseDown = function(oEvent) {
		if (sap.ui.Device.browser.name == "ie"){
			var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
			if (_isSelectable(oOverlay)){
				oOverlay.focus();
				oEvent.stopPropagation();
			} else {
				oOverlay.getDomRef().blur();
			}
			oEvent.preventDefault;
		}
	};

	/**
	 * Handle click event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (_isSelectable(oOverlay)) {
			oOverlay.setSelected(!oOverlay.getSelected());
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	return Selection;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Selection.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.additionalElements.AdditionalElementsAnalyzer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

 jQuery.sap.declare('sap.ui.rta.plugin.additionalElements.AdditionalElementsAnalyzer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/additionalElements/AdditionalElementsAnalyzer",['sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/smartfield/AnnotationHelper', 'sap/ui/core/StashedControlSupport', 'sap/ui/dt/ElementUtil', 'sap/ui/rta/Utils'],
	function(MetadataAnalyser, AnnotationHelper, StashedControlSupport, ElementUtil, RtaUtils){
	"use strict";

	var oAnnotationHelper = new AnnotationHelper();

	function _getBoundEntityType (oElement, oModel) {
		var _oModel = oModel ? oModel : oElement.getModel();
		var oBindingContext = oElement.getBindingContext();
		if (oBindingContext) {
			var oEntityTypeMetadata = _oModel.oMetadata._getEntityTypeByPath(oBindingContext.getPath());
			return oEntityTypeMetadata.name;
		}
		return "";
	}

	/**
	 * Is field using a complex type
	 *
	 * @param {Object}
	 *          oProperty property from entityType
	 * @returns {Boolean} Returns true if property is using a complex type
	 */
	function _isComplexType (oProperty) {
		if (oProperty && oProperty.type) {
			if (oProperty.type.toLowerCase().indexOf("edm") !== 0) {
				return true;
			}
		}
		return false;
	}

	function _expandComplexProperties(aODataProperties, oMetadataAnalyzer){
		return aODataProperties.reduce(function(aExpandedProperties, oProperty){
			var vProps = oProperty;
			if (_isComplexType(oProperty)) {
				vProps = oMetadataAnalyzer.getFieldsByComplexTypeName(oProperty.type).map(function(oComplexProperty){
					oComplexProperty.bindingPath = oProperty.name + "/" + oComplexProperty.name;
					oComplexProperty.entityName = oProperty.entityName;
					oComplexProperty.referencedComplexPropertyName = oProperty.fieldLabel ? oProperty.fieldLabel : oProperty.name;
					return oComplexProperty;
				});
			} else {
				//harmonize structure
				vProps.bindingPath = oProperty.name;
			}
			return aExpandedProperties.concat(vProps);
		}, []);
	}

	function _filterInvisibleProperties(aODataProperties, oElement) {
		return aODataProperties.filter(function(oProperty){
			//sap:visible=false and or "com.sap.vocabularies.Common.v1.FieldControl" with EnumMember "com.sap.vocabularies.Common.v1.FieldControlType/Hidden"
			//handled by MetadataAnalyser
			return oProperty.visible;
		}).filter(function(oProperty){
			//@runtime hidden by field control value = 0
			var sFieldControlPath = oAnnotationHelper.getFieldControlPath(oProperty);
			if (sFieldControlPath){
				var iFieldControlValue = oElement.getBindingContext().getProperty(sFieldControlPath);
				return iFieldControlValue !== 0;
			}
			return true;
		});
	}

	function _getODataPropertiesOfModel (oElement) {
		var oModel = oElement.getModel();
		var aResult = [];
		if (oModel) {
			var sModelName = oModel.getMetadata().getName();
			if (sModelName === "sap.ui.model.odata.ODataModel" || sModelName === "sap.ui.model.odata.v2.ODataModel") {
				aResult = oModel.getMetaModel().loaded().then(function(){
					var oMetadataAnalyzer = new MetadataAnalyser(oModel);
					var sEntityType = _getBoundEntityType(oElement, oModel);
					var aODataProperties = oMetadataAnalyzer.getFieldsByEntityTypeName(sEntityType) || [];
					aODataProperties = _expandComplexProperties(aODataProperties, oMetadataAnalyzer);
					aODataProperties = _filterInvisibleProperties(aODataProperties, oElement);
					return aODataProperties;
				});
			}
		}
		return aResult;
	}

	function _oDataPropertyToAdditionalElementInfo (oODataProperty){
		return {
			selected : false,
			label : oODataProperty.renamedLabel ? oODataProperty.renamedLabel : oODataProperty.fieldLabel,
			referencedComplexPropertyName: oODataProperty.referencedComplexPropertyName ? oODataProperty.referencedComplexPropertyName : "",
			duplicateComplexName: oODataProperty.duplicateComplexName ? oODataProperty.duplicateComplexName : false,
			tooltip :  oODataProperty.quickInfo || oODataProperty.fieldLabel,
			//command relevant data
			type : "odata",
			entityType : oODataProperty.entityName,
			name : oODataProperty.name,
			bindingPath : oODataProperty.bindingPath,
			originalLabel: oODataProperty.renamedLabel && oODataProperty.renamedLabel !== oODataProperty.fieldLabel ? oODataProperty.fieldLabel : ""
		};
	}

	function _elementToAdditionalElementInfo (mData){
		var oElement = mData.element;
		var mAction = mData.action;
		return {
			selected : false,
			label : RtaUtils.getLabelForElement(oElement, mAction.getLabel),
			tooltip : RtaUtils.getLabelForElement(oElement, mAction.getLabel),
			referencedComplexPropertyName: oElement.referencedComplexPropertyName ? oElement.referencedComplexPropertyName : "",
			duplicateComplexName: oElement.duplicateComplexName ? oElement.duplicateComplexName : false,
			bindingPaths: oElement.bindingPaths,
			originalLabel: oElement.renamedLabel && oElement.renamedLabel !== oElement.labelFromOData ? oElement.labelFromOData : "",
			//command relevant data
			type : "invisible",
			element : oElement
		};
	}

	function _getBindingPaths (oElement, mAction) {
		var aBindingPaths = [];
		if (mAction.getBoundChildren) {
			mAction.getBoundChildren(oElement).forEach(function(oField) {
				if (oField.mBindingInfos) {
					for ( var oInfo in oField.mBindingInfos) {
						var sPath = RtaUtils.getPathFromBindingInfo(oInfo, oField.mBindingInfos);
						if (sPath) {
							aBindingPaths.push(sPath);
						}
					}
				}
			});
		}
		return aBindingPaths;
	}

	function _getBoundChildren (sAggregationName, oElement) {
		var aBoundChildren = [];
		ElementUtil.getAggregation(oElement, sAggregationName).forEach(function(oChildElement){
			if (jQuery.isEmptyObject(oChildElement.mBindingInfos)){
				//look deeper
				for (var sChildAggregationName in oChildElement.getMetadata().getAllAggregations()) {
					aBoundChildren = aBoundChildren.concat(_getBoundChildren(sChildAggregationName, oChildElement));
				}
			} else {
				aBoundChildren.push(oChildElement);
			}
		});
		return aBoundChildren;
	}

	function _getRelevantElements(oElement, oRelevantContainer){
		if (oRelevantContainer){
			return ElementUtil.findAllSiblingsInContainer(oElement, oRelevantContainer);
		} else {
			return [oElement];
		}
	}

	function _checkForComplexDuplicates(aODataProperties) {
		aODataProperties.forEach(function(oODataProperty, index, aODataProperties) {
			if (oODataProperty["duplicateComplexName"] !== true) {
				for (var j = index + 1; j < aODataProperties.length - 1; j++) {
					if (oODataProperty.fieldLabel === aODataProperties[j].fieldLabel) {
						oODataProperty["duplicateComplexName"] = true;
						aODataProperties[j]["duplicateComplexName"] = true;
					}
				}
			}
		});
		return aODataProperties;
	}

	var oAnalyzer = {
		//depending on the available actions for the aggregation call one or both of these methods

		enhanceInvisibleElements : function(oParent, mRevealData){
			return Promise.resolve().then(function () {
				return _getODataPropertiesOfModel(oParent);
			}).then(function(aODataProperties) {
				aODataProperties = _checkForComplexDuplicates(aODataProperties);

				var aInvisibleElements = mRevealData.elements || [];

				return aInvisibleElements.map(function(oInvisibleElement) {
					var sType = oInvisibleElement.getMetadata().getName();
					//TODO fix with stashed type support

					var mTypeData = mRevealData.types[sType];
					var mAction = mTypeData.action;


					oInvisibleElement.bindingPaths = _getBindingPaths(oInvisibleElement, mAction);
					oInvisibleElement.fieldLabel = RtaUtils.getLabelForElement(oInvisibleElement, mAction.getLabel);

					//check for duplicate labels to later add the referenced complexTypeName if available
					aODataProperties.some(function(oUnboundProperty) {
						if (oUnboundProperty.fieldLabel === oInvisibleElement.fieldLabel) {
							oInvisibleElement.duplicateComplexName = true;
							return true;
						}
					});

					//add information from the oDataProperty to the InvisibleProperty
					aODataProperties.some(function(oUnboundProperty) {
						if (oInvisibleElement.bindingPaths && oInvisibleElement.bindingPaths.indexOf(oUnboundProperty.bindingPath) > -1) {
							oInvisibleElement.labelFromOData = oUnboundProperty.fieldLabel;
							if (oInvisibleElement.fieldLabel !== oInvisibleElement.labelFromOData) {
								oInvisibleElement.renamedLabel = true;
							}
							if (oUnboundProperty.referencedComplexPropertyName) {
								oInvisibleElement.referencedComplexPropertyName = oUnboundProperty.referencedComplexPropertyName;
							}
							return true;
						}
					});

					return {
						element : oInvisibleElement,
						action : mAction
					};
				});
			}).then(function(aAllElementData) {
				return aAllElementData.map(_elementToAdditionalElementInfo);
			});
		},

		getUnboundODataProperties : function(oElement, mAction){
			//TODO split in smaller functions
			return Promise.resolve().then(function () {
				return _getODataPropertiesOfModel(oElement);
			}).then(function(aODataProperties) {
				var aRelevantElements = _getRelevantElements(oElement, mAction.relevantContainer);

				var aAllChildren = aRelevantElements.reduce(function (aPreviousChildren, oCurrentElement) {
					return aPreviousChildren.concat(_getBoundChildren.bind(null, mAction.aggregation)(oCurrentElement));
				}, []);

				var mRenamedLabels = {};
				var mVisiblyBoundProperties = aAllChildren.reduce(function(mProperties, oChildElement){
					if (oChildElement.mBindingInfos) {
						for ( var oInfo in oChildElement.mBindingInfos) {
							var sPath = RtaUtils.getPathFromBindingInfo(oInfo, oChildElement.mBindingInfos);
							if (sPath) {
								mProperties[sPath] = true;
								mRenamedLabels[sPath] = RtaUtils.getLabelForElement(oChildElement, mAction.getLabel);
							}
						}
					}
					return mProperties;
				}, {});

				var fnFilter = mAction.filter ? mAction.filter : function() {return true;};
				aODataProperties = aODataProperties.reduce(function(aODataProperties, oDataProperty) {
					oDataProperty["renamedLabel"] = mRenamedLabels[oDataProperty.bindingPath];
					if (!mVisiblyBoundProperties[oDataProperty.bindingPath] && fnFilter(oElement, oDataProperty)) {
						return aODataProperties.concat(oDataProperty);
					} else {
						return aODataProperties;
					}
				}, []);

				aODataProperties = _checkForComplexDuplicates(aODataProperties);

				return aODataProperties;
			}).then(function(aUnboundODataProperties) {
				return aUnboundODataProperties.map(_oDataPropertyToAdditionalElementInfo);
			});
		}
	};
	return oAnalyzer;
});

}; // end of sap/ui/rta/plugin/additionalElements/AdditionalElementsAnalyzer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementDesignTimeMetadata'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/additionalElements/AdditionalElementsPlugin",["jquery.sap.global", "sap/ui/dt/Plugin", "sap/ui/model/json/JSONModel", 'sap/ui/dt/ElementUtil', 'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/Utils', 'sap/ui/core/StashedControlSupport', 'sap/ui/dt/ElementDesignTimeMetadata'],function(jQuery, Plugin, JSONModel, ElementUtil, OverlayRegistry, Utils, StashedControlSupport, ElementDesignTimeMetadata){
	"use strict";

	function _getParents(bSibling, oOverlay) {
		var oParentOverlay, oPublicParentOverlay;
		if (bSibling) {
			oParentOverlay = oOverlay.getParentElementOverlay();
			oPublicParentOverlay = oOverlay.getPublicParentElementOverlay();
		} else {
			oParentOverlay = oOverlay;
			if (oOverlay.isInHiddenTree()){
				oPublicParentOverlay = oOverlay.getPublicParentElementOverlay();
			} else {
				oPublicParentOverlay = oOverlay;
			}
		}
		return {
			publicParentOverlay : oPublicParentOverlay,
			parentOverlay : oParentOverlay,
			publicParent : oPublicParentOverlay.getElementInstance(),
			parent : oParentOverlay.getElementInstance()
		};
	}

	function _defaultGetAggregationName(oParent, oChild) {
		return oChild.sParentAggregationName;
	}

	function _getInvisibleElements (oElement, sAggregationName){
		var aInvisibleElements = ElementUtil.getAggregation(oElement, sAggregationName).filter(function(oElement){
			return oElement.getVisible && !oElement.getVisible();
		});
		var aStashedControls = StashedControlSupport.getStashedControls(oElement.getId());
		return aInvisibleElements.concat(aStashedControls);
	}

	function _getRevealActions (bSibling, oOverlay) {
		var mParents = _getParents(bSibling, oOverlay);

		var oDesignTimeMetadata;
		var mReveal = {};
		if (oOverlay.isInHiddenTree()){
			oDesignTimeMetadata = mParents.publicParentOverlay.getDesignTimeMetadata();
			var mRevealAction = oDesignTimeMetadata.getAggregationAction("reveal", mParents.parent)[0];
			if (mRevealAction) {
				if (!mRevealAction.getAggregationName){
					mRevealAction.getAggregationName = _defaultGetAggregationName;
				}
				var fnGetInvisibleElements = mRevealAction.getInvisibleElements || _getInvisibleElements;
				var aInvisibleElements = fnGetInvisibleElements(mParents.publicParent, mRevealAction.aggregation);

				mReveal[mRevealAction.aggregation] = {
					reveal : {
						elements : aInvisibleElements,
						types : aInvisibleElements.reduce(function(mInvisibleTypes, oElement){
							mInvisibleTypes[oElement.getMetadata().getName()] = {
								designTimeMetadata : oDesignTimeMetadata,
								action : mRevealAction
							};
							return mInvisibleTypes;
						}, {})
					}
				};
			}

		} else {
			var aParents = [mParents.parentOverlay];
			var oRelevantContainer = _getRelevantContainer(mParents.parent, mParents.parentOverlay.getDesignTimeMetadata());
			if (oRelevantContainer !== mParents.parent){
				aParents = ElementUtil.findAllSiblingsInContainer(mParents.parent, oRelevantContainer).map(function(oParent){
					return OverlayRegistry.getOverlay(oParent);
				});
			}
			var aAggregationNames;
			if (bSibling){
				aAggregationNames = [oOverlay.getElementInstance().sParentAggregationName];
			}
			aAggregationNames = mParents.parentOverlay.getAggregationOverlays().filter(function(oAggregationOverlay){
				return !oAggregationOverlay.getDesignTimeMetadata().isIgnored();
			}).map(function(oAggregationOverlay){
				return oAggregationOverlay.getAggregationName();
			});

			mReveal = aAggregationNames.reduce(function(_mReveal, sAggregationName){
				var aInvisibleElements = aParents.reduce(function(aInvisibleChilden, oParentOverlay){
					return aInvisibleChilden.concat(_getInvisibleElements(oParentOverlay.getElementInstance(), sAggregationName));
				}, []);

				var mTypes = aInvisibleElements.reduce(function(mTypes, oElement){
					var sType = oElement.getMetadata().getName();
					if (!mTypes[sType]){
						//TODO Fix if we have the stashed type info
						if (sType === "sap.ui.core._StashedControl"){
							mTypes[sType] = {
								designTimeMetadata : new ElementDesignTimeMetadata(
									{
										data : {
											name : {
												singular : function(){
													return sap.uxap.i18nModel.getResourceBundle().getText("SECTION_CONTROL_NAME");
												},
												plural : function(){
													return sap.uxap.i18nModel.getResourceBundle().getText("SECTION_CONTROL_NAME_PLURAL");
												}
											},
											actions : {
												reveal : {
													changeType : "unstashControl",
													getAggregationName : _defaultGetAggregationName
												}
											}
										}
									}
								),
								action : {
									changeType : "unstashControl",
									getAggregationName : _defaultGetAggregationName
								}
							};
						} else {
							var oOverlay = OverlayRegistry.getOverlay(oElement);
							if (oOverlay) {
								var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
								var mRevealAction = oDesignTimeMetadata && oDesignTimeMetadata.getAction("reveal", oElement);
								if (mRevealAction) {
									if (!mRevealAction.getAggregationName){
										mRevealAction.getAggregationName = _defaultGetAggregationName;
									}
									mTypes[sType] = {
										designTimeMetadata : oDesignTimeMetadata,
										action : mRevealAction
									};
								}
							}
						}
					}
					return mTypes;
				}, {});
				if (aInvisibleElements.length > 0 && Object.keys(mTypes).length > 0){
					_mReveal[sAggregationName] = {
						reveal : {
							elements : aInvisibleElements,
							types : mTypes
						}
					};
				}
				return _mReveal;
			}, {});
		}

		return mReveal;
	}
	function _getAddODataPropertyActions (bSibling, oOverlay) {
		var mParents = _getParents(bSibling, oOverlay);

		var oDesignTimeMetadata = mParents.publicParentOverlay.getDesignTimeMetadata();
		var aActions = oDesignTimeMetadata.getAggregationAction("addODataProperty", mParents.parent);

		var mAddODataProperty = aActions.reduce(function(_mAddODataProperty, mAction){
			_mAddODataProperty[mAction.aggregation] = {
				addODataProperty : {
					designTimeMetadata : oDesignTimeMetadata,
					action : mAction
				}
			};
			return _mAddODataProperty;
		}, {});

		return mAddODataProperty;
	}

	function _getActions (bSibling, oOverlay) {
		var mRevealActions = _getRevealActions(bSibling, oOverlay);
		var mAddODataPropertyActions = _getAddODataPropertyActions(bSibling, oOverlay);

		//join and condense both action data
		var mOverall = jQuery.extend(true, mRevealActions, mAddODataPropertyActions);
		var aAggregationNames = Object.keys(mOverall);
		if (aAggregationNames.length === 0){
			return {};
		} else if (aAggregationNames.length > 1){
			jQuery.sap.log.error("reveal or addODataProperty action defined for more than 1 aggregation, that is not yet possible");
		}
		var sAggregationName = aAggregationNames[0];
		mOverall[sAggregationName].aggregation = sAggregationName;
		return mOverall[sAggregationName];
	}

	var SINGULAR = true, PLURAL = false;
	function _getText (sRtaTextKey, mActions, oParentElement, bSingular) {
		var aNames = [];
		var mControlType;
		var sControlType;
		if (mActions.addODataProperty){
			var sAggregationName = mActions.aggregation;
			var oDesignTimeMetadata = mActions.addODataProperty.designTimeMetadata;
			mControlType = oDesignTimeMetadata.getAggregationDescription(sAggregationName, oParentElement);
			if (mControlType) {
				sControlType = bSingular ? mControlType.singular : mControlType.plural;
				aNames.push(sControlType);
			}
		}
		if (mActions.reveal){
			Object.keys(mActions.reveal.types).forEach(function(sType){
				var mType = mActions.reveal.types[sType];
				mControlType = mType.designTimeMetadata.getName(oParentElement);
				if (mControlType) {
					sControlType = bSingular ? mControlType.singular : mControlType.plural;
					aNames.push(sControlType);
				}
			});
		}
		var aNonDuplicateNames = aNames.reduce(function(_aNames, sName){
			if (_aNames.indexOf(sName) === -1) {
				_aNames.push(sName);
			}
			return _aNames;
		}, []);


		var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");

		if (aNonDuplicateNames.length === 1) {
			sControlType = aNonDuplicateNames[0];
		} else {
			sControlType = oTextResources.getText("MULTIPLE_CONTROL_NAME");
		}
		return oTextResources.getText(sRtaTextKey, sControlType);
	}

	function _getRelevantContainer(oParentElement, oDesignTimeMetadata) {
		if (oDesignTimeMetadata.getData().getRelevantContainer) {
			return oDesignTimeMetadata.getData().getRelevantContainer(oParentElement);
		} else {
			return oParentElement;
		}
	}
	/**
	 * Constructor for a new Additional Elements Plugin.
	 *
	 * The AdditionalElementsPlugin should handle the orchestration
	 * of the AdditionalElementsAnalyzer, the dialog and the command creation
	 *
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The plugin allows to add additional elements that exist either hidden in the UI or in the OData service
	 * @extends sap.ui.dt.Plugin
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var AdditionalElementsPlugin = Plugin.extend("sap.ui.rta.plugin.additionalElements.AdditionalElementsPlugin", {
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {
				analyzer: "object", //sap.ui.rta.plugin.additionalElements.AdditionalElementsAnalyzer
				dialog: "object", //sap.ui.rta.plugin.additionalElements.AddElementsDialog
				commandFactory: "object"
			},
			associations: {},
			events: {}
		},

		getContextMenuTitle: function(bOverlayIsSibling, oOverlay){
			var mParents = _getParents(bOverlayIsSibling, oOverlay);
			var mActions = _getActions(bOverlayIsSibling, oOverlay);
			return _getText("CTX_ADD_ELEMENTS", mActions, mParents.parent, SINGULAR);
		},

		isAvailable: function(bOverlayIsSibling, oOverlay){
			var mActions = _getActions(bOverlayIsSibling, oOverlay);
			return mActions.reveal || mActions.addODataProperty;
		},

		isEnabled: function(bOverlayIsSibling, oOverlay){
			if (bOverlayIsSibling) {
				if (!Utils.hasParentStableId(oOverlay)) {
					return false;
				}
			}
			var mActions = _getActions(bOverlayIsSibling, oOverlay);
			if (mActions.reveal && mActions.reveal.elements.length === 0 && !mActions.addODataProperty){
				return false;
			}
			return Utils.isEditable(oOverlay);
		},

		showAvailableElements: function(bOverlayIsSibling, aOverlay) {
			var oOverlay = aOverlay[0];
			var mParents = _getParents(bOverlayIsSibling, oOverlay);
			var oSiblingElement = bOverlayIsSibling && oOverlay.getElementInstance();
			var aPromises = [];
			var that = this;

			var mActions = _getActions(bOverlayIsSibling, oOverlay);
			if (mActions.reveal) {
				aPromises.push(this.getAnalyzer().enhanceInvisibleElements(mParents.publicParent, mActions.reveal));
			}
			if (mActions.addODataProperty){
				mActions.addODataProperty.relevantContainer = _getRelevantContainer(mParents.publicParent, mActions.addODataProperty.designTimeMetadata);
				aPromises.push(this.getAnalyzer().getUnboundODataProperties(mParents.publicParent, mActions.addODataProperty));
			}
			if (mActions.aggregation) {
				this._setDialogTitle(mActions, mParents.parent);
			}

			return Promise.resolve().then(function(){
				if (mActions.addODataProperty){
					return Utils.isServiceUpToDate();
				}
			}).then(function() {
				if (mActions.addODataProperty){
					return Utils.isCustomFieldAvailable(mParents.parent);
				}
			}).then(function(oCurrentFieldExtInfo) {
				if (oCurrentFieldExtInfo) {
					that._oCurrentFieldExtInfo = oCurrentFieldExtInfo;
					that.getDialog().setCustomFieldEnabled(true);
					that.getDialog().detachEvent('openCustomField', that._onOpenCustomField, that);
					that.getDialog().attachEvent('openCustomField', null, that._onOpenCustomField, that);
				}
			}).then(
				_getAllElements.bind(null, aPromises)
			).then(function(aAllElements){
				if (that.getDialog().getModel()) {
					that.getDialog().getModel().setProperty("/elements", aAllElements);
				} else {
					that.getDialog().setModel(new JSONModel({elements : aAllElements}));
				}
				return that.getDialog().open().then(function() {
					that._createCommands(bOverlayIsSibling, oOverlay, mParents, oSiblingElement, mActions.designTimeMetadata, mActions);
				}).catch(function(oError){
					//no error means canceled dialog
					if (oError instanceof Error){
						throw oError;
					}
				});
			}).catch(function(oError){
				if (oError instanceof Error){
					throw oError;
				} else {
					jQuery.sap.log.info("Service not up to date, skipping add dialog", "sap.ui.rta");
				}
			});
		},

		_setDialogTitle : function(mActions, oParentElement){
			var sDialogTitle = _getText("HEADER_ADDITIONAL_ELEMENTS", mActions, oParentElement, PLURAL);
			this.getDialog().setTitle(sDialogTitle);
		},
		/**
		 * Function called when custom field button was pressed
		 *
		 * @param {sap.ui.base.Event}
		 *		  oEvent event object
		 */
		_onOpenCustomField : function (oEvent) {
			// open field ext ui
			var oCrossAppNav = sap.ushell && sap.ushell.Container
			&& sap.ushell.Container.getService("CrossApplicationNavigation");
			var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
				target : {
					semanticObject : "CustomField",
					action : "develop"
				},
				params : {
					businessContexts : this._oCurrentFieldExtInfo.BusinessContexts,
					serviceName : this._oCurrentFieldExtInfo.ServiceName,
					serviceVersion : this._oCurrentFieldExtInfo.ServiceVersion,
					entityType : this._oCurrentFieldExtInfo.EntityType
				}
			}));
			Utils.openNewWindow(sHrefForFieldExtensionUi);
		},

		_createCommands : function(bSibling, oOverlay, mParents, oSiblingElement, oDesignTimeMetadata, mActions) {
			var that = this;
			var aSelectedElements = _getSelectedElements(this.getDialog());
			if (aSelectedElements.length > 0) {
				//at least on element selected
				var oCompositeCommand = this.getCommandFactory().getCommandFor(mParents.parent, "composite");
				aSelectedElements.forEach(function(oSelectedElement){
					var oCmd;
					switch (oSelectedElement.type) {
						case "invisible":
							var oRevealedElement = oSelectedElement.element;
							var sType = oRevealedElement.getMetadata().getName();
							var mType = mActions.reveal.types[sType];
							var oDesignTimeMetadata = mType.designTimeMetadata;
							if (mParents.publicParent !=  mParents.parent){
								var oAggregationDesignTimeMetadata = oDesignTimeMetadata.createAggregationDesignTimeMetadata(mActions.aggregation);
								oCmd = that.getCommandFactory().getCommandFor(mParents.publicParent, "reveal", {
									revealedElementId : oRevealedElement.getId(),
									hiddenParent : mParents.parent
								}, oAggregationDesignTimeMetadata);
							} else {
								oCmd = that.getCommandFactory().getCommandFor(oRevealedElement, "reveal", { }, oDesignTimeMetadata);
							}
							oCompositeCommand.addCommand(oCmd);

							var sParentAggregationName = mType.action.getAggregationName(mParents.parent, oRevealedElement);
							var oSourceParent = _getSourceParent(oRevealedElement, mParents);
							var oTargetParent = mParents.parent;
							var iRevealTargetIndex = Utils.getIndex(mParents.parent, oSiblingElement, sParentAggregationName);
							var iRevealedSourceIndex = Utils.getIndex(oSourceParent, oRevealedElement, sParentAggregationName) - 1;

							iRevealTargetIndex = _adjustTargetIndex(oSourceParent, oTargetParent, iRevealedSourceIndex, iRevealTargetIndex);

							if (iRevealTargetIndex !== iRevealedSourceIndex || mParents.parent !== oRevealedElement.getParent()){
								var SourceParentDesignTimeMetadata = mParents.publicParentOverlay.getDesignTimeMetadata();
								oCmd = that.getCommandFactory().getCommandFor(mParents.publicParent, "move", {
									movedElements : [{
										element : oRevealedElement,
										sourceIndex : iRevealedSourceIndex,
										targetIndex : iRevealTargetIndex
									}],
									source : {
										publicParent : mParents.publicParent,
										publicAggregation: mActions.aggregation,
										parent : oSourceParent,
										aggregation : sParentAggregationName
									},
									target : {
										publicParent : mParents.publicParent,
										publicAggregation: mActions.aggregation,
										parent : oTargetParent,
										aggregation : sParentAggregationName
									}
								}, SourceParentDesignTimeMetadata);
								if (oCmd){
									oCompositeCommand.addCommand(oCmd);
								} else {
									jQuery.sap.log.warning("No move action configured for " + mParents.publicParent.getMetadata().getName() + ", aggregation: " + mActions.aggregation , "sap.ui.rta");

								}
							}
							break;
						case "odata":
							var oPublicParentDesignTimeMetadata = mActions.addODataProperty.designTimeMetadata;
							var oPublicAggregationDesignTimeMetadata = oPublicParentDesignTimeMetadata.createAggregationDesignTimeMetadata(mActions.aggregation);
							var iAddTargetIndex = Utils.getIndex(mParents.parent, oSiblingElement, mActions.aggregation, oPublicAggregationDesignTimeMetadata.getData().getIndex);
							oCmd = that.getCommandFactory().getCommandFor(mParents.publicParent, "addODataProperty", {
								newControlId: Utils.createFieldLabelId(mParents.publicParent, oSelectedElement.entityType, oSelectedElement.bindingPath),
								index : iAddTargetIndex,
								label : oSelectedElement.label,
								bindingString : oSelectedElement.bindingPath
							}, oPublicParentDesignTimeMetadata);
							oCompositeCommand.addCommand(oCmd);
							break;
					}
				});
				this.fireElementModified({
					"command" : oCompositeCommand
				});
			}
		}
	});

	function _getSelectedElements (oDialog) {
		return oDialog.getModel().getObject("/elements").filter(function(oElement){
			return oElement.selected;
		});
	}

	function _getAllElements (aPromises) {
		return Promise.all(aPromises).then(function(aAnalyzerValues) {
			var aAllElements = aAnalyzerValues[0] || [];
			if (aAllElements && aAnalyzerValues[1]) {
				aAllElements = aAllElements.concat(aAnalyzerValues[1]);
			}
			return aAllElements;
		});
	}

	function _getSourceParent(oRevealedElement, mParents){
		var oParent = oRevealedElement.getParent();
		if (!oParent && oRevealedElement.sParentId){
			//stashed control has no parent, but remembers its parent id
			oParent = sap.ui.getCore().byId(oRevealedElement.sParentId);
		} else if (!oParent) {
			// fallback to target parent
			oParent = mParents.parent;
		}
		return oParent;
	}

	//in case an element is moved inside the same container above its current position, its own position has to be removed
	function _adjustTargetIndex (oSourceContainer, oTargetContainer, iSourceIndex, iTargetIndex) {
		if (oSourceContainer === oTargetContainer && iSourceIndex < iTargetIndex && iSourceIndex > -1) {
			return iTargetIndex - 1;
		}
		return iTargetIndex;
	}

	//expose _getRevealActions for isEditable check
	AdditionalElementsPlugin.hasRevealActionsOnChildren = function(oOverlay){
		var mRevealActions = _getRevealActions(false, oOverlay);
		return !!mRevealActions && Object.keys(mRevealActions).length > 0;
	};

	return AdditionalElementsPlugin;
});

}; // end of sap/ui/rta/plugin/additionalElements/AdditionalElementsPlugin.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.util.FakeLrepConnectorLocalStorage') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.util.FakeLrepConnectorLocalStorage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/util/FakeLrepConnectorLocalStorage",[
	"sap/ui/rta/util/FakeLrepLocalStorage"
	], function(
	FakeLrepLocalStorage) {
	"use strict";

	/**
	 * Class for SAP RTA Fake Lrep changes in localStorage
	 *
	 * @class
	 * Utility functionality for SAP RTA Fake Lrep localStorage
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias sap.ui.rta.FakeLrepConnectorLocalStorage
	 */

	var FakeLrepConnectorLocalStorage = {};

	/**
	 * Creates a Fake Lrep change in localStorage
	 * @param  {Object|Array} vChange - the change array/object
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.create = function(vChange) {
		
		if (Array.isArray(vChange)) {
			vChange.forEach(function(elem) {
				FakeLrepLocalStorage.saveChange(elem.fileName, elem);
			});
		} else {
			FakeLrepLocalStorage.saveChange(vChange.fileName, vChange);	
		}
		return Promise.resolve();
	};

	/**
	 * Deletes a Fake Lrep change in localStorage
	 * @param  {Object} oChange - the change Object
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.deleteChange = function(oChange) {

		FakeLrepLocalStorage.deleteChange(oChange.sChangeName);

		return Promise.resolve({
			response: undefined,
			status: "nocontent"
		});
	};

	/**
	 * Deletes all Fake Lrep changes in localStorage
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.deleteChanges = function() {

		FakeLrepLocalStorage.deleteChanges();

		return Promise.resolve({
			response: undefined,
			status: "nocontent"
		});
	};

	/**
	 * Loads the changes for the given Component class name
	 * from the FakeLrepLocalStorage
	 * and also loads the mandatory FakeLrepConnector.json file.
	 * The settings are take from the JSON file, but changes are replaced with
	 * the changes from the local storage.
	 * 
	 * @param {String} sComponentClassName - Component class name
	 * @returns {Promise} Returns a Promise with the changes and componentClassName
	 * @public
	 */
	FakeLrepConnectorLocalStorage.loadChanges = function(sComponentClassName) {

		var aChanges = FakeLrepLocalStorage.getChanges(),
			initialComponentJsonPath = this.sInitialComponentJsonPath;

		return new Promise(function(resolve, reject){
			jQuery.getJSON(initialComponentJsonPath).done(function(oResponse){
				oResponse.changes = aChanges;
				var result = {
					changes: oResponse,
					componentClassName: sComponentClassName
				};
				resolve(result);
			}).fail(function(error){
				reject(error);
			});
		});

	};

	return FakeLrepConnectorLocalStorage;

}, /* bExport= */ true);
}; // end of sap/ui/rta/util/FakeLrepConnectorLocalStorage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides object sap.ui.rta.ControlAnalyzerFactory.
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory",['sap/ui/rta/controlAnalyzer/SmartForm', 'sap/ui/rta/controlAnalyzer/Form', 'sap/ui/rta/controlAnalyzer/ObjectPage'], function() {
	"use strict";

	/**
	 * @class ControlAnalyzerFactory delivers change controller for a specific component
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias ControlAnalyzerFactory
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
	 *               might be changed in future.
	 */

	var ControlAnalyzerFactory = {};

	// Add here all known change controllers. Actually we support only the SmartForm and ObjectPage
	var _mapOfControllers = {

		'sap.ui.comp.smartform' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.SmartForm
		},

		'sap.ui.layout.form' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.Form
		},

		'sap.uxap' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.ObjectPage
		},

		//fallback
		'sap' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.Base
		},

		// search function to search map by name or prefix
		'findControlAnalyzerByName' : function(oContext, sName) {
			var result = oContext._mapOfControllers[sName];
			if (!result) { // if not yet found try also the prefix, TODO generalize algorithm
				var iIndex = sName.lastIndexOf('.');
				if (iIndex > 0) {
					result = oContext._mapOfControllers.findControlAnalyzerByName(oContext, sName.substr(0, iIndex));
				} else if (iIndex === -1) {
					//fallback to base analyzer:
					result = oContext._mapOfControllers.sap;
				}
			}
			return result;
		}

	};
	ControlAnalyzerFactory._mapOfControllers = _mapOfControllers;

	/**
	 * Factory method to provide a change controller for a given control
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Control for which a change controller is requested
	 * @returns {sap.ui.rta.controlAnalyzer.Base} the change controller or null
	 */
	ControlAnalyzerFactory.getControlAnalyzerFor = function(oControl) {
		var result = null;
		jQuery.sap.assert(!!oControl, "Cannot get rta change controller for undefined control.");
		if (oControl) {
			var sType = oControl.getMetadata().getName();
			var oDescriptor = this._mapOfControllers.findControlAnalyzerByName(this, sType);
			if (oDescriptor) {
					result = oDescriptor.instance = new oDescriptor.Constructor({"control" : oControl});
			}
		}
		return result;
	};

	return ControlAnalyzerFactory;
}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.AddODataProperty') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.AddODataProperty'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.BaseTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/AddODataProperty",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand', 'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory', "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/BaseTreeModifier"], function(jQuery, FlexCommand, ControlAnalyzerFactory, FlexUtils, BaseTreeModifier) {
	"use strict";

	/**
	 * Add new OData property to a control
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.command.AddODataProperty
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var AddODataProperty = FlexCommand.extend("sap.ui.rta.command.AddODataProperty", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				index : {
					type : "int"
				},
				newControlId : {
					type : "string"
				},
				label : {
					type : "string"
				},
				bindingString : {
					type : "string"
				}
			}
		}
	});

	AddODataProperty.prototype._getSpecificChangeInfo = function() {
		// general format
		return {
			changeType : this.getChangeType(),
			index : this.getIndex(),
			newControlId : this.getNewControlId(),
			label : this.getLabel(),
			bindingPath : this.getBindingString()
		};
	};

	AddODataProperty.prototype._getFlexChange = function() {
		var mSpecificChangeInfo = this._getSpecificChangeInfo();

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	AddODataProperty.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange();
	};

	/**
	 * @override
	 */
	AddODataProperty.prototype.undo = function() {
		var sAddedControlId = this.getNewControlId();
		var oAddedControl = sap.ui.getCore().byId(sAddedControlId);
		if (oAddedControl) {
			// TODO check this logic, when deserializing stack
			oAddedControl.destroy();
		}
	};

	/**
	 * @override
	 */
	AddODataProperty.prototype.serialize = function() {
		return this._getSpecificChangeInfo();
	};

	return AddODataProperty;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/AddODataProperty.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.AddSmart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.AddSmart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.BaseTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/AddSmart",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand', 'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory', "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/BaseTreeModifier"], function(jQuery, FlexCommand, ControlAnalyzerFactory, FlexUtils, BaseTreeModifier) {
	"use strict";

	/**
	 * Add new group / group element to a smart form
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.AddSmart
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var AddSmart = FlexCommand.extend("sap.ui.rta.command.AddSmart", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				source : {
					type : "object"
				},
				index : {
					type : "float"
				},
				newControlId : {
					type : "string"
				},
				labels : {
					type : "any[]"
				},
				jsTypes : {
					type : "any[]"
				},
				fieldValues : {
					type : "any[]"
				},
				valuePropertys : {
					type : "any[]"
				}
			},
			associations : {},
			events : {}
		}
	});

	AddSmart.prototype._getSpecificChangeInfo = function() {
		// general format
		var mSpecificInfo = {
			changeType : this.getChangeType(),
			index : this.getIndex(),
			newControlId : this.getNewControlId(),
			labels : this.getLabels()
		};

		// optional properties (e.g. add fields specific)
		if (this.getJsTypes()) {
			mSpecificInfo.jsTypes = this.getJsTypes();
		}
		if (this.getFieldValues()) {
			mSpecificInfo.fieldValues = this.getFieldValues();
		}
		if (this.getValuePropertys()) {
			mSpecificInfo.valueProperty = this.getValuePropertys();
		}

		var oControlAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(this._getElement());
		if (oControlAnalyzer) {
			mSpecificInfo = oControlAnalyzer.mapSpecificChangeData("Add", mSpecificInfo);
		}

		return mSpecificInfo;
	};

	AddSmart.prototype._getFlexChange = function() {
		var mSpecificChangeInfo = this._getSpecificChangeInfo();

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	AddSmart.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange();
	};

	/**
	 * @override
	 */
	AddSmart.prototype.undo = function() {
		var sAddedControlId = this.getNewControlId();
		var oAddedControl = sap.ui.getCore().byId(sAddedControlId);
		if (oAddedControl) {
			// TODO check this logic, when deserializing stack
			oAddedControl.destroy();
		}
	};

	/**
	 * @override
	 */
	AddSmart.prototype.serialize = function() {
		return this._getSpecificChangeInfo();
	};

	return AddSmart;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/AddSmart.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CommandFactory') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CommandFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/CommandFactory",['sap/ui/base/ManagedObject', 'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory', 'sap/ui/dt/ElementUtil',
		'sap/ui/fl/registry/ChangeRegistry'], function(ManagedObject, ControlAnalyzerFactory, ElementUtil, ChangeRegistry) {
	"use strict";

	var fnGetChangeHandler = function(sControlType, sChangeType){
		var oResult = ChangeRegistry.getInstance().getRegistryItems({
			controlType : sControlType,
			changeTypeName : sChangeType
		});

		if (oResult && oResult[sControlType] && oResult[sControlType][sChangeType]) {
			var oRegItem = oResult[sControlType][sChangeType];
			return oRegItem.getChangeTypeMetadata().getChangeHandler();
		} else {
			jQuery.sap.log.warning("No '" + sChangeType + "' change handler for " + sControlType + " registered");
		}
	};

	var fnConfigureCommand = function(oElement, oCommand, mSettings) {

		var sCommandName = oCommand.getName();
		var oAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oElement);
		if (oAnalyzer.mapSettings) {
			mSettings = oAnalyzer.mapSettings(sCommandName, oElement, mSettings);
		}
		var oConfElement = oAnalyzer.getConfiguredElement(oElement);

		var sControlType = oConfElement.getMetadata().getName();
		var sChangeType = oAnalyzer.getFlexChangeType(sCommandName, oElement, mSettings);

		if (sChangeType) {
			var ChangeHandler = fnGetChangeHandler(sControlType, sChangeType);
			if (ChangeHandler){
				oCommand.setChangeHandler(ChangeHandler);
				oCommand.setChangeType(sChangeType);

				if (oElement !== oConfElement && oCommand.setOriginalElement) {
					var oStableElement = oAnalyzer._getStableElementForCommand(oElement);
					oCommand.setOriginalElement(oStableElement);
				}
			}
		} else {
			jQuery.sap.log.warning("No " + sCommandName + " change type registered for " + sControlType);
		}

		return true;
	};

	var fnConfigureActionCommand = function(oElement, oCommand, vAction){
		var sChangeType;
		if (typeof (vAction) === "string"){
			sChangeType = vAction;
		} else {
			sChangeType = vAction && vAction.changeType;
		}

		if (!sChangeType){
			return false;
		}
		var sControlType = oElement.getMetadata().getName();

		var ChangeHandler = fnGetChangeHandler(sControlType, sChangeType);
		if (!ChangeHandler){
			return false;
		}

		oCommand.setChangeHandler(ChangeHandler);
		oCommand.setChangeType(sChangeType);
		return true;
	};

	var fnConfigureCreateContainerCommand = function(oElement, oCommand, mSettings, oDesignTimeMetadata){
		var oNewAddedElement = mSettings.element || sap.ui.getCore().byId(mSettings.element.id);
		var oAction = oDesignTimeMetadata.getAggregationAction("createContainer", oNewAddedElement)[0];

		var bSuccessfullConfigured = fnConfigureActionCommand(oElement, oCommand, oAction);
		if (bSuccessfullConfigured){
			oCommand.setCreateContainerMetadata(oAction);
			return true;
		} else {
			return false;
		}
	};

	var fnConfigureMoveCommand = function(oElement, oCommand, mSettings, oElementDesignTimeMetadata){
		var sSourceAggregation = mSettings.source.publicAggregation;
		var oAggregationDesignTimeMetadata = oElementDesignTimeMetadata.createAggregationDesignTimeMetadata(sSourceAggregation);
		var oMovedElement = mSettings.movedElements[0].element || sap.ui.getCore().byId(mSettings.movedElements[0].id);
		var sChangeType = oAggregationDesignTimeMetadata.getMoveAction(oMovedElement);
		oAggregationDesignTimeMetadata.destroy();

		return fnConfigureActionCommand(oElement, oCommand, sChangeType);
	};

	var fnConfigureRenameCommand = function(oElement, oCommand, mSettings, oDesignTimeMetadata){
		var oRenamedElement = mSettings.renamedElement;
		var oAction = oDesignTimeMetadata.getAction("rename", oRenamedElement);

		var bSuccessfullConfigured = fnConfigureActionCommand(oElement, oCommand, oAction);
		if (bSuccessfullConfigured){
			oCommand.setRenameMetadata(oAction);
			return true;
		} else {
			return false;
		}
	};

	var fnConfigureRemoveCommand = function(oElement, oCommand, mSettings, oDesignTimeMetadata){
		var oRemovedElement = mSettings.removedElement || sap.ui.getCore().byId(mSettings.removedElement.id);
		var oAction = oDesignTimeMetadata.getAction("remove", oRemovedElement);

		var bSuccessfullConfigured = fnConfigureActionCommand(oElement, oCommand, oAction);
		if (bSuccessfullConfigured){
			oCommand.setRemoveMetadata(oAction);
			return true;
		} else {
			return false;
		}
	};

	var fnConfigureAddODataPropertyCommand = function(oElement, oCommand, mSettings, oDesignTimeMetadata){
		var oNewAddedElement = mSettings.element;
		var oAction = oDesignTimeMetadata.getAggregationAction("addODataProperty", oNewAddedElement)[0];

		return fnConfigureActionCommand(oElement, oCommand, oAction);
	};

	var fnConfigureRevealCommand = function(oElement, oCommand, mSettings, oDesignTimeMetadata){
		var oRevealParent = mSettings.hiddenParent;
		var oAction = oDesignTimeMetadata.getAction("reveal", oRevealParent);

		return fnConfigureActionCommand(oElement, oCommand, oAction);
	};

	var fnFindClassByAnalyzer = function(oElement, sCommand) {
		var oAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oElement);
		return oAnalyzer.getCommandClass(sCommand);
	};

	var fnGetConfiguredElementByAnalyzer = function(oElement) {
		if (oElement.getMetadata){
			var oAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oElement);
			return oAnalyzer.getConfiguredElement(oElement);
		} else {
			return oElement;
		}
	};

	var mCommands = { 	// Command names camel case with first char lower case
		// TODO: remove
		"hide" : {
			findClass : fnFindClassByAnalyzer,
			configure : fnConfigureCommand
		},
		// TODO: remove
		"unhide" : {
			findClass : fnFindClassByAnalyzer,
			configure : fnConfigureCommand
		},
		// TODO: remove
		"stash" : {
			clazz : 'sap.ui.rta.command.Stash'
		},
		// TODO: remove
		"unstash" : {
			clazz : 'sap.ui.rta.command.Unstash'
		},
		"group" : {
			clazz : 'sap.ui.rta.command.Group'
		},
		"ungroup" : {
			clazz : 'sap.ui.rta.command.Ungroup'
		},
		// TODO: remove
		"add" : {
			findClass : fnFindClassByAnalyzer,
			configure : fnConfigureCommand
		},
		"createContainer" : {
			clazz : 'sap.ui.rta.command.CreateContainer',
			configure : fnConfigureCreateContainerCommand
		},
		"move" : {
			clazz : 'sap.ui.rta.command.Move',
			configure : fnConfigureMoveCommand
		},
		"remove" : {
			clazz : 'sap.ui.rta.command.Remove',
			configure : fnConfigureRemoveCommand
		},
		"composite" : {
			clazz : 'sap.ui.rta.command.CompositeCommand'
		},
		"rename" : {
			clazz : 'sap.ui.rta.command.Rename',
			configure : fnConfigureRenameCommand
		},
		"property" : {
			clazz : 'sap.ui.rta.command.Property'
		},
		"bindProperty" : {
			clazz : 'sap.ui.rta.command.BindProperty'
		},
		"addODataProperty" : {
			clazz : 'sap.ui.rta.command.AddODataProperty',
			configure : fnConfigureAddODataPropertyCommand
		},
		"reveal" : {
			clazz : 'sap.ui.rta.command.Reveal',
			configure : fnConfigureRevealCommand
		},
		"settings" : {
			clazz : 'sap.ui.rta.command.Settings'
		}
	};


	/**
	 * Factory for commands. Shall handle the control specific command configuration.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CommandFactory
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CommandFactory = ManagedObject.extend("sap.ui.rta.command.CommandFactory", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			associations : {},
			events : {}
		}
	});

	CommandFactory.getCommandFor = function(oElement, sCommand, mSettings, oDesignTimeMetadata) {

		sCommand = sCommand[0].toLowerCase() + sCommand.slice(1); // first char of command name is lower case
		var mCommand = mCommands[sCommand];

		if (!mCommand){
			throw new Error("Command '" + sCommand + "' doesn't exist, check typing");
		}

		var sClassName;
		if (mCommand.findClass) {
			sClassName = mCommand.findClass(oElement, sCommand);
		} else {
			sClassName = mCommand.clazz;
		}

		jQuery.sap.require(sClassName);
		var Command = jQuery.sap.getObject(sClassName);

		//TODO: get rid of this
		var oConfElement = fnGetConfiguredElementByAnalyzer(oElement);

		mSettings = jQuery.extend(mSettings, {
			element : oConfElement,
			name : sCommand
		});

		var oCommand = new Command(mSettings);

		var bSuccessfullConfigured = true; //configuration is optional
		if (mCommand.configure) {
			bSuccessfullConfigured = mCommand.configure(oElement, oCommand, mSettings, oDesignTimeMetadata);
		}

		if (bSuccessfullConfigured){
			oCommand.prepareActionData();
			return oCommand;
		} else {
			oCommand.destroy();
		}
	};

	return CommandFactory;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CommandFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CreateContainer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CreateContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/CreateContainer",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand',
		'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'], function(jQuery, FlexCommand, ControlAnalyzerFactory) {
	"use strict";

	/**
	 * Create new container
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CreateContainer
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CreateContainer = FlexCommand.extend("sap.ui.rta.command.CreateContainer", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				index : {
					type : "int"
				},
				newControlId : {
					type : "string"
				},
				label : {
					type : "string"
				},
				createContainerMetadata : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});

	CreateContainer.prototype._getSpecificChangeInfo = function(bForward) {

		var mSpecificInfo = {
			changeType : this.getChangeType(),
			index : this.getIndex(),
			newControlId : this.getNewControlId(),
			newLabel : this.getLabel()
		};

		return mSpecificInfo;
	};

	CreateContainer.prototype._getFlexChange = function() {
		var oPreparedChange = this.getPreparedActionData(FlexCommand.FORWARD);
		if (!oPreparedChange) {
			var mSpecificChangeInfo = this._getSpecificChangeInfo();
			oPreparedChange = this._completeChangeContent(mSpecificChangeInfo);
		}
		return oPreparedChange;
	};

	/**
	 * @override
	 */
	CreateContainer.prototype._getForwardActionData = function(oElement) {
		return this._getFlexChange();
	};

	/**
	 * @override
	 */
	CreateContainer.prototype._getBackwardActionData = function(oElement) {
		var fnGetState = this.getCreateContainerMetadata().getState;
		var sAddedControlId = this.getNewControlId();
		var oAddedControl = sap.ui.getCore().byId(sAddedControlId);

		if (fnGetState) {
			return fnGetState.call(null, oAddedControl);
		} else {
			jQuery.sap.log.error("No getState implementation found for createContainer action ", oAddedControl.getMetadata().getName() + ".designtime");
		}
	};


	CreateContainer.prototype.undo = function() {
		var fnRestoreState = this.getCreateContainerMetadata().restoreState;
		var sAddedControlId = this.getNewControlId();
		var oAddedControl = sap.ui.getCore().byId(sAddedControlId);
		if (fnRestoreState) {
			fnRestoreState.call(null, oAddedControl);
		} else {
			jQuery.sap.log.error("No restoreState implementation found for createContainer action ", oAddedControl.getMetadata().getName() + ".designtime");
		}
	};

	/**
	 * @override
	 */
	CreateContainer.prototype.serialize = function() {
		return this._getSpecificChangeInfo();
	};

	return CreateContainer;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CreateContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Group') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementDesignTimeMetadata'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Group",[
	'sap/ui/rta/command/BaseCommand',
	'sap/ui/rta/Utils',
	'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory',
	'sap/ui/dt/ElementDesignTimeMetadata'
], function(BaseCommand, Utils, ControlAnalyzerFactory, ElementDesignTimeMetadata) {
	"use strict";

	/**
	 * Unhide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Unhide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Group = BaseCommand.extend("sap.ui.rta.command.Group", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				source : {
					type : "any"
				},
				index : {
					type : "float"
				},
				labels : {
					type : "any[]"
				},
				jsTypes : {
					type : "any[]"
				},
				fieldValues : {
					type : "any[]"
				},
				valuePropertys : {
					type : "any[]"
				},
				groupFields : {
					type : "any[]"
				},
				smartForm : {
					type : "any"
				}

			},
			associations : {},
			events : {}
		}
	});

	Group.prototype.init = function() {
		this._aCommands = [];
		this._aOdataFields = [];
	};

	/**
	 * @override
	 */
	Group.prototype.undo = function() {
		this._updateElement();
		for (var i = 0; i < this._aCommands.length; i++) {
			this._aCommands[i].undo();
		}
		this.getElement().destroy();
	};

	Group.prototype.execute = function() {
		var that = this;
		return this._createGroupCommands().then(function() {
			for (var i = 0; i < that._aCommands.length; i++) {
				that._aCommands[i].execute();
			}
		});
	};

	Group.prototype.getCommands = function() {
		return this._aCommands;
	};

	Group.prototype.serialize = function() {
		var aSeralized = [];
		for (var i = 0; i < this._aCommands.length; i++) {
			aSeralized.push(this._aCommands[i].serialize());
		}
		return aSeralized;
	};

	Group.prototype._updateElement = function() {
		var that = this;
		sap.ui.getCore().applyChanges();
		var aPaths = this._aOdataFields.map(function(oField) {
			return that._getBindingPath(oField);
		});
		var sElementId = Utils.createNewSmartFormGroupElementId(this.getSmartForm(), aPaths);
		this.setElement(sap.ui.getCore().byId(sElementId));
	};

	Group.prototype._createGroupCommands = function() {
		if (this._aCommands.length > 0 ) {
			return Promise.resolve();
		}
		var that = this;
		var oSmartFormAnalyzer = sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory.getControlAnalyzerFor(this.getSmartForm());
		var aGroupFields = this.getGroupFields();
		return oSmartFormAnalyzer.prepare().then(function() {
			var aJsTypes = [];
			var aFieldLabels = [];
			var aFieldValues = [];
			var aFieldProperties = [];
			var mHiddenElements = oSmartFormAnalyzer.getHiddenElements();
			that._aOdataFields = [];
			for (var i = 0; i < aGroupFields.length; i++) {
				var aFields = aGroupFields[i].getFields();

				for (var z = 0; z < aFields.length; z++) {
					var oField = aFields[z];
					var mPaths = Utils.getElementBindingPaths(oField);
					var sFoundFieldPath = Utils.findFieldBindingPathInFieldsArray(mPaths, mHiddenElements);
					var oFoundDataField = mHiddenElements[sFoundFieldPath];
					var sPath = that._getBindingPath(oFoundDataField);

					that._aOdataFields.push(oFoundDataField);
					aJsTypes.push(oField.getMetadata().getName());
					aFieldLabels.push(oFoundDataField["fieldLabel"]);
					aFieldValues.push(sPath);
					aFieldProperties.push(mPaths[sFoundFieldPath].valueProperty);
				}
				var oFieldHideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(aGroupFields[i], "Hide");
				that._aCommands.push(oFieldHideCommand);
			}
			var sNewFieldId = Utils.createNewSmartFormGroupElementId(that.getSmartForm(), aFieldValues);
			if (sap.ui.getCore().byId(sNewFieldId)) {
				var oExisitingField = sap.ui.getCore().byId(sNewFieldId);
				var oParentContainer = oExisitingField.getParent();
				//TODO check for better solution by passing it as parameter...
				return oParentContainer.getMetadata().loadDesignTime().then(function(mDesignTimeMetadata){

					var oExisitingFieldUnhideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oExisitingField, "Unhide");
					var oExisitingFieldMoveCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oParentContainer, "Move", {
						movedElements : [{
							element : oExisitingField,
							sourceIndex : 0,
							targetIndex : that.getIndex()
						}],
						target : {
							publicAggregation: "formElements",
							aggregation: "formElements",
							parent: oParentContainer
						},
						source : {
							publicAggregation: "formElements",
							aggregation: "formElements",
							parent: oParentContainer
						}
					}, new ElementDesignTimeMetadata({ data : mDesignTimeMetadata }));

					var sNewText;
					for (var j = 0; j < aFieldLabels.length; j++) {
						sNewText = sNewText ? sNewText + "/" + aFieldLabels[j] : aFieldLabels[j];
					}
					var oExisitingFieldRenameCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oExisitingField, "Rename", {
						newValue : sNewText
					});
					that._aCommands.push(oExisitingFieldRenameCommand);
					that._aCommands.push(oExisitingFieldUnhideCommand);
					that._aCommands.push(oExisitingFieldMoveCommand);
				});
			} else {
				that._aCommands.push(Utils.createNewAddFieldsCommand(that.getSmartForm(), that.getSource().getParent(), that.getIndex(), aJsTypes, aFieldLabels, aFieldProperties, aFieldValues));
			}
		});
	};

	Group.prototype._getBindingPath = function(oDataField) {
		var sPath = "";
		if (oDataField.isComplexProperty) {
			sPath = oDataField.complexTypePropertyName + "/" + oDataField.name;
		} else {
			sPath = oDataField.name;
		}
		return sPath;
	};

	return Group;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Group.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Ungroup') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Ungroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Ungroup",['sap/ui/rta/command/BaseCommand', 'sap/ui/rta/Utils',
               'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'], function(BaseCommand, Utils, ControlAnalyzerFactory) {
	"use strict";

	/**
	 * Unhide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Unhide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Ungroup = BaseCommand.extend("sap.ui.rta.command.Ungroup", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "UngroupControl"
				},
				smartForm : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});


	Ungroup.prototype.init = function() {
		this._aCommands = [];
		this._aUngroupFields = [];
	};

	/**
	 * @override
	 */
	Ungroup.prototype.undo = function() {
		var aUngroupFields = this._aUngroupFields;
		var aJsTypes = [];
		var aFieldLabels = [];
		var aFieldValues = [];
		var aFieldProperties = [];
		if (aUngroupFields) {
			for (var i = 0; i < aUngroupFields.length; i++) {
				var oElement = sap.ui.getCore().byId(aUngroupFields[i].controlId);
				var oDataField = aUngroupFields[i];
				aJsTypes.push(oElement.getFields()[0].getMetadata().getName());
				aFieldLabels.push(oDataField["sap:label"]);
				var sPath = "";
				if (oDataField.isComplexProperty) {
					sPath = oDataField.complexTypePropertyName + "/" + oDataField.name;
				} else {
					sPath = oDataField.name;
				}
				aFieldValues.push(sPath);
				aFieldProperties.push(oDataField.valueProperty);
				var oFieldHideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oElement, "Hide");
				oFieldHideCommand.execute();
			}
			var oAddFieldCommand = Utils.createNewAddFieldsCommand(this.getSmartForm(), oElement.getParent(), 0, aJsTypes, aFieldLabels, aFieldProperties, aFieldValues);
			oAddFieldCommand.execute();
		}
	};

	Ungroup.prototype.execute = function() {
		var that = this;
		return this._createUngroupCommands().then(function() {
			for (var i = 0; i < that._aCommands.length; i++) {
				that._aCommands[i].execute();
			}
			that._updateElement();
			that.getElement().destroy();
		});
	};

	Ungroup.prototype.getCommands = function() {
		return this._aCommands;
	};

	Ungroup.prototype.serialize = function() {
		var aSeralized = [];
		for (var i = 0; i < this._aCommands.length; i++) {
			aSeralized.push(this._aCommands[i].serialize());
		}
		return aSeralized;
	};

	Ungroup.prototype._createUngroupCommands = function() {
		var that = this;
		var oGroupContainer = this.getElement().getParent();
		if (this._aCommands.length > 0) {
			return Promise.resolve();
		}

		var oSmartFormAnalyzer = sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory.getControlAnalyzerFor(this.getSmartForm());
		return oSmartFormAnalyzer.prepare().then(function() {
			var mHiddenElements = oSmartFormAnalyzer.getHiddenElements();
			var aFields = that.getElement().getFields();

			for (var i = 0; i < aFields.length; i++) {
				var oField = aFields[i];
				var mPaths = Utils.getElementBindingPaths(oField);
				var sFoundFieldPath = Utils.findFieldBindingPathInFieldsArray(mPaths, mHiddenElements);
				var oFoundDataField = mHiddenElements[sFoundFieldPath];
				oFoundDataField["valueProperty"] = mPaths[sFoundFieldPath].valueProperty;

				if (oFoundDataField && oFoundDataField.controlId) {
					var oGroupElement = sap.ui.getCore().byId(oFoundDataField.controlId);
					var oUnhideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oGroupElement, "Unhide");
					that._aCommands.push(oUnhideCommand);
				} else if (oFoundDataField && !oFoundDataField.controlId) {
					var sPath = that._getBindingPath(oFoundDataField);
					var oNewFieldCommand = Utils.createNewAddFieldsCommand(that.getSmartForm(), oGroupContainer, 0, [oField.getMetadata().getName()],
							[oFoundDataField["sap:label"]],[mPaths[oFoundDataField.name].valueProperty], [sPath]);
					that._aCommands.push(oNewFieldCommand);
					oFoundDataField["controlId"] = oNewFieldCommand.getNewControlId();
				}
				that._aUngroupFields.push(oFoundDataField);
			}
		});
	};

	Ungroup.prototype._updateElement = function() {
		sap.ui.getCore().applyChanges();
		if (this._aUngroupFields.length === 0 || (this.getElement() && !this.getElement().bIsDestroyed) ) {
			return;
		}
		var aPaths = [];
		for (var i = 0; i < this._aUngroupFields.length; i++) {
			aPaths.push(this._getBindingPath(this._aUngroupFields[i]));
		}
		var sElementId = Utils.createNewSmartFormGroupElementId(this.getSmartForm(), aPaths);
		this.setElement(sap.ui.getCore().byId(sElementId));
	};

	Ungroup.prototype._getBindingPath = function(oDataField) {
		var sPath = "";
		if (oDataField.isComplexProperty) {
			sPath = oDataField.complexTypePropertyName + "/" + oDataField.name;
		} else {
			sPath = oDataField.name;
		}
		return sPath;
	};

	return Ungroup;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Ungroup.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.RTAElementMover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.RTAElementMover.
jQuery.sap.declare('sap.ui.rta.plugin.RTAElementMover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.plugin.ElementMover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/RTAElementMover",[
  'sap/ui/dt/plugin/ElementMover',
	'sap/ui/dt/OverlayUtil',
	'sap/ui/dt/ElementUtil',
	'sap/ui/fl/Utils',
	'sap/ui/rta/Utils',
	'sap/ui/rta/command/CommandFactory'
],
function(ElementMover, OverlayUtil, ElementUtil, FlexUtils, Utils, CommandFactory) {
	"use strict";

	/**
	 * Constructor for a new RTAElementMover.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The RTAElementMover is responsible for the RTA specific adaption of element movements.
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.RTAElementMover
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RTAElementMover = ElementMover.extend("sap.ui.rta.plugin.RTAElementMover", /** @lends sap.ui.rta.plugin.RTAElementMover.prototype */ {
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				commandFactory : {
					type : "any",
					defaultValue : CommandFactory
				},
				movableTypes : {
					type : "string[]",
					defaultValue : ["sap.ui.core.Element"]
				}
			},
			associations : {
			},
			events : {
			}
		}
	});

	function fnGetRelevantContainer(oOverlay, bIsParentOverlay) {
		var oRelevantContainer;
		if (oOverlay.isInHiddenTree() && oOverlay.getPublicParentElementOverlay()) {
			oRelevantContainer = oOverlay.getPublicParentElementOverlay().getElementInstance();
		} else if (!oOverlay.isInHiddenTree()) {
			var oElement = oOverlay.getElementInstance();
			var oDesignTimeMetadata = oOverlay.getDesignTimeMetadata();
			if (bIsParentOverlay && !oDesignTimeMetadata.getData().getRelevantContainer) {
				oRelevantContainer = oElement;
			} else {
				oRelevantContainer = oDesignTimeMetadata.getRelevantContainer(oElement);
			}
		}
		return oRelevantContainer;
	}

	/**
	 * Predicate to compute movability of an type
	 * @public
	 * @return true if type is movable, false otherwise
	 */
	ElementMover.prototype.isMovableType = function(oElement) {
		//real check is part of checkMovable which has the overlay
		return true;
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean}          true if embedded, false if not
	 * @override
	 */
	RTAElementMover.prototype.checkMovable = function(oOverlay) {
		var bMovable = ElementMover.prototype.checkMovable.apply(this, arguments);
		var oElement;

		if (bMovable) {
			oElement = oOverlay.getElementInstance();
			bMovable = Utils.isEditable(oOverlay);

			if (bMovable){
				var oPublicAggregationOverlay = oOverlay.getPublicParentAggregationOverlay();
				if (oPublicAggregationOverlay){
					var oPublicAggregationDTMetadata = oPublicAggregationOverlay.getDesignTimeMetadata();
					var sMoveAction = oPublicAggregationDTMetadata.getMoveAction(oElement);
					bMovable = !!(sMoveAction);
				} else {
					bMovable = false;
				}
			}
		}

		return bMovable && Utils.hasParentStableId(oOverlay);
	};

	/**
	 * Checks droppability for aggregation overlays
	 * @param  {sap.ui.dt.Overlay} oAggregationOverlay aggregation overlay object
	 * @return {boolean}                     true if aggregation overlay is droppable, false if not
	 * @override
	 */
	RTAElementMover.prototype.checkTargetZone = function(oAggregationOverlay) {
		var bTargetZone = ElementMover.prototype.checkTargetZone.call(this, oAggregationOverlay);

		if (bTargetZone) {
			// check for same container
			var oMovedOverlay = this.getMovedOverlay();
			var oOverlay = oAggregationOverlay.getParent();
			var oMovedElementContainer = fnGetRelevantContainer(oMovedOverlay, false);
			var oTargetZoneContainer = fnGetRelevantContainer(oOverlay, true);

			if (!oMovedElementContainer || !oTargetZoneContainer) {
				return false;
			} else {
				bTargetZone = (oMovedElementContainer === oTargetZoneContainer) && Utils.isEditable(oOverlay, oMovedOverlay.getElementInstance());
			}
		}

		return bTargetZone;
	};

//	RTAElementMover.Default = new RTAElementMover();

	return RTAElementMover;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/RTAElementMover.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.additionalElements.AddElementsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.plugin.additionalElements.AddElementsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ScrollContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/additionalElements/AddElementsDialog",['jquery.sap.global',
			   'sap/ui/rta/library',
			   'sap/ui/rta/Utils',
			   'sap/ui/dt/OverlayRegistry',
			   'sap/ui/core/Control',
			   'sap/ui/commons/Label',
			   'sap/ui/commons/LabelDesign',
			   'sap/m/Dialog',
			   'sap/ui/model/json/JSONModel',
			   'sap/m/SearchField',
			   'sap/m/Button',
			   'sap/m/Toolbar',
			   'sap/m/ToolbarSpacer',
			   'sap/ui/model/Filter',
			   'sap/ui/model/FilterOperator',
			   'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory',
			   'sap/ui/rta/command/CommandFactory',
			   'sap/ui/rta/command/CompositeCommand',
			   'sap/m/List',
			   'sap/m/CustomListItem',
			   'sap/m/ListType',
			   'sap/m/ScrollContainer',
			   'sap/ui/model/Sorter',
			   'sap/ui/dt/ElementUtil',
			   'sap/m/VBox'
			   ],
			   function (jQuery,library,Utils,OverlayRegistry,Control,Label,LabelDesign,Dialog,JSONModel,SearchField,Button,Toolbar,ToolbarSpacer,Filter,FilterOperator,ControlAnalyzerFactory,CommandFactory,CompositeCommand,List,ListItem,ListType,ScrollContainer,Sorter,ElementUtil, VBox) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.plugin.additionalElements.AddElementsDialog control.
	 *
	 * @class Context - Dialog for available Fields in Runtime Authoring
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.44
	 * @alias sap.ui.rta.plugin.additionalElements.AddElementsDialog
	 * @experimental Since 1.44. This class is experimental and provides only limited functionality. Also the API might be
	 *			   changed in future.
	 */
	var AddElementsDialog = Control.extend("sap.ui.rta.plugin.additionalElements.AddElementsDialog", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				"customFieldEnabled" : {
					type: "boolean",
					defaultValue: false
				},
				"title" : {
					type: "string"
				}
			},
			aggregations : {
				"_dialog" : {
					type: "sap.ui.core.Control", visibility: "hidden", multiple: false
				}
			},
			events : {
				"opened" : {},
				"openCustomField" : {}
			}
		}
	});

	/**
	 * Initialize the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype.init = function() {
		var that = this;
		// Get messagebundle.properties for sap.ui.rta
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._bAscendingSortOrder = false;
		this._oDialog = new Dialog().addStyleClass("sapUIRtaFieldRepositoryDialog");
		this.setAggregation("_dialog", this._oDialog);
		var aContent = this._createContent();
		var aButtons = this._createButtons();
		aContent.forEach(function(oContent) {
			that._oDialog.addContent(oContent);
		});
		aButtons.forEach(function(oButton) {
			that._oDialog.addButton(oButton);
		});
		this._oDialog.setInitialFocus(this._oInput);
	};

	/**
	 * Create the Content of the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createContent = function() {
		var that = this;
		// SearchField
		this._oInput =  new SearchField({
			width : "100%",
			liveChange : [this._updateModelFilter, this]
		}).addStyleClass("resourceListIF");

		// Button for sorting the List
		var oResortButton = new Button({
			text : "",
			icon : "sap-icon://sort",
			press : [this._resortList, this]
		});

		// Button for creating Custom Fields
		this._oCustomFieldButton = new Button({
			text : "",
			icon : "sap-icon://add",
			tooltip : this._oTextResources.getText("BTN_FREP_CCF"),
			enabled : this.getCustomFieldEnabled(),
			press : [this._redirectToCustomFieldCreation, this]
		});

		// Toolbar
		this._oToolbarSpacer1 = new ToolbarSpacer();
		this.oInputFields = new Toolbar({
			content: [this._oInput, oResortButton, this._oToolbarSpacer1, this._oCustomFieldButton]
		});

		// Fields of the List
		var oFieldName = new Label({
			design: LabelDesign.Bold,
			tooltip: "{tooltip}",
			text: {
				parts: [{path: "label"}, {path: "referencedComplexPropertyName"}, {path: "duplicateComplexName"}],
				formatter: function(sLabel, sReferencedComplexPropertyName, bDuplicateComplexName) {
					if (bDuplicateComplexName && sReferencedComplexPropertyName) {
						sLabel += " (" + sReferencedComplexPropertyName + ")";
					}
					return sLabel;
				}
			}
		});

		var oFieldName2 = new Label({
			text: {
				parts: [{path: "originalLabel"}],
				formatter: function(sOriginalLabel) {
					if (sOriginalLabel) {
						return that._oTextResources.getText("LBL_FREP", sOriginalLabel);
					}
					return "";
				}
			},
			visible: {
				parts: [{path: "originalLabel"}],
				formatter: function(sOriginalLabel) {
					if (sOriginalLabel) {
						return true;
					}
					return false;
				}
			}
		});

		var oVBox = new VBox();
		oVBox.addItem(oFieldName);
		oVBox.addItem(oFieldName2);

		// List
		var oSorter = new Sorter("label", this._bAscendingSortOrder);
		this._oList = new List(
				{
					mode : "MultiSelect",
					includeItemInSelection : true,
					growing : false,
					growingScrollToLoad : false
				}).setNoDataText(this._oTextResources.getText("MSG_NO_FIELDS"));

		var oListItem = new ListItem({
			type: ListType.Active,
			selected : "{selected}",
			content : [oVBox]
		});

		this._oList.bindItems({path:"/elements", template: oListItem, sorter : oSorter});

		// Scrollcontainer containing the List
		// Needed for scrolling the List
		var oScrollContainer = new ScrollContainer({
			content: this._oList,
			vertical: true,
			horizontal: false
		}).addStyleClass("sapUIRtaCCDialogScrollContainer");

		return [this.oInputFields,
				oScrollContainer];
	};

	/**
	 * Create the Buttons of the Dialog (OK/Cancel)
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createButtons = function() {
		var oOKButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_OK"),
			press : [this._submitDialog, this]
		});
		var oCancelButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_CANCEL"),
			press : [this._cancelDialog, this]
		});
		return [oOKButton, oCancelButton];
	};

	/**
	 * Close the dialog.
	 */
	AddElementsDialog.prototype._submitDialog = function() {
		this._oDialog.close();
		this._fnResolve();
	};

	/**
	 * Close dialog and revert all change operations
	 */
	AddElementsDialog.prototype._cancelDialog = function() {
		// clear all variables
		this._oList.removeSelections();
		this._oDialog.close();
		this._fnReject();
	};

	/**
	 * Open the Field Repository Dialog
	 *
	 * @param {sap.ui.core.Control}
	 *		  oControl Currently selected control
	 */
	AddElementsDialog.prototype.open = function(oControl) {
		var that = this;

		return new Promise(function (resolve, reject) {
			that._fnResolve = resolve;
			that._fnReject = reject;
			that._oDialog.oPopup.attachOpened(function (){
				that.fireOpened();
			});
			// Makes sure the modal div element does not change the size of our application (which would result in
			// recalculation of our overlays)
			that._oDialog.open();
		});
	};

	/**
	 * Resort the list
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._resortList = function(oEvent) {
		this._bAscendingSortOrder = !this._bAscendingSortOrder;
		var oBinding = this._oList.getBinding("items");
		var aSorter = [];
		aSorter.push(new Sorter("label", this._bAscendingSortOrder));
		oBinding.sort(aSorter);
	};

	/**
	 * Updates the model on filter events
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._updateModelFilter = function(oEvent) {
		var sValue = oEvent.getParameter("newValue");
		var oBinding = this._oList.getBinding("items");
		if ((typeof sValue) === "string") {
			var oFilterLabel = new Filter("label", FilterOperator.Contains, sValue);
			var oFilterQuickInfo = new Filter("tooltip", FilterOperator.Contains, sValue);
			var oFilterLabelOrInfo = new Filter({ filters: [oFilterLabel, oFilterQuickInfo], and: false });
			oBinding.filter([oFilterLabelOrInfo]);
		} else {
			oBinding.filter([]);
		}
	};

	/**
	 * Fire an event to redirect to custom field creation
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._redirectToCustomFieldCreation = function(oEvent) {
		this.fireOpenCustomField();
		this._oDialog.close();
	};

	AddElementsDialog.prototype.setTitle = function(sTitle) {
		Control.prototype.setProperty.call(this, "title", sTitle, true);
		this._oDialog.setTitle(sTitle);
	};

	/**
	 * Enables the Custom Field Creation button
	 *
	 * @param {boolean}
	 *		  bCustomFieldEnabled true shows the button, false not
	 */
	AddElementsDialog.prototype.setCustomFieldEnabled = function(bCustomFieldEnabled) {
		Control.prototype.setProperty.call(this, "customFieldEnabled", bCustomFieldEnabled, true);
		this._oCustomFieldButton.setEnabled(bCustomFieldEnabled);
	};

	return AddElementsDialog;

}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/additionalElements/AddElementsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.AddElementsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.ui.AddElementsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ScrollContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/AddElementsDialog",['jquery.sap.global',
			   'sap/ui/rta/library',
			   'sap/ui/rta/Utils',
			   'sap/ui/dt/OverlayRegistry',
			   'sap/ui/core/Control',
			   'sap/ui/commons/Label',
			   'sap/ui/commons/LabelDesign',
			   'sap/m/Dialog',
			   'sap/ui/model/json/JSONModel',
			   'sap/m/SearchField',
			   'sap/m/Button',
			   'sap/m/Toolbar',
			   'sap/m/ToolbarSpacer',
			   'sap/ui/model/Filter',
			   'sap/ui/model/FilterOperator',
			   'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory',
			   'sap/ui/rta/command/CommandFactory',
			   'sap/ui/rta/command/CompositeCommand',
			   'sap/m/List',
			   'sap/m/CustomListItem',
			   'sap/m/ListType',
			   'sap/m/ScrollContainer',
			   'sap/ui/model/Sorter',
			   'sap/ui/dt/ElementUtil'
			   ],
			   function (jQuery,library,Utils,OverlayRegistry,Control,Label,LabelDesign,Dialog,JSONModel,SearchField,Button,Toolbar,ToolbarSpacer,Filter,FilterOperator,ControlAnalyzerFactory,CommandFactory,CompositeCommand,List,ListItem,ListType,ScrollContainer,Sorter,ElementUtil) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.AddElementsDialog control.
	 *
	 * @class Context - Dialog for available Fields in Runtime Authoring
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias AddElementsDialog
	 * @experimental Since 1.32. This class is experimental and provides only limited functionality. Also the API might be
	 *			   changed in future.
	 */
	var AddElementsDialog = Control.extend("sap.ui.rta.ui.AddElementsDialog", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				/** The root control which the runtime authoring should handle */
				"commandStack" : {
					type : "sap.ui.core.Control"
				}
			},
			associations : {
				/** The root control which the runtime authoring should handle */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			events : {
				"opened" : {},
				"closed" : {},
				"openCustomField" : {}
			}
		}
	});

	/**
	 * Initialize the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype.init = function() {
		this._aData = [];
		var that = this;
		this._oModel = new JSONModel();
		// Get messagebundle.properties for sap.ui.rta
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._bAscendingSortOrder = false;
		this._oDialog = this._createDialog();
		var aContent = this._createContent();
		var aButtons = this._createButtons();
		aContent.forEach(function(oContent) {
			that._oDialog.addContent(oContent);
		});
		aButtons.forEach(function(oButton) {
			that._oDialog.addButton(oButton);
		});
		this._oDialog.setInitialFocus(this._oInput);
	};

	/**
	 * Create the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createDialog = function() {
		var oDialog;
		oDialog = new Dialog({
			title : this._oTextResources.getText("HEADER_FREP")
		}).addStyleClass("sapUIRtaFieldRepositoryDialog");


		return oDialog;
	};

	/**
	 * Create the Content of the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createContent = function() {
		// SearchField
		this._oInput =  new SearchField({
			width : "100%",
			liveChange : [this._updateModelFilter, this]
		}).addStyleClass("resourceListIF");

		// Button for sorting the List
		var oResortButton = new Button({
			text : "",
			icon : "sap-icon://sort",
			press : [this._resortList, this]
		});

		// Button for creating Custom Fields
		this._oCustomFieldButton = new Button({
			text : "",
			icon : "sap-icon://add",
			tooltip : this._oTextResources.getText("BTN_FREP_CCF"),
			enabled : false,
			press : [this._redirectToCustomFieldCreation, this]
		});

		// Toolbar
		this._oToolbarSpacer1 = new ToolbarSpacer();
		this.oInputFields = new Toolbar({
			content: [this._oInput, oResortButton, this._oToolbarSpacer1, this._oCustomFieldButton]
		});

		// Fields of the List
		var oFieldName = new Label({
			design: LabelDesign.Bold,
			tooltip: {
				parts: [{path: "quickInfo"},{path: "fieldLabel"}],
				formatter: function(quickInfo, fieldLabel) {
											if (!quickInfo) {
													return fieldLabel;
											}
											return quickInfo;
									}
			},
			text: "{fieldLabel}"
		});

		// List
		var oSorter = new Sorter("fieldLabel", this._bAscendingSortOrder);
		this._oList = new List(
				{
					mode : "MultiSelect",
					includeItemInSelection : true,
					growing : false,
					growingScrollToLoad : false,
					select: [this._fnSelected, this]
				}).setNoDataText(this._oTextResources.getText("MSG_NO_FIELDS"));

		var oListItem = new ListItem({
			type: ListType.Active,
			selected : "{checked}",
			content : [oFieldName]
		});
		this._oModel.setData({modelData: this._aData});
		this._oList.setModel(this._oModel);
		this._oList.bindItems({path:"/modelData", template: oListItem, sorter : oSorter});

		// Scrollcontainer containing the List
		// Needed for scrolling the List
		var oScrollContainer = new ScrollContainer({
			content: this._oList,
			vertical: true,
			horizontal: false
		}).addStyleClass("sapUIRtaCCDialogScrollContainer");

		return [this.oInputFields,
				oScrollContainer];
	};

	/**
	 * Create the Buttons of the Dialog (OK/Cancel)
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createButtons = function() {
		var oOKButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_OK"),
			press : [this.applyChanges, this]
		});
		var oCancelButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_CANCEL"),
			press : [this.cancelDialog, this]
		});
		return [oOKButton, oCancelButton];
	};

	/**
	 * Close the dialog.
	 */
	AddElementsDialog.prototype.applyChanges = function() {
		// push and Execute the Commands onto the command stack
		if (this._oCompositeCommand.getCommands().length > 0){
			this.getCommandStack().pushAndExecute(this._oCompositeCommand);
		}
		// clear all variables
		this._oList.removeSelections();
		this._oCompositeCommand = null;
		this._mCommands = [];
		this._oCurrentAnalyzer = null;
		this._oCurrentSelectedBlock = null;
		this._oDialog.close();
	};

	/**
	 * Close dialog and revert all change operations
	 */
	AddElementsDialog.prototype.cancelDialog = function() {
		// clear all variables
		this._oList.removeSelections();
		this._oCompositeCommand = null;
		this._mCommands = [];
		this._oCurrentAnalyzer = null;
		this._oCurrentSelectedBlock = null;
		this._oDialog.close();
	};

	/**
	 * Function to be called when a field is selected in list
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._fnSelected = function(oEvent) {
		var oItem = oEvent.getParameter("listItem");
		var oContextObject = oItem.getBindingContext().getObject();
		var sItemId = oContextObject.name ? oContextObject.name : null;
		if (!sItemId) {
			sItemId = oContextObject.controlId ? oContextObject.controlId : null;
		}
		if (sItemId) {
			var oSavedCommandForElement = this._mCommands[sItemId];
			this._executeCommandForSelectedElement(oItem, oSavedCommandForElement, sItemId);
		} else {
			jQuery.sap.log.error("Change could not be applied because of missing id of listItem\n");
		}
	};

	/**
	 * Evaluate target index for Move Command in case of a move inside the same group
	 *
	 * @param {sap.ui.core.Control}
	 *		oSourceContainer {object} source container of the element to be moved
	 * @param {sap.ui.core.Control}
	 *		oTargetContainer {object} target container of the element to be moved
	 * @param {int}
	 *		iSourceIndex source index of the element to be moved
	 * @param {int}
	 *		iTargetIndex target index of the element to be moved (to be evaluated)
	 * @returns {int} iTargetIndex the evaluated target index
	 * @private
	 */
	AddElementsDialog.prototype._evaluateTargetIndex = function(oSourceContainer, oTargetContainer, iSourceIndex, iTargetIndex) {
		var iIndex = (oSourceContainer === oTargetContainer && iSourceIndex < iTargetIndex) ? iTargetIndex - 1 : iTargetIndex;
		return iIndex;
	};

	/**
	 * Function to analyze whether a move command is necessary in case of unhiding elements
	 *
	 * @param {sap.ui.core.Control}
	 *		  oCurrentSelectedBlock {object} mChangeData
	 * @private
	 */
	AddElementsDialog.prototype._getMoveCommand = function(oCurrentSelectedBlock, mChangeData, oSelectedControl) {
		var oResult;

		var oSourceElement = sap.ui.getCore().byId(mChangeData.controlId);
		var oSourceParent = oSourceElement ? oSourceElement.getParent() : null;
		var oSourceParentDesignTimeMetadata = OverlayRegistry.getOverlay(oCurrentSelectedBlock).getDesignTimeMetadata();
		var iSourceIndex;
		var iTargetIndex;
		if (oCurrentSelectedBlock && oSourceParent && (oCurrentSelectedBlock.getId() !== oSourceElement.getId())) {
			if (ElementUtil.isInstanceOf(oCurrentSelectedBlock, "sap.ui.layout.form.SimpleForm")) {
				var oTargetContainer;
				if (ElementUtil.isInstanceOf(oSelectedControl, "sap.ui.layout.form.FormContainer")) {
					iTargetIndex = oSelectedControl.getAggregation("formElements").length;
					oTargetContainer = oSelectedControl;
				} else if (ElementUtil.isInstanceOf(oSelectedControl, "sap.ui.layout.form.FormElement")) {
					iTargetIndex = this._oCurrentAnalyzer._determineIndexOfFormElement(oSelectedControl, true);
					oTargetContainer = oSelectedControl.getParent();
				}
				iSourceIndex = this._oCurrentAnalyzer._determineIndexOfFormElement(oSourceElement.getParent(), false);
				var oSourceContainer = oSourceElement.getParent().getParent();
				iTargetIndex = this._evaluateTargetIndex(oSourceContainer, oTargetContainer, iSourceIndex, iTargetIndex);

				oResult = CommandFactory.getCommandFor(oCurrentSelectedBlock, "Move", {
					movedElements : [{
						element : oSourceElement.getParent(),
						sourceIndex : iSourceIndex,
						targetIndex : iTargetIndex
					}],
					source : {
						publicParent : oCurrentSelectedBlock,
						publicAggregation: "form",
						parent : oSourceContainer,
						aggregation : "formElements"
					},
					target : {
						publicParent : oCurrentSelectedBlock,
						publicAggregation: "form",
						parent : oTargetContainer,
						aggregation : "formElements"
					}
				}, oSourceParentDesignTimeMetadata);

			} else {
				var aSourceChildren = ElementUtil.getAggregation(oSourceParent, "formElements");
				if (aSourceChildren.length > 0) {
					iSourceIndex = aSourceChildren.indexOf(oSourceElement);
					var aTargetChildren = ElementUtil.getAggregation(oCurrentSelectedBlock, "formElements");
					var fnClass = oCurrentSelectedBlock.getMetadata().getClass();
					var iTargetIndex = (oSelectedControl instanceof fnClass) ? aTargetChildren.length : aTargetChildren.indexOf(oSelectedControl) + 1;
					iTargetIndex = this._evaluateTargetIndex(oSourceParent, oCurrentSelectedBlock, iSourceIndex, iTargetIndex);

					oResult = CommandFactory.getCommandFor(oSourceParent, "Move", {
						movedElements : [{
							element : oSourceElement,
							sourceIndex : iSourceIndex,
							targetIndex : iTargetIndex
						}],
						source : {
							parent : oSourceParent,
							publicAggregation : oSourceElement.sParentAggregationName,
							aggregation : oSourceElement.sParentAggregationName
						},
						target : {
							parent : oCurrentSelectedBlock,
							publicAggregation : "formElements",
							aggregation : "formElements"
						}
					}, oSourceParentDesignTimeMetadata);
				}
			}
		}
		return oResult;
	};

	/**
	 * Function which executes the command for the selected element
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._executeCommandForSelectedElement = function(oItem, oCommand, sItemId) {
		var bIsChecked = oItem.getSelected();
		var that = this;

		// If already a command exists, then the new command is remove selection
		if (oCommand){
			delete that._mCommands[sItemId];
			that._oCompositeCommand.removeCommand(oCommand);
			return;
		}
		// There is no Command for this Item in the list
		return this._oCurrentAnalyzer.createChangeData(oItem, this._oCurrentSelectedBlock, !bIsChecked, this._oSelectedControl).then(function(oChangeData) {
			if (oChangeData) {
				// New Field on the screen
				if (oChangeData.changeType === "addField") {
					oCommand = CommandFactory.getCommandFor(that._oCurrentSelectedBlock, "Add", {
						index : oChangeData.index,
						newControlId : oChangeData.newControlId,
						labels : [oChangeData.fieldLabel],
						jsTypes : [oChangeData.jsType],
						fieldValues : [oChangeData.fieldValue],
						valuePropertys : [oChangeData.valueProperty]
					});
					that._mCommands[sItemId] = oCommand;
					that._oCompositeCommand.insertCommand(oCommand);
				} else if (oChangeData.changeType === "unhideControl") {
					// Field has already been on the screen and has been hidden
					if (oChangeData.controlType && oChangeData.controlType === "SimpleForm") {
						var oCtrl = sap.ui.getCore().byId(oChangeData.controlId).getParent();
						oCommand = CommandFactory.getCommandFor(oCtrl, "Unhide");
					} else {
						oCommand = CommandFactory.getCommandFor(sap.ui.getCore().byId(oChangeData.controlId), "Unhide");
					}
					var oMoveCommand = that._getMoveCommand(that._oCurrentSelectedBlock, oChangeData, that._oSelectedControl);
					if (oMoveCommand) {
						var oComposit = new CompositeCommand();
						oComposit.addCommand(oMoveCommand);
						oComposit.addCommand(oCommand);
						oCommand = oComposit;
					}
					that._mCommands[sItemId] = oCommand;
					that._oCompositeCommand.insertCommand(oCommand);
				} else if (oChangeData.changeType === "unstashControl") {
					oCommand = CommandFactory.getCommandFor(sap.ui.getCore().byId(oChangeData.controlId), "Unstash");
					oCommand.setParentAggregationName(oChangeData.parentAggregationName);
					oCommand.setIndex(oChangeData.iTargetIndex);
					that._mCommands[sItemId] = oCommand;
					that._oCompositeCommand.insertCommand(oCommand);
				}
			} else {
				// undo selection, as it was prevented inside change controller
				oItem.setSelected(!bIsChecked);
			}
		}).catch(function(oError) {
			jQuery.sap.log.error("Change could not be applied \n" + oError);
		});
	};

	/**
	 * Open the Field Repository Dialog
	 *
	 * @param {sap.ui.core.Control}
	 *		  oControl Currently selected control
	 */
	AddElementsDialog.prototype.open = function(oControl) {
		var that = this;
		this._oSelectedControl = oControl;
		this._mCommands = [];
		this._oCompositeCommand = new CompositeCommand();

		if (oControl.getMetadata().getName().indexOf("ObjectPage") !== -1) {
			this._oDialog.setTitle(this._oTextResources.getText("HEADER_SREP"));
		} else {
			this._oDialog.setTitle(this._oTextResources.getText("HEADER_FREP"));
		}

		Utils.isServiceUpToDate(oControl).then(function(){
			that._oCurrentAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oControl);
			return that._oCurrentAnalyzer.prepare();
		}).then(function() {
			var oCustomFields = that._oCurrentAnalyzer.getCustomFieldAvailable ? that._oCurrentAnalyzer.getCustomFieldAvailable() : false;
			if (oCustomFields) {
					that.setShowCreateCustomField(true);
					that._oCurrentFieldExtInfo = oCustomFields;
					that.attachEventOnce('openCustomField', null, that._onOpenCustomField, that);
			} else {
				that.setShowCreateCustomField(false);
			}
		}).then(function(){
			// Get a change controller that is able to handle the actual selected control
			if (that._oCurrentAnalyzer) {
				that._oCurrentSelectedBlock = that._oCurrentAnalyzer.getSelectedBlock(oControl);

				// TODO: remove url-parameter
				if (/[&?](sap-rta-oldmodel=(true|x)[&#]?)+/i.test(window.location.search)) {
					that._oCurrentAnalyzer.getCustomizeControlModel(oControl, true).then(function(aFieldCollection) {
						that._oModel.setData({modelData: aFieldCollection});
						that._oDialog.oPopup.attachOpened(function (){
							that.fireOpened();
						});
						// Makes sure the modal div element does not change the size of our application (which would result in
						// recalculation of our overlays)
						that._oDialog.open();
					});
				} else {
						var mAvailableElements = that._oCurrentAnalyzer.getAvailableElements();
						that._oModel.setData({modelData:mAvailableElements});
						that._oDialog.oPopup.attachOpened(function (){
							that.fireOpened();
						});
						// Makes sure the modal div element does not change the size of our application (which would result in
						// recalculation of our overlays)
						that._oDialog.open();
				}
			}
		})["catch"](function() {
			that.fireOpened();
		});

	};


	/**
	 * Resort the list
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._resortList = function(oEvent) {
		this._bAscendingSortOrder = !this._bAscendingSortOrder;
		var oBinding = this._oList.getBinding("items");
		var aSorter = [];
		aSorter.push(new Sorter("fieldLabel", this._bAscendingSortOrder));
		oBinding.sort(aSorter);
	};

	/**
	 * Fire an event to redirect to custom field creation
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._redirectToCustomFieldCreation = function(oEvent) {
		this.fireOpenCustomField();
		this._oDialog.close();
	};

	/**
	 * Enables the Custom Field Creation button
	 *
	 * @param {boolean}
	 *		  bShowCCF true shows the button, false not
	 */
	AddElementsDialog.prototype.setShowCreateCustomField = function(bShowCCF) {
		this._oCustomFieldButton.setEnabled(bShowCCF);
	};

	/**
	 * Function called when custom field button was pressed
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 */
	AddElementsDialog.prototype._onOpenCustomField = function(oEvent) {
		// open field ext ui
		var oCrossAppNav = sap.ushell && sap.ushell.Container
		&& sap.ushell.Container.getService("CrossApplicationNavigation");
		var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
			target : {
				semanticObject : "CustomField",
				action : "develop"
			},
			params : {
				businessContexts : this._oCurrentFieldExtInfo.BusinessContexts,
				serviceName : this._oCurrentFieldExtInfo.ServiceName,
				serviceVersion : this._oCurrentFieldExtInfo.ServiceVersion,
				entityType : this._oCurrentFieldExtInfo.EntityType
			}
		}));

		Utils.openNewWindow(sHrefForFieldExtensionUi);
	};
	/**
	 * Updates the model on filter events
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._updateModelFilter = function(oEvent) {
		var sValue = oEvent.getParameter("newValue");
		var oBinding = this._oList.getBinding("items");
		if ((typeof sValue) === "string") {
			var oFilterLabel = new Filter("fieldLabel", FilterOperator.Contains, sValue);
			var oFilterQuickInfo = new Filter("quickInfo", FilterOperator.Contains, sValue);
			var oFilterLabelOrInfo = new Filter({ filters: [oFilterLabel, oFilterQuickInfo], and: false });
			oBinding.filter([oFilterLabelOrInfo]);
		} else {
			oBinding.filter([]);
		}
	};

	return AddElementsDialog;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ui/AddElementsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.SettingsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.ui.SettingsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/SettingsDialog",['jquery.sap.global',
			'sap/ui/rta/library',
			'sap/ui/core/Control',
			'sap/m/Dialog',
			'sap/ui/layout/VerticalLayout',
			'sap/m/Label',
			'sap/m/Input',
			'sap/m/Select',
			'sap/ui/core/Item',
			'sap/m/Button',
			'sap/m/CheckBox',
			'sap/ui/rta/command/CommandFactory',
			'sap/ui/rta/command/CompositeCommand',
			'sap/ui/dt/ElementUtil'
	],
	function (jQuery,
			library,
			Control,
			Dialog,
			VerticalLayout,
			Label,
			Input,
			Select,
			Item,
			Button,
			CheckBox,
			CommandFactory,
			CompositeCommand,
			ElementUtil
	) {
	"use strict";

		/**
		 * Constructor for a new sap.ui.rta.SettingsDialog control.
		 * @extends sap.ui.core.Control
		 * @author SAP SE
		 * @version 1.44.4
		 * @constructor
		 * @private
		 * @since 1.34
		 * @alias SettingsDialog
		 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might
		 *               be changed in future.
		 */
	var SettingsDialog = Control.extend("sap.ui.rta.ui.SettingsDialog", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				"commandStack" : {
					type : "sap.ui.core.Control"
				}
			},
			associations : {
				"element" : {
					type : "sap.ui.core.Element"
				}
			}
		}
	});

	/**
	 * Initialize the Dialog
	 *
	 * @private
	 */
	SettingsDialog.prototype.init = function() {
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._oDialog = this._createDialog();
	};

	/**
	 * Create the Dialog
	 *
	 * @private
	 */
	SettingsDialog.prototype._createDialog = function() {
		return new Dialog({
			title : this._oTextResources.getText("HEADER_SETTINGS"),
			contentHeight : "500px",
			draggable: true,
			buttons : [
				new Button({
					text : this._oTextResources.getText("BTN_FREP_OK"),
					press : [this._applyChangesAndClose, this]
				}),
				new Button({
					text : this._oTextResources.getText("BTN_FREP_CANCEL"),
					press : [this._cancelDialog, this]
				})
			]
		}).addStyleClass("sapUiPopupWithPadding").addStyleClass("sapUiSizeCompact");
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._applyChangesAndClose = function() {
		this._applyChanges();
		this._oDialog.close();
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._iterateExecutedCommands = function(fnCallback) {
		var that = this;

		Object.keys(this._mCommands).forEach(function(sPropertyName) {
			fnCallback(that._mCommands[sPropertyName]);
		});
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._applyChanges = function() {
		var oCompositeCommand = new CompositeCommand();
		this._iterateExecutedCommands(function(oCommand) {
			oCompositeCommand.addCommand(oCommand);
		});
		if (oCompositeCommand.getCommands().length) {
			this.getCommandStack().pushExecutedCommand(oCompositeCommand);
		}
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._cancelDialog = function() {
		this._iterateExecutedCommands(function(oCommand) {
			oCommand.undo();
		});

		this._oDialog.close();
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._executePropertyChangeCommand = function(oElement, sPropertyName, vNewValue, vOldValue) {
		if (!this._mCommands[sPropertyName]) {
			var oPropertyChangeCommand = CommandFactory.getCommandFor(oElement, "property", {
				propertyName : sPropertyName,
				newValue : vNewValue,
				oldValue : vOldValue
			});
			this._mCommands[sPropertyName] = oPropertyChangeCommand;
			oPropertyChangeCommand.execute();
		} else {
			this._mCommands[sPropertyName].undo();
			delete this._mCommands[sPropertyName];
		}
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createBooleanEditor = function(oElement, sPropertyName, bPropertyValue) {
		var that = this;

		var oCheckBox = new CheckBox({
			text : sPropertyName,
			selected : bPropertyValue
		});

		oCheckBox.attachSelect(function(oEvent) {
			var bNewValue = oEvent.getParameter("selected");
			var bOldValue = !bNewValue;
			that._executePropertyChangeCommand(oElement, sPropertyName, bNewValue, bOldValue);
		});

		return oCheckBox;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createStringEditor = function(oElement, sPropertyName, sPropertyValue) {
		var that = this;

		var oInput = new Input({value : sPropertyValue});

		oInput.attachChange(function(oEvent) {
			var sNewValue = oEvent.getParameter("value");
			// TODO : get old value via elementUtil
			var sOldValue = sPropertyValue;
			that._executePropertyChangeCommand(oElement, sPropertyName, sNewValue, sOldValue);
		});

		return oInput;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createEnumEditor = function(oElement, oPropertyTypeDescription, sPropertyName, vPropertyValue) {
		var that = this;


		var oSelect = new Select();
		Object.keys(oPropertyTypeDescription).forEach(function(sKey) {
			oSelect.addItem(new Item({
				text : sKey,
				key : oPropertyTypeDescription[sKey]
			}));
		});

		oSelect.setSelectedKey(vPropertyValue);

		oSelect.attachChange(function(oEvent) {
			var oItem = oEvent.getParameter("selectedItem");
			if (oItem) {
				var vNewValue = oItem.getKey();
				var vOldValue = vPropertyValue;
				that._executePropertyChangeCommand(oElement, sPropertyName, vNewValue, vOldValue);
			}
		});

		return oSelect;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._updateDialogContent = function(oElement) {
		var that = this;

		this._oDialog.removeAllContent();
		var oVerticalLayout = new VerticalLayout();
		var mProperties = oElement.getMetadata().getAllProperties();
		Object.keys(mProperties).forEach(function(sPropertyName) {
			var oPropertyChangeControl;
			var oPropertyMetadata = mProperties[sPropertyName];
			// TODO : elementUtil for properties getters
			var vPropertyValue = oElement[oPropertyMetadata._sGetter]();

			if (oPropertyMetadata.type === "boolean") {
				oPropertyChangeControl = that._createBooleanEditor(oElement, sPropertyName, vPropertyValue);
				oVerticalLayout.addContent(oPropertyChangeControl);
			} else 	if (oPropertyMetadata.type === "string" || oPropertyMetadata.type === "sap.ui.core.CSSSize") {
				oPropertyChangeControl = new VerticalLayout();
				var oInput = that._createStringEditor(oElement, sPropertyName, vPropertyValue);

				oPropertyChangeControl.addContent(new Label({
					text : sPropertyName,
					labelFor : oInput.getId()
				}));
				oPropertyChangeControl.addContent(oInput);
				oPropertyChangeControl.addStyleClass("sapUiRtaDialogEntryWithMargin");
			} else {
				var oPropertyTypeDescription = jQuery.sap.getObject(oPropertyMetadata.type);
				if (oPropertyTypeDescription) {
					oPropertyChangeControl = new VerticalLayout();
					var oDropdown = that._createEnumEditor(oElement, oPropertyTypeDescription, sPropertyName, vPropertyValue);

					oPropertyChangeControl.addContent(new Label({
						text : sPropertyName,
						labelFor : oDropdown.getId()
					}));
					oPropertyChangeControl.addContent(oDropdown);
					oPropertyChangeControl.addStyleClass("sapUiRtaDialogEntryWithMargin");
				}
			}

			if (oPropertyChangeControl) {
				oVerticalLayout.addContent(oPropertyChangeControl);
			}
		});
		this._oDialog.addContent(oVerticalLayout);
	};

	/**
	 * Open the Settings Dialog
	 *
	 * @param {sap.ui.core.Element}
	 *          oElement Currently selected control
	 */
	SettingsDialog.prototype.open = function(oElement) {
		this._mCommands = {};

		this._updateDialogContent(oElement);

		// Makes sure the modal div element does not change the size of our application (which would result in recalculation of our overlays)
		this._oDialog.open();
	};

	return SettingsDialog;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ui/SettingsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.DragDrop') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.DragDrop.
jQuery.sap.declare('sap.ui.rta.plugin.DragDrop'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.ControlDragDrop'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/DragDrop",[
	'jquery.sap.global', 
	'sap/ui/dt/plugin/ControlDragDrop',
	'sap/ui/rta/plugin/RTAElementMover'
],
function(jQuery,
		ControlDragDrop, 
		RTAElementMover) {
	"use strict";

	/**
	 * Constructor for a new DragDrop plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The DragDrop plugin adds functionality/styling required for RTA.
	 * @extends sap.ui.dt.ControlDragDrop
	 *
	 * @author SAP SE
	 * @version 1.44.4
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.plugin.DragDrop
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var DragDrop = ControlDragDrop.extend("sap.ui.rta.plugin.DragDrop", /** @lends sap.ui.rta.plugin.DragDrop.prototype */ {		
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				elementMover : {
					type : "sap.ui.dt.plugin.ElementMover"
				}
			},
			associations : {
			},
			events : {
				dragStarted : {}
			}
		}
	});
	
	/**
	 * @override
	 */
	DragDrop.prototype.init = function() {
		ControlDragDrop.prototype.init.apply(this, arguments);
		this.setElementMover(new RTAElementMover());
	};

	/**
	 * Register an overlay
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.registerElementOverlay = function(oOverlay) {
		if (oOverlay.isMovable()) {
			this._attachMovableBrowserEvents(oOverlay);
		}

		ControlDragDrop.prototype.registerElementOverlay.apply(this, arguments);
	};


	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.deregisterElementOverlay = function(oOverlay) {
		ControlDragDrop.prototype.deregisterElementOverlay.apply(this, arguments);
		this._detachMovableBrowserEvents(oOverlay);
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	DragDrop.prototype._attachMovableBrowserEvents = function(oOverlay) {
		oOverlay.attachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.attachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};
	
	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	DragDrop.prototype._detachMovableBrowserEvents = function(oOverlay) {
		oOverlay.detachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.detachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};


	/**
	 * Additionally to super->onDragStart this method stores the parent's id in an instance variable
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onDragStart = function(oOverlay) {
		this.fireDragStarted();
		
		ControlDragDrop.prototype.onDragStart.apply(this, arguments);

		this.getDesignTime().getSelection().forEach(function(oOverlay) {
			oOverlay.setSelected(false);
		});

		oOverlay.$().addClass("sapUiRtaOverlayPlaceholder");
	};
	
	/**
	 * Additionally to super->onDragEnd this method takes care about moving the element
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onDragEnd = function(oOverlay) {
		ControlDragDrop.prototype.onDragEnd.apply(this, arguments);

		oOverlay.$().removeClass("sapUiRtaOverlayPlaceholder");
		oOverlay.setSelected(true);
		oOverlay.focus();	
	};

	/**
	 * If overlay is draggable attach browser events o overlay. If not remove them.
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onMovableChange = function(oOverlay) {
		ControlDragDrop.prototype.onMovableChange.apply(this, arguments);
		if (oOverlay.isMovable()) {
			this._attachMovableBrowserEvents(oOverlay);
		} else {
			this._detachMovableBrowserEvents(oOverlay);
		}
	};
	/**
	 * Handle mouse over event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	DragDrop.prototype._onMouseOver = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (oOverlay !== this._oPreviousHoverTarget) {
			if (this._oPreviousHoverTarget) {
				this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
			}
			this._oPreviousHoverTarget = oOverlay;
			oOverlay.$().addClass("sapUiRtaOverlayHover");
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
		
	};

	/**
	 * Handle mouse leave event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	DragDrop.prototype._onMouseLeave = function(oEvent) {
		if (this._oPreviousHoverTarget) {
			this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
		}
		delete this._oPreviousHoverTarget;
		oEvent.preventDefault();
		oEvent.stopPropagation();
	};

	return DragDrop;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/DragDrop.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.RuntimeAuthoring') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.Main.
jQuery.sap.declare('sap.ui.rta.RuntimeAuthoring'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.DesignTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.Overlay'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.CutPaste'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.ContextMenu'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.TabHandling'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.transport.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.transport.TransportSelection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/RuntimeAuthoring",['jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/ui/rta/ui/ToolsMenu', 'sap/ui/dt/ElementUtil',
		'sap/ui/dt/DesignTime', 'sap/ui/dt/OverlayRegistry', 'sap/ui/dt/Overlay', 'sap/ui/rta/command/Stack',
		'sap/ui/rta/command/CommandFactory', 'sap/ui/rta/command/LREPSerializer', 'sap/ui/rta/plugin/Rename',
		'sap/ui/rta/plugin/DragDrop', 'sap/ui/rta/plugin/RTAElementMover', 'sap/ui/dt/plugin/CutPaste',
		'sap/ui/rta/plugin/Remove', 'sap/ui/rta/plugin/CreateContainer',
		'sap/ui/rta/plugin/additionalElements/AdditionalElementsPlugin','sap/ui/rta/plugin/additionalElements/AddElementsDialog',
		'sap/ui/rta/plugin/additionalElements/AdditionalElementsAnalyzer',
		'sap/ui/rta/plugin/Selection', 'sap/ui/rta/plugin/MultiSelection', 'sap/ui/rta/plugin/Settings',
		'sap/ui/dt/plugin/ContextMenu', 'sap/ui/dt/plugin/TabHandling', 'sap/ui/fl/FlexControllerFactory',
		'sap/ui/rta/ui/SettingsDialog', 'sap/ui/rta/ui/AddElementsDialog', './Utils',
		'sap/ui/fl/transport/Transports', 'sap/ui/fl/transport/TransportSelection','sap/ui/fl/Utils', 'sap/ui/fl/registry/Settings', 'sap/m/MessageBox', 'sap/m/MessageToast',
		'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'], function(
		jQuery, ManagedObject, ToolsMenu, ElementUtil, DesignTime, OverlayRegistry, Overlay, CommandStack,
		CommandFactory, LREPSerializer, RTARenamePlugin, RTADragDropPlugin, RTAElementMover, CutPastePlugin,
		RemovePlugin, CreateContainerPlugin, AdditionalElementsPlugin, AdditionalElementsDialog, AdditionalElementsAnalyzer,
		SelectionPlugin, RTAMultiSelectionPlugin, SettingsPlugin, ContextMenuPlugin, TabHandlingPlugin, FlexControllerFactory,
		SettingsDialog, AddElementsDialog, Utils, Transports, TransportSelection, FlexUtils, FlexSettings, MessageBox, MessageToast,
		ControlAnalyzerFactory) {
	"use strict";
	/**
	 * Constructor for a new sap.ui.rta.RuntimeAuthoring class.
	 *
	 * @class The runtime authoring allows to adapt the fields of a running application.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.44.4
	 * @constructor
	 * @public
	 * @since 1.30
	 * @alias sap.ui.rta.RuntimeAuthoring
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
	 *               might be changed in future.
	 */
	var RuntimeAuthoring = ManagedObject.extend("sap.ui.rta.RuntimeAuthoring", /** @lends sap.ui.rta.RuntimeAuthoring.prototype */
	{
		metadata : {
			// ---- control specific ----
			library : "sap.ui.rta",
			associations : {
				/** The root control which the runtime authoring should handle */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			properties : {
				/** The URL which is called when the custom field dialog is opened */
				"customFieldUrl" : "string",

				/** Whether the create custom field button should be shown */
				"showCreateCustomField" : "boolean",

				/** Whether the create custom field button should be shown */
				"showToolbars" : {
					type : "boolean",
					defaultValue : true
				},

				/** Temporary property : whether to show a dialog for changing control's properties#
				 * should be removed after DTA will fully switch to a property panel
				 */
				"showSettingsDialog" : {
					type : "boolean",
					defaultValue : true
				},

				/** Whether the window unload dialog should be shown */
				"showWindowUnloadDialog" : {
					type : "boolean",
					defaultValue : true
				},

				"commandStack" : {
					type : "sap.ui.rta.command.Stack"
				}
			},
			events : {
				/** Fired when the runtime authoring is started */
				"start" : {},

				/** Fired when the runtime authoring is stopped */
				"stop" : {},

				/** Fired when the runtime authoring failed to start */
				"failed" : {},

				/**
				 * Event fired when a DesignTime selection is changed
				 */
				"selectionChange" : {
					parameters : {
						selection : { type : "sap.ui.dt.Overlay[]" }
					}
				},

				/**
				 * Fired when the undo/redo stack has changed, undo/redo buttons can be updated
				 */
				"undoRedoStackModified" : {}
			}
		},
		_sAppTitle : null

	});

	/**
	 * @override
	 */
	RuntimeAuthoring.prototype.init = function() {
		this._onCommandStackModified = this._adaptUndoRedoButtons.bind(this);
	};

	/**
	 * Start Runtime Authoring
	 *
	 * @public
	 */
	RuntimeAuthoring.prototype.start = function() {
		var that = this;

		this._aPopups = [];

		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._aSupportedControls = ["sap.ui.comp.smartform.Group", "sap.uxap.ObjectPageSection",
				"sap.uxap.ObjectPageLayout"];

		// Create DesignTime
		if (!this._oDesignTime) {
			this._oRootControl = sap.ui.getCore().byId(this.getRootControl());

			this._oRTAElementMover = new RTAElementMover();

			this._oRTAElementMover.setCommandFactory(CommandFactory);
			this._oRTADragDropPlugin = new RTADragDropPlugin({
				elementMover : this._oRTAElementMover,
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);

			this._oRTADragDropPlugin.attachDragStarted(this._handleStopCutPaste, this);
			this._oCutPastePlugin = new CutPastePlugin({
				elementMover : this._oRTAElementMover,
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);

			this._oRemovePlugin = new RemovePlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);

			this._oAdditionalElementsPlugin = new AdditionalElementsPlugin({
				commandFactory : CommandFactory,
				analyzer : AdditionalElementsAnalyzer,
				dialog : new AdditionalElementsDialog()
			}).attachElementModified(this._handleElementModified, this);

			this._oRenamePlugin = new RTARenamePlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);
			this._oRenamePlugin.attachEditable(this._handleStopCutPaste, this);

			this._oSelectionPlugin = new SelectionPlugin();

			this._oMultiSelectionPlugin = new RTAMultiSelectionPlugin({
				multiSelectionTypes : ["sap.ui.comp.smartform.GroupElement"]
			});

			this._oSettingsPlugin = new SettingsPlugin({
				commandFactory : CommandFactory,
				commandStack : this.getCommandStack()
			}).attachElementModified(this._handleElementModified, this);

			this._oCreateContainerPlugin = new CreateContainerPlugin({
				commandFactory : CommandFactory
			}).attachElementModified(this._handleElementModified, this);

			this._oContextMenuPlugin = new ContextMenuPlugin();
			this._oTabHandlingPlugin = new TabHandlingPlugin();
			this._buildContextMenu();

			jQuery.sap.measure.start("rta.dt.startup","Measurement of RTA: DesignTime start up");
			this._oDesignTime = new DesignTime({
				rootElements : [this._oRootControl],
				plugins : [this._oRTADragDropPlugin, this._oCutPastePlugin, this._oRemovePlugin, this._oRenamePlugin,
						this._oSelectionPlugin, this._oMultiSelectionPlugin, this._oSettingsPlugin, this._oCreateContainerPlugin, this._oContextMenuPlugin,
						this._oTabHandlingPlugin, this._oAdditionalElementsPlugin]
			});

			jQuery(Overlay.getOverlayContainer()).addClass("sapUiRta");

			this._oDesignTime.attachSelectionChange(function(oEvent) {
				that.fireSelectionChange({selection: oEvent.getParameter("selection")});
			}, this);

			this._oDesignTime.attachEventOnce("synced", function() {
				that.fireStart();
				jQuery.sap.measure.end("rta.dt.startup","Measurement of RTA: DesignTime start up");
			});

			this._oDesignTime.attachEventOnce("syncFailed", function() {
				that.fireFailed();
			});
		}

		if (this.getShowToolbars()) {
			// Create ToolsMenu
			this._createToolsMenu();
			// set focus initially on top toolbar
			var oDelegate = {
				"onAfterRendering" : function() {
					this._oToolsMenu._oToolBar.focus();
					this._oToolsMenu._oToolBar.removeEventDelegate(oDelegate, this);
				}
			};
			this._oToolsMenu._oToolBar.addEventDelegate(oDelegate, this);

			// Show Toolbar(s)
			this._oToolsMenu.show();
		}

		// Register function for checking unsaved before leaving RTA
		this._oldUnloadHandler = window.onbeforeunload;
		window.onbeforeunload = this._onUnload.bind(this);
	};

	var fnShowTechnicalError = function(vError) {
		var sErrorMessage = vError.message || vError.status || vError;
		var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		jQuery.sap.log.error("Failed to transfer runtime adaptation changes to layered repository", sErrorMessage);
		jQuery.sap.require("sap.m.MessageBox");
		var sMsg = oTextResources.getText("MSG_LREP_TRANSFER_ERROR") + "\n"
				+ oTextResources.getText("MSG_ERROR_REASON", sErrorMessage);
		sap.m.MessageBox.error(sMsg);
	};

	/**
	 * @override
	 */
	RuntimeAuthoring.prototype.setCommandStack = function(oCommandStack) {
		var  oOldCommandStack = this.getProperty("commandStack");
		if (oOldCommandStack) {
			oOldCommandStack.detachModified(this._onCommandStackModified);
		}

		if (this._oInternalCommandStack) {
			this._oInternalCommandStack.destroy();
			delete this._oInternalCommandStack;
		}

		var oResult = this.setProperty("commandStack", oCommandStack);

		if (oCommandStack) {
			oCommandStack.attachModified(this._onCommandStackModified);
		}

		if (this._oSettingsPlugin) {
			this._oSettingsPlugin.setCommandStack(oCommandStack);
		}

		return oResult;
	};

	/**
	 *
	 * @override
	 */
	RuntimeAuthoring.prototype.getCommandStack = function() {
		var oCommandStack = this.getProperty("commandStack");
		if (!oCommandStack) {
			oCommandStack = new CommandStack();
			this._oInternalCommandStack = oCommandStack;
		}
		this.setCommandStack(oCommandStack);

		return oCommandStack;
	};


	/**
	 * adapt the enablement of undo/redo/reset/transport button
	 * @private
	 */
	RuntimeAuthoring.prototype._adaptUndoRedoButtons = function() {
		if (this.getShowToolbars()) {
			var oCommandStack = this.getCommandStack();
			var bCanUndo = oCommandStack.canUndo();
			var bCanRedo = oCommandStack.canRedo();
			this._oToolsMenu.adaptUndoRedoEnablement(bCanUndo, bCanRedo);
			this._oToolsMenu.adaptTransportEnablement(this._bChangesExist || bCanUndo);
			this._oToolsMenu.adaptRestoreEnablement(this._bChangesExist || bCanUndo);
		}
		this.fireUndoRedoStackModified();
	};

	RuntimeAuthoring.prototype._closeToolBars = function() {
		if (this.getShowToolbars()) {
			return this._oToolsMenu.hide();
		} else {
			return Promise.resolve();
		}
	};

	/**
	 * Returns a selection from the DesignTime
	 * @return {sap.ui.dt.Overlay[]} selected overlays
	 * @public
	 */
	RuntimeAuthoring.prototype.getSelection = function() {
		if (this._oDesignTime) {
			return this._oDesignTime.getSelection();
		} else {
			return [];
		}
	};

	/**
	 * stop Runtime Authoring
	 *
	 * @public
	 * @param {boolean} bDontSaveChanges - stop RTA with or w/o saving changes
	 * @returns {Promise} promise with no parameters
	 */
	RuntimeAuthoring.prototype.stop = function(bDontSaveChanges) {
		var that = this;

		return ((bDontSaveChanges) ? Promise.resolve() : this._serializeToLrep())
			.then(this._closeToolBars.bind(this))
				.then(function(){
					that.exit();
					that.fireStop();
		})['catch'](fnShowTechnicalError);
	};

	RuntimeAuthoring.prototype.restore = function() {
		this._onRestore();
	};

	RuntimeAuthoring.prototype.transport = function() {
		this._onTransport();
	};

	// ---- backward compatibility API
	RuntimeAuthoring.prototype.undo = function() {
		this._onUndo();
	};

	RuntimeAuthoring.prototype.redo = function() {
		this._onRedo();
	};

	RuntimeAuthoring.prototype.canUndo = function() {
		return this.getCommandStack().canUndo();
	};

	RuntimeAuthoring.prototype.canRedo = function() {
		return this.getCommandStack().canRedo();
	};
	// ---- backward compatibility API

	/**
	 * Check for unsaved changes before Leaving Runtime Authoring
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onUnload = function() {
		var oCommandStack = this.getCommandStack();
		var bUnsaved = oCommandStack.canUndo() || oCommandStack.canRedo();
		if (bUnsaved && this.getShowWindowUnloadDialog()) {
			var sMessage = this._oTextResources.getText("MSG_UNSAVED_CHANGES");
			return sMessage;
		} else {
			window.onbeforeunload = this._oldUnloadHandler;
		}
	};

	RuntimeAuthoring.prototype._serializeToLrep = function() {
		var oSerializer = new LREPSerializer({commandStack : this.getCommandStack(), rootControl : this.getRootControl()});
		return oSerializer.saveCommands();
	};

	RuntimeAuthoring.prototype._onUndo = function() {
		this._handleStopCutPaste();

		this.getCommandStack().undo();
	};

	RuntimeAuthoring.prototype._onRedo = function() {
		this._handleStopCutPaste();

		this.getCommandStack().redo();
	};

	RuntimeAuthoring.prototype._createToolsMenu = function() {
		var that = this;
		if (!this._oToolsMenu) {
			this._sAppTitle = this._getApplicationTitle();
			this._oToolsMenu = new ToolsMenu();
			this._oToolsMenu.createToolbar();
			this._oToolsMenu.setTitle(this._sAppTitle);
			this._oToolsMenu.setRootControl(this._oRootControl);
			this._oToolsMenu.checkTransportAvailable().then(function(bResult){
				that._bATOTransportEnabled = bResult;
			});
			this._checkChangesExist().then(function(bResult){
				that._bChangesExist = bResult;
				that._oToolsMenu.adaptTransportEnablement(bResult);
				that._oToolsMenu.adaptRestoreEnablement(bResult);
			});
			this._oToolsMenu.attachToolbarClose(this.stop.bind(this, false), this);
			this._oToolsMenu.attachTransport(this._onTransport, this);
			this._oToolsMenu.attachRestore(this._onRestore, this);
			this._oToolsMenu.attachUndo(this._onUndo, this);
			this._oToolsMenu.attachRedo(this._onRedo, this);
		}
	};

	/**
	 * Exit Runtime Authoring - destroy all controls
	 *
	 * @protected
	 */
	RuntimeAuthoring.prototype.exit = function() {
		if (this._oDesignTime) {
			jQuery(Overlay.getOverlayContainer()).removeClass("sapUiRta");
			this._oDesignTime.destroy();
			this._oDesignTime = null;
		}
		if (this._oToolsMenu) {
			this._oToolsMenu.destroy();
			this._oToolsMenu = null;
		}
		this.setCommandStack(null);
		window.onbeforeunload = this._oldUnloadHandler;
	};

	/**
	 * Function to handle ABAP transport of the changes
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onTransport = function() {
		var that = this;

		function fnHandleAllErrors(oError) {
			if (oError.message === 'createAndApply failed') {
				return;
			}
			FlexUtils.log.error("transport error" + oError);
			return that._showMessage(MessageBox.Icon.ERROR, "HEADER_TRANSPORT_ERROR", "MSG_TRANSPORT_ERROR", oError);
		}

		this._handleStopCutPaste();

		return this._openSelection()
			.then(this._checkTransportInfo)
			.then(function(oTransportInfo) {
				if (oTransportInfo) {
					var oFlexController = FlexControllerFactory.createForControl(that._oRootControl);
					return that._serializeToLrep().then(function () {
						return oFlexController.getComponentChanges().then(function (aAllLocalChanges) {
							if (aAllLocalChanges.length > 0) {
								return that._createAndApplyChanges(aAllLocalChanges, oFlexController)
									.then(that._transportAllLocalChanges.bind(that, oTransportInfo, oFlexController))
										['catch'](fnHandleAllErrors);
							}
						});
					})['catch'](fnShowTechnicalError);
				}
			}
		);
	};

	RuntimeAuthoring.prototype._checkTransportInfo = function(oTransportInfo) {
		if (oTransportInfo && oTransportInfo.transport && oTransportInfo.packageName !== "$TMP") {
			return oTransportInfo;
		} else {
			return false;
		}
	};

	RuntimeAuthoring.prototype._openSelection = function () {
	   return new TransportSelection().openTransportSelection(null, this._oRootControl);
	};

	/**
	 * Create and apply changes
	 *
	 * Function is copied from FormP13nHandler. We need all changes for various controls.
	 * The function _createAndApplyChanges in the FormP13Handler calls that._getFlexController()
	 * which is specific for the SmartForm
	 *
	 * @private
	 * @param {array} aChangeSpecificData - array of objects with change specific data
	 * @param {sap.ui.fl.FlexController} - instance of FlexController
	 * @returns {Promise} promise that resolves with no parameters
	 */
	RuntimeAuthoring.prototype._createAndApplyChanges = function(aChangeSpecificData, oFlexController) {

		var that = this;

		return Promise.resolve().then(function() {

			function fnValidChanges(oChangeSpecificData) {
				return oChangeSpecificData && oChangeSpecificData.selector && oChangeSpecificData.selector.id;
			}

			aChangeSpecificData.filter(fnValidChanges).forEach(function(oChangeSpecificData) {
				var oControl = sap.ui.getCore().byId(oChangeSpecificData.selector.id);
				oFlexController.createAndApplyChange(oChangeSpecificData, oControl);
			});
		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply error: " + oError);
			return oError;
		}).then(function(oError) {
			return oFlexController.saveAll().then(function() {
				if (oError) {
					throw oError;
				}
			});
		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply and/or save error: " + oError);
			return that._showMessage(MessageBox.Icon.ERROR, "HEADER_TRANSPORT_APPLYSAVE_ERROR", "MSG_TRANSPORT_APPLYSAVE_ERROR", oError);
		});
	};

	/**
	 * Delete all changes for current layer and root control's component
	 *
	 * @private
	 * @return {Promise} the promise from the FlexController
	 */
	RuntimeAuthoring.prototype._deleteChanges = function() {
		var that = this;
		var oTransportSelection = new TransportSelection();
		var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);

		oFlexController.getComponentChanges().then(function(aChanges) {
			return FlexSettings.getInstance(FlexUtils.getComponentClassName(that._oRootControl)).then(function(oSettings) {
				if (!oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured()) {
					return oTransportSelection.setTransports(aChanges, that._oRootControl);
				}
			}).then(function() {
				return oFlexController.discardChanges(aChanges);
			}).then(function() {
				return window.location.reload();
			});
		})["catch"](function(oError) {
			return that._showMessage(MessageBox.Icon.ERROR, "HEADER_RESTORE_FAILED", "MSG_RESTORE_FAILED", oError);
		});
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._showMessage = function(oMessageType, sTitleKey, sMessageKey, oError) {
		if (oError) {
			var sMessage = this._oTextResources.getText(sMessageKey, [oError.message || oError]);
		} else {
			var sMessage = this._oTextResources.getText(sMessageKey);
		}
		var sTitle = this._oTextResources.getText(sTitleKey);
		return new Promise(function(resolve) {
			MessageBox.show(sMessage, {
				icon: oMessageType,
				title: sTitle,
				onClose: resolve
			});
		});
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._showMessageToast = function(sMessageKey) {
		var sMessage = this._oTextResources.getText(sMessageKey);

		MessageToast.show(sMessage);
	};

	/**
	 * Check if restart of RTA is needed
	 * the RTA FLP plugin will check this
	 * and restart RTA if needed
	 *
	 * @public
	 * @static
	 * @returns {Boolean} if restart is needed
	 */
	RuntimeAuthoring.needsRestart = function() {

		var bRestart = !!window.localStorage.getItem("sap.ui.rta.restart");
		return bRestart;
	};

	/**
	 * Enable restart of RTA
	 * the RTA FLP plugin would handle the restart
	 *
	 * @public
	 * @static
	 */
	RuntimeAuthoring.enableRestart = function() {

		window.localStorage.setItem("sap.ui.rta.restart", true);
	};

	/**
	 * Disable restart of RTA
	 * the RTA FLP plugin whould handle the restart
	 *
	 * @public
	 * @static
	 */
	RuntimeAuthoring.disableRestart = function() {

		window.localStorage.removeItem("sap.ui.rta.restart");
	};

	/**
	 * Discard all LREP changes and restores the default app state,
	 * opens a MessageBox where the user can confirm
	 * the restoring to the default app state
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onRestore = function() {
		var that = this;

		var sMessage = this._oTextResources.getText("FORM_PERS_RESET_MESSAGE");
		var sTitle = this._oTextResources.getText("FORM_PERS_RESET_TITLE");

		this._handleStopCutPaste();

		function fnConfirmDiscardAllChanges(sAction) {
			if (sAction === "OK") {
				that.getCommandStack().removeAllCommands();
				RuntimeAuthoring.enableRestart();
				that._deleteChanges();
			}
		}

		MessageBox.confirm(sMessage, {
			icon: MessageBox.Icon.WARNING,
			title : sTitle,
			onClose : fnConfirmDiscardAllChanges
		});
	};

	/**
	 * Prepare all changes and assign them to an existing transport
	 *
	 * @private
	 * @param {object} oTransportInfo - information about the selected transport
	 * @param {sap.ui.fl.FlexController} - instance of FlexController
	 * @returns {Promise} Promise which resolves without parameters
	 */
	RuntimeAuthoring.prototype._transportAllLocalChanges = function(oTransportInfo, oFlexController) {

		var that = this;

		return oFlexController.getComponentChanges().then(function(aAllLocalChanges) {

			// Pass list of changes to be transported with transport request to backend
			var oTransports = new Transports();
			var aTransportData = oTransports._convertToChangeTransportData(aAllLocalChanges);
			var oTransportParams = {};
			//packageName is '' in CUSTOMER layer (no package input field in transport dialog)
			oTransportParams.package = oTransportInfo.packageName;
			oTransportParams.transportId = oTransportInfo.transport;
			oTransportParams.changeIds = aTransportData;

			return oTransports.makeChangesTransportable(oTransportParams).then(function() {

				// remove the $TMP package from all changes; has been done on the server as well,
				// but is not reflected in the client cache until the application is reloaded
				aAllLocalChanges.forEach(function(oChange) {

					if (oChange.getPackage() === '$TMP') {
						var oDefinition = oChange.getDefinition();
						oDefinition.packageName = oTransportInfo.packageName;
						oChange.setResponse(oDefinition);
					}
				});
			}).then(function() {
				that._showMessageToast("MSG_TRANSPORT_SUCCESS");
			});
		});
	};

	/**
	 * Checks the two parent-information maps for equality
	 *
	 * @param {object}
	 *          oInfo1 *
	 * @param {object}
	 *          oInfo2
	 * @return {boolean} true if equal, false otherwise
	 * @private
	 */
	RuntimeAuthoring.prototype._isEqualParentInfo = function(oInfo1, oInfo2) {
		var oResult = !!oInfo1 && !!oInfo2;
		if (oResult && (oInfo1.parent && oInfo2.parent)) {
			oResult = oInfo1.parent.getId() === oInfo2.parent.getId();
		}
		if (oResult && (oInfo1.index || oInfo2.index)) {
			oResult = oInfo1.index === oInfo2.index;
		}
		if (oResult && (oInfo1.aggregation || oInfo2.aggregation)) {
			oResult = oInfo1.aggregation === oInfo2.aggregation;
		}
		return oResult;
	};

	/**
	 * Function to handle modification of an element
	 *
	 * @param {sap.ui.base.Event}
	 *          oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleElementModified = function(oEvent) {
		this._handleStopCutPaste();

		var oCommand = oEvent.getParameter("command");
		if (oCommand instanceof sap.ui.rta.command.BaseCommand) {
			this.getCommandStack().pushAndExecute(oCommand);
		}
	};

	/**
	 * Function to handle hiding an element by the context menu
	 *
	 * @param {object}
	 *          oOverlay object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleRemoveElement = function(aOverlays) {
		this._oRemovePlugin.removeElement(aOverlays);
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._openSettingsDialog = function(oEventOrOverlays) {
		var aSelectedOverlays = (oEventOrOverlays.mParameters) ? oEventOrOverlays.getParameter("selectedOverlays") : oEventOrOverlays;
		var oElement = aSelectedOverlays[0].getElementInstance();
		this._handleStopCutPaste();

		if (!this._oSettingsDialog) {
			this._oSettingsDialog = new SettingsDialog();
		}
		this._oSettingsDialog.setCommandStack(this.getCommandStack());
		this._oSettingsDialog.open(oElement);
	};


	var fnMultiSelectionInactive = function(oOverlay) {
		return this._oDesignTime.getSelection().length < 2;
	};

	var fnHasParentStableId = function(oOverlay) {
		return Utils.hasParentStableId(oOverlay);
	};

	var fnIsMovable = function(oOverlay) {
		return oOverlay.getMovable();
	};

	var fnIsGroupElement = function(oOverlay) {
		return oOverlay.getElementInstance().getMetadata().getName() === "sap.ui.comp.smartform.GroupElement";
	};

	var fnIsGroup = function(oOverlay) {
		return oOverlay.getElementInstance().getMetadata().getName() === "sap.ui.comp.smartform.Group";
	};

	var fnIsSimpleFormElement = function(oOverlay) {
		var oElement = oOverlay.getElementInstance();
		var oAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oElement);
		if (oAnalyzer._getSimpleFormContainer) {
			return !!oAnalyzer._getSimpleFormContainer(oElement);
		} else {
			return false;
		}
	};

	var fnIsSection = function(oOverlay) {
		var oElement = oOverlay.getElementInstance();
		return oElement.getMetadata().getName() === "sap.uxap.ObjectPageSection";
	};

	var fnIsObjectPage = function(oOverlay) {
		var oElement = oOverlay.getElementInstance();
		return oElement.getMetadata().getName() === "sap.uxap.ObjectPageLayout";
	};

	var fnIsRemoveAvailable = function(oOverlay) {
		return this._oRemovePlugin.isRemoveAvailable(oOverlay);
	};

	var fnIsRemoveEnabled = function(oOverlay) {
		return this._oRemovePlugin.isRemoveEnabled(oOverlay);
	};

	var fnIsRenameAvailable = function(oOverlay) {
		return this._oRenamePlugin.isRenameAvailable(oOverlay);
	};

	var fnIsRenameEnabled = function(oOverlay) {
		return this._oRenamePlugin.isRenameEnabled(oOverlay);
	};

	var fnIsSettingsAvailable = function(oOverlay) {
		return this._oSettingsPlugin.isSettingsAvailable(oOverlay);
	};

	var fnIsSettingsEnabled = function(oOverlay) {
		return this._oSettingsPlugin.isSettingsEnabled(oOverlay);
	};

	RuntimeAuthoring.prototype._buildContextMenu = function() {
		var that = this;

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_RENAME_LABEL",
			text : that._oTextResources.getText("CTX_RENAME"),
			handler : this._handleRename.bind(this),
			available : fnIsRenameAvailable.bind(this),
			enabled : function(oOverlay) {
				return (fnMultiSelectionInactive.call(that, oOverlay) && fnIsRenameEnabled.call(that, oOverlay));
			}
		});
		if (/[&?](sap-rta-new-add=(true|x)[&#]?)+/i.test(window.location.search)) {
			this._oContextMenuPlugin.addMenuItem({
				id : "CTX_ADD_ELEMENTS_AS_SIBLING",
				text : that._oAdditionalElementsPlugin.getContextMenuTitle.bind(that._oAdditionalElementsPlugin, true),
				handler : that._oAdditionalElementsPlugin.showAvailableElements.bind(that._oAdditionalElementsPlugin, true),
				available : that._oAdditionalElementsPlugin.isAvailable.bind(that._oAdditionalElementsPlugin, true),
				enabled : function(oOverlay) {
					return fnMultiSelectionInactive.call(that, oOverlay) && that._oAdditionalElementsPlugin.isEnabled(true, oOverlay);
				}
			});

			this._oContextMenuPlugin.addMenuItem({
				id : "CTX_ADD_ELEMENTS_AS_CHILD",
				text : that._oAdditionalElementsPlugin.getContextMenuTitle.bind(that._oAdditionalElementsPlugin, false),
				handler : that._oAdditionalElementsPlugin.showAvailableElements.bind(that._oAdditionalElementsPlugin, false),
				available : that._oAdditionalElementsPlugin.isAvailable.bind(that._oAdditionalElementsPlugin, false),
				enabled : function(oOverlay) {
					return fnMultiSelectionInactive.call(that, oOverlay) && that._oAdditionalElementsPlugin.isEnabled(false, oOverlay);
				}
			});
		} else {
			this._oContextMenuPlugin.addMenuItem({
				id : "CTX_ADD_FORM_FIELD",
				text : that._oTextResources.getText("CTX_ADD_FIELD"),
				handler : this._handleAddElement.bind(this),
				available : function(oOverlay) {
					var oElement = oOverlay.getElementInstance();
					return fnIsSimpleFormElement(oOverlay) &&
					((ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement")) ||
					(ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer") && oElement.getTitle() !== null) ||
					(ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer") && oElement.getToolbar() !== null));
				},
				enabled : fnHasParentStableId
			});

			this._oContextMenuPlugin.addMenuItem({
				id : "CTX_ADD_FIELD",
				text : that._oTextResources.getText("CTX_ADD_FIELD"),
				handler : this._handleAddElement.bind(this),
				available : function(oOverlay) {
					return fnIsGroup(oOverlay) || fnIsGroupElement(oOverlay);
				},
				enabled : function(oOverlay) {
					return fnMultiSelectionInactive.call(that, oOverlay) && ( fnIsGroup(oOverlay) || fnHasParentStableId(oOverlay) );
				}
			});

			this._oContextMenuPlugin.addMenuItem({
				id : "CTX_ADD_SECTION",
				text : that._oTextResources.getText("CTX_ADD_SECTION"),
				handler : this._handleAddElement.bind(this),
				available : function(oOverlay) {
					return fnIsSection(oOverlay) || fnIsObjectPage(oOverlay);
				},
				enabled : function(oOverlay) {
					return Utils.hasObjectPageLayoutInvisibleSections.bind(Utils) && ( fnIsObjectPage(oOverlay) || fnHasParentStableId(oOverlay) );
				}
			});
		}

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_CREATE_CHILD_CONTAINER",
			text : this._oCreateContainerPlugin.getCreateContainerText.bind(this._oCreateContainerPlugin, false),
			handler : this._createContainer.bind(this, false),
			available : this._oCreateContainerPlugin.isCreateAvailable.bind(this._oCreateContainerPlugin, false),
			enabled : this._oCreateContainerPlugin.isCreateEnabled.bind(this._oCreateContainerPlugin, false)
		});

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_CREATE_SIBLING_CONTAINER",
			text : this._oCreateContainerPlugin.getCreateContainerText.bind(this._oCreateContainerPlugin, true),
			handler : this._createContainer.bind(this, true),
			available : this._oCreateContainerPlugin.isCreateAvailable.bind(this._oCreateContainerPlugin, true),
			enabled : this._oCreateContainerPlugin.isCreateEnabled.bind(this._oCreateContainerPlugin, true)
		});

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_REMOVE",
			text : that._oTextResources.getText("CTX_REMOVE"), // text can be defined also in designtime metadata
			handler : this._handleRemoveElement.bind(this),
			available : fnIsRemoveAvailable.bind(this),
			enabled : fnIsRemoveEnabled.bind(this)
		});

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_CUT",
			text : that._oTextResources.getText("CTX_CUT"),
			handler : this._handleCutElement.bind(this),
			available : fnIsMovable,
			enabled : function () {
				return that._oDesignTime.getSelection().length === 1;
			}
		});

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_PASTE",
			text : that._oTextResources.getText("CTX_PASTE"),
			handler : this._handlePasteElement.bind(this),
			available : fnIsMovable,
			enabled : function(oOverlay) {
				return that._oCutPastePlugin.isElementPasteable(oOverlay);
			}
		});

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_GROUP_FIELDS",
			text : that._oTextResources.getText("CTX_GROUP_FIELDS"),
			handler : this._handleGroupElements.bind(this),
			available : function() {
				var aSelectedOverlays = that._oDesignTime.getSelection();
				return (aSelectedOverlays.length > 1);
			},
			enabled : function() {
				var bIsEnabled = true;
				var aSelectedElementFields = [];
				var aSelectedOverlays = that._oDesignTime.getSelection();
				aSelectedOverlays.forEach(function(oOverlay) {
					var oElement = oOverlay.getElementInstance();
					aSelectedElementFields = aSelectedElementFields.concat(oElement.getFields());
				});
				if (aSelectedOverlays.length > 3 || aSelectedElementFields.length > 3) {
					return false;
				}
				aSelectedOverlays.some(function(oOverlay) {
					var oElement = oOverlay.getElementInstance();
					if (Utils.hasGroupElementUnBoundFields(oElement)) {
						bIsEnabled = false;
						return true;
					}
				});
				return bIsEnabled;
			}
		});

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_UNGROUP_FIELDS",
			text : that._oTextResources.getText("CTX_UNGROUP_FIELDS"),
			handler : this._handleUngroupElements.bind(this),
			available : function(oOverlay) {
				var oElement = oOverlay.getElementInstance();
				var aSelectedOverlays = that._oDesignTime.getSelection();
				return fnIsGroupElement(oOverlay) && oElement.getFields().length > 1 && aSelectedOverlays.length < 2;
			},
			enabled : function(oOverlay) {
				var oElement = oOverlay.getElementInstance();
				return !Utils.hasGroupElementUnBoundFields(oElement);
			}
		});

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_SETTINGS",
			text : that._oTextResources.getText("CTX_SETTINGS"),
			handler : this._handleSettings.bind(this),
			available : fnIsSettingsAvailable.bind(this),
			enabled : fnIsSettingsEnabled.bind(this)
		});
	};

	RuntimeAuthoring.prototype._createContainer = function(bSibling, aOverlays) {
		this._handleStopCutPaste();
		var that = this;

		var oOverlay = aOverlays[0];
		var oNewContainerOverlay = this._oCreateContainerPlugin.handleCreate(bSibling, oOverlay);

		var oDelegate = {
			"onAfterRendering" : function() {
				// TODO : remove timeout
				setTimeout(function() {
					that._oRenamePlugin.startEdit(oNewContainerOverlay);
				}, 0);
				oNewContainerOverlay.removeEventDelegate(oDelegate);
			}
		};

		oNewContainerOverlay.addEventDelegate(oDelegate);

	};

	/**
	 * Function to handle renaming a label
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleRename = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this._oRenamePlugin.startEdit(oOverlay);
	};

	/**
	 * Function to handle adding an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleAddElement = function(aOverlays) {
		this._handleStopCutPaste();
		var oSelectedElement = aOverlays[0].getElementInstance();

		if (!this._oAddElementsDialog) {
			this._oAddElementsDialog = new AddElementsDialog({
				rootControl : this._oRootControl
			});
		}
		this._oAddElementsDialog.setCommandStack(this.getCommandStack());
		this._oAddElementsDialog.open(oSelectedElement);
	};

	/**
	 * Function to handle cutting an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleCutElement = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this._oCutPastePlugin.cut(oOverlay);
	};

	/**
	 * Function to handle pasting an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handlePasteElement = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this._oCutPastePlugin.paste(oOverlay);
	};

	/**
	 * Handler function to stop cut and paste, because some other operation has started
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleStopCutPaste = function() {
		this._oCutPastePlugin.stopCutAndPaste();
	};

	/**
	 * Function to handle grouping of sap.ui.comp.smartfield.SmartFields
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleGroupElements = function() {
		this._handleStopCutPaste();

		var aSelectedOverlays = this._oDesignTime.getSelection();
		var oSelectedGroupElement = this._oContextMenuPlugin.getContextElement();
		var oTargetGroupContainer = Utils.getClosestTypeForControl(oSelectedGroupElement, "sap.ui.comp.smartform.Group");
		var iTargetIndex = oTargetGroupContainer.getGroupElements().indexOf(oSelectedGroupElement);

		var oGroupContainer = Utils.findSupportedBlock(oSelectedGroupElement, this._aSupportedControls);
		var oSmartForm = Utils.getClosestTypeForControl(oSelectedGroupElement, "sap.ui.comp.smartform.SmartForm");
		var aToGroupElements = [];
		for (var i = 0; i < aSelectedOverlays.length; i++) {
			var oElement = aSelectedOverlays[i].getElementInstance();
			aToGroupElements.push(oElement);
		}

		var oGroupCommand = CommandFactory.getCommandFor(oGroupContainer, "group", {
			source : oSelectedGroupElement,
			index : iTargetIndex,
			groupFields : aToGroupElements,
			smartForm : oSmartForm
		});
		this.getCommandStack().pushAndExecute(oGroupCommand);
	};

	/**
	 * Function to handle ungrouping of sap.ui.comp.smartform.GroupElements
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleUngroupElements = function() {
		this._handleStopCutPaste();

		var oSelectedGroupElement = this._oContextMenuPlugin.getContextElement();
		var oSmartForm = Utils.getClosestTypeForControl(oSelectedGroupElement, "sap.ui.comp.smartform.SmartForm");
		var oUngroupCommand = CommandFactory.getCommandFor(oSelectedGroupElement, "ungroup", {
			smartForm : oSmartForm
		});

		this.getCommandStack().pushAndExecute(oUngroupCommand);
	};

	/**
	 * Function to handle settings
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleSettings = function(aOverlays) {
		this._oSettingsPlugin.handleSettings(aOverlays);
	};

	/**
	 * @param {sap.ui.core.Element}
	 *          oElement The element which exists in the smart form
	 * @return {sap.ui.comp.smartform.SmartForm} the closest smart form found
	 * @private
	 */
	RuntimeAuthoring.prototype._getSmartFormForElement = function(oElement) {
		while (oElement && !ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
			oElement = oElement.getParent();
		}

		return oElement;
	};

	/**
	 * Get the Title of the Application from the manifest.json
	 *
	 * @private
	 * @returns {String} the application title or empty string
	 */
	RuntimeAuthoring.prototype._getApplicationTitle = function() {

		var sTitle = "";
		var oComponent = sap.ui.core.Component.getOwnerComponentFor(this._oRootControl);
		if (oComponent) {
			sTitle = oComponent.getMetadata().getManifestEntry("sap.app").title;
		}
		return sTitle;
	};

	/**
	 * Check if Changes exists
	 * @private
	 * @returns {Promise}
	 */
	RuntimeAuthoring.prototype._checkChangesExist = function() {
		var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);
		if (oFlexController.getComponentName().length > 0) {
			return oFlexController.getComponentChanges().then(function(aAllLocalChanges) {
				return aAllLocalChanges.length > 0;
			});
		} else {
			return Promise.resolve(false);
		}
	};

	return RuntimeAuthoring;

}, /* bExport= */true);

}; // end of sap/ui/rta/RuntimeAuthoring.js
